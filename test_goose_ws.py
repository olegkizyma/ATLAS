import asyncio
import aiohttp
import json
import time

async def test_goose_ws():
    """–¢–µ—Å—Ç—É—î WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Goose Web"""
    ws_url = "ws://127.0.0.1:3000/ws"
    payload = {
        "type": "message", 
        "content": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ ATLAS.", 
        "session_id": "test_atlas", 
        "timestamp": int(time.time()*1000)
    }
    
    print(f"üîó –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ {ws_url}")
    print(f"üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {payload['content']}")
    
    try:
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.ws_connect(ws_url, heartbeat=30) as ws:
                print("‚úÖ WebSocket –∑'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await ws.send_str(json.dumps(payload))
                print("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                # –ß–∏—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                response_chunks = []
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        try:
                            obj = json.loads(msg.data)
                            print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ: {obj}")
                            
                            if isinstance(obj, dict):
                                msg_type = obj.get("type")
                                if msg_type == "response":
                                    content = obj.get("content")
                                    if content:
                                        response_chunks.append(str(content))
                                        print(f"üí¨ –ö–æ–Ω—Ç–µ–Ω—Ç: {content}")
                                elif msg_type in ("complete", "cancelled"):
                                    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {msg_type}")
                                    break
                                elif msg_type == "error":
                                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {obj.get('message', 'websocket error')}")
                                    break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
                            response_chunks.append(str(msg.data))
                    elif msg.type in (aiohttp.WSMsgType.CLOSE, aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                        print(f"üîå WebSocket –∑–∞–∫—Ä–∏—Ç–æ: {msg.type}")
                        break
                
                full_response = "".join(response_chunks).strip()
                print(f"üìù –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {full_response}")
                return {"success": True, "response": full_response}
                
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ WebSocket: {e}")
        return {"success": False, "error": str(e)}

if __name__ == "__main__":
    result = asyncio.run(test_goose_ws())
    print(f"\nüèÅ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
