#!/bin/bash

# ATLAS Intelligent System - Main Entry Point
# start_stack_intelligent.sh - –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ ATLAS

set -e

echo "üß† ATLAS - Pure Intelligent Multi-Agent System"
echo "üöÄ Starting Intelligent Stack (Zero Hardcodes, Super Reliability)..."

# –ö–æ–ª—å–æ—Ä–∏
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_debug() { echo -e "${BLUE}[DEBUG]${NC} $1"; }
log_intelligent() { echo -e "${CYAN}[INTELLIGENT]${NC} $1"; }

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Goose: —Å–∏–º–ª—ñ–Ω–∫ ~/.config/goose -> <repo>/goose/goose
ensure_goose_config_link() {
    local repo_conf_dir="$(pwd)/goose/goose"
    local user_config_base="$HOME/.config"
    local user_conf_link="$user_config_base/goose"
    
    log_debug "Setting up Goose configuration link..."
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—è
    mkdir -p "$user_config_base"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
    if [ ! -d "$repo_conf_dir" ]; then
        log_error "Goose config directory not found at $repo_conf_dir"
        return 1
    fi
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏–º–ª—ñ–Ω–∫—É
    if [ -L "$user_conf_link" ]; then
        # –°–∏–º–ª—ñ–Ω–∫ —ñ—Å–Ω—É—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
        local current_target=$(readlink "$user_conf_link")
        if [ "$current_target" != "$repo_conf_dir" ]; then
            log_warn "Updating existing Goose config link"
            rm -f "$user_conf_link"
            ln -s "$repo_conf_dir" "$user_conf_link"
        fi
    elif [ -d "$user_conf_link" ]; then
        # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î, –∞–ª–µ –Ω–µ —Å–∏–º–ª—ñ–Ω–∫ - —Ä–æ–±–∏–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
        log_warn "Found existing Goose config directory, backing up"
        mv "$user_conf_link" "${user_conf_link}_backup_$(date +%s)"
        ln -s "$repo_conf_dir" "$user_conf_link"
    else
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–∏–º–ª—ñ–Ω–∫
        ln -s "$repo_conf_dir" "$user_conf_link"
    fi
    
    log_debug "Goose configuration link set to: $repo_conf_dir"
}

# –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É Goose
resolve_goose_bin() {
    local goose_bin=""
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É –ª–æ–∫–∞–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if [ -x "$HOME/.local/bin/goose" ]; then
        goose_bin="$HOME/.local/bin/goose"
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —à–ª—è—Ö–∞—Ö
    elif command -v goose &> /dev/null; then
        goose_bin=$(command -v goose)
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
    elif [ -x "$(pwd)/goose/target/release/goose" ]; then
        goose_bin="$(pwd)/goose/target/release/goose"
    fi
    
    echo "$goose_bin"
}

# –ó–∞–ø—É—Å–∫ Ukrainian TTS —Å–µ—Ä–≤–µ—Ä–∞
start_ukrainian_tts() {
    log_info "üé§ Starting Ukrainian TTS Server..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ TTS –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
    if curl -s --max-time 3 "http://127.0.0.1:3001/health" > /dev/null 2>&1 ||
       curl -s --max-time 3 "http://127.0.0.1:3001/voices" > /dev/null 2>&1; then
        log_info "‚úÖ Ukrainian TTS already running on port 3001"
        export ATLAS_TTS_AVAILABLE=true
        return 0
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó TTS
    if [ ! -d "ukrainian-tts" ]; then
        log_warn "‚ö†Ô∏è  Ukrainian TTS directory not found, continuing without voice features"
        export ATLAS_TTS_AVAILABLE=false
        return 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ TTS —Å–µ—Ä–≤–µ—Ä–∞
    if [ ! -f "ukrainian-tts/tts_server.py" ]; then
        log_warn "‚ö†Ô∏è  TTS server script not found, continuing without voice features"
        export ATLAS_TTS_AVAILABLE=false
        return 1
    fi
    
    log_info "üöÄ Starting Ukrainian TTS Server on port 3001..."
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    mkdir -p "logs"
    
    # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é TTS
    cd ukrainian-tts
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è TTS –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if [ -d ".venv" ] && [ -f ".venv/bin/activate" ]; then
        log_debug "Activating TTS virtual environment..."
        source .venv/bin/activate
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ TTS –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —É venv
        if ! python3 -c "import ukrainian_tts" 2>/dev/null; then
            log_warn "‚ö†Ô∏è  Ukrainian TTS dependencies not found in venv, continuing without voice features"
            cd ..
            export ATLAS_TTS_AVAILABLE=false
            return 1
        fi
    else
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ TTS –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º—ñ
        if ! python3 -c "import ukrainian_tts" 2>/dev/null; then
            log_warn "‚ö†Ô∏è  Ukrainian TTS dependencies not installed, attempting to install..."
            if [ -f "requirements.txt" ]; then
                pip3 install -r requirements.txt --quiet || {
                    log_warn "‚ö†Ô∏è  Failed to install TTS dependencies, continuing without voice features"
                    cd ..
                    export ATLAS_TTS_AVAILABLE=false
                    return 1
                }
            else
                log_warn "‚ö†Ô∏è  No requirements.txt found for TTS, continuing without voice features"
                cd ..
                export ATLAS_TTS_AVAILABLE=false
                return 1
            fi
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫ TTS —Å–µ—Ä–≤–µ—Ä–∞ –∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è macOS
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ MPS (Metal Performance Shaders) –¥–ª—è Apple Silicon
    export TTS_DEVICE=${TTS_DEVICE:-mps}
    export TTS_PORT=3001
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ TTS —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ–Ω—ñ
    python3 tts_server.py --host 127.0.0.1 --port 3001 --device ${TTS_DEVICE} > ../logs/tts.log 2>&1 &
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ PID –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º
    echo $! > ../logs/tts.pid
    log_info "‚úÖ Ukrainian TTS Server started (PID: $(cat ../logs/tts.pid))"
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    cd ..
    
    # –î–∞—î–º–æ —á–∞—Å –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é TTS
    log_debug "Waiting for TTS to initialize..."
    sleep 8
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è TTS
    if curl -s --max-time 5 "http://127.0.0.1:3001/health" > /dev/null 2>&1 ||
       curl -s --max-time 5 "http://127.0.0.1:3001/voices" > /dev/null 2>&1; then
        log_info "‚úÖ Ukrainian TTS Server is now running"
        export ATLAS_TTS_AVAILABLE=true
        return 0
    else
        log_warn "‚ö†Ô∏è  Ukrainian TTS Server failed to start, continuing without voice features"
        export ATLAS_TTS_AVAILABLE=false
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ Goose, —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ
start_goose_if_needed() {
    log_info "ü¶¢ Checking Goose executor service..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ Goose –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
    if curl -s --max-time 3 "http://127.0.0.1:3000/health" > /dev/null 2>&1; then
        log_info "‚úÖ Goose already running on port 3000"
        export ATLAS_GOOSE_AVAILABLE=true
        return 0
    fi
    
    log_info "ü¶¢ Starting Goose Web Interface..."
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    ensure_goose_config_link || {
        log_warn "‚ö†Ô∏è  Could not setup Goose configuration, continuing with limited execution capabilities"
        export ATLAS_GOOSE_AVAILABLE=false
        return 1
    }
    
    # –ü–µ—Ä–µ—Ö—ñ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é Goose
    if [ ! -d "goose" ]; then
        log_warn "‚ö†Ô∏è  Goose directory not found, continuing with limited execution capabilities"
        export ATLAS_GOOSE_AVAILABLE=false
        return 1
    fi
    
    cd goose
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª Goose
    local goose_bin=$(resolve_goose_bin)
    
    # –Ø–∫—â–æ –±—ñ–Ω–∞—Ä–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–±–æ –∑—ñ–±—Ä–∞—Ç–∏
    if [ -z "$goose_bin" ]; then
        log_info "üîß Goose binary not found, attempting to download or build..."
        
        # –°–ø—Ä–æ–±–∞ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–æ—Ç–æ–≤–∏–π CLI
        if [ -f "./download_cli.sh" ]; then
            log_debug "Running download_cli.sh to get Goose binary..."
            ./download_cli.sh
            goose_bin=$(resolve_goose_bin)
        fi
        
        # –°–ø—Ä–æ–±–∞ 2: –ó—ñ–±—Ä–∞—Ç–∏ —á–µ—Ä–µ–∑ Cargo, —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è
        if [ -z "$goose_bin" ] && command -v cargo &> /dev/null; then
            log_debug "Building Goose from source with Cargo..."
            cargo build --release --quiet
            goose_bin=$(resolve_goose_bin)
        fi
    fi
    
    # –ó–∞–ø—É—Å–∫ Goose Web, —è–∫—â–æ –±—ñ–Ω–∞—Ä–Ω–∏–∫ –∑–Ω–∞–π–¥–µ–Ω–æ
    if [ -n "$goose_bin" ]; then
        log_info "üöÄ Starting Goose Web Interface on port 3000..."
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è —Å–µ—Å—ñ–π
        mkdir -p "$HOME/.local/share/goose/sessions"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        mkdir -p "../logs"
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è ATLAS
        export GOOSE_DISABLE_KEYRING=1
        TMPDIR="$HOME/.local/share/goose/sessions" \
        XDG_CONFIG_HOME=$(pwd) \
        "$goose_bin" web > ../logs/goose.log 2>&1 &
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ PID –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º
        echo $! > ../logs/goose.pid
        log_info "‚úÖ Goose Web Interface started (PID: $(cat ../logs/goose.pid))"
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        cd ..
        
        # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–ø—É—Å–∫
        log_debug "Waiting for Goose to initialize..."
        sleep 3
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è Goose
        if curl -s --max-time 3 "http://127.0.0.1:3000/health" > /dev/null 2>&1; then
            log_info "‚úÖ Goose Web Interface is now running"
            export ATLAS_GOOSE_AVAILABLE=true
            return 0
        else
            log_warn "‚ö†Ô∏è  Goose Web Interface failed to start, continuing with limited execution capabilities"
            export ATLAS_GOOSE_AVAILABLE=false
            return 1
        fi
    else
        log_warn "‚ö†Ô∏è  Could not find or build Goose binary, continuing with limited execution capabilities"
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        cd ..
        export ATLAS_GOOSE_AVAILABLE=false
        return 1
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
check_requirements() {
    log_info "üçé Checking macOS requirements..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —É—Ç–∏–ª—ñ—Ç
    if command -v brew &> /dev/null; then
        log_info "‚úÖ Homebrew - AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  Homebrew not found, some features may be limited"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
    if command -v python3 &> /dev/null; then
        local python_version=$(python3 --version | cut -d' ' -f2)
        log_info "‚úÖ Python $python_version - OK"
    else
        log_error "‚ùå Python 3 not found"
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ curl
    if command -v curl &> /dev/null; then
        log_info "‚úÖ curl - OK"
    else
        log_error "‚ùå curl not found"
        exit 1
    fi
    
    log_info "‚úÖ macOS requirements check completed"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_critical_services() {
    log_info "üîç Checking critical services..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI API (–∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–∏–π)
    log_debug "Checking Local AI API at http://127.0.0.1:3010/v1/models..."
    if curl -s --max-time 5 "http://127.0.0.1:3010/v1/models" > /dev/null 2>&1; then
        log_info "‚úÖ Local AI API - AVAILABLE"
        log_info "‚úÖ Local AI API (port 3010) - CRITICAL SERVICE AVAILABLE"
        export ATLAS_AI_AVAILABLE=true
    else
        log_error "‚ùå Local AI API - NOT AVAILABLE"
        log_error "‚ùå Local AI API (port 3010) - CRITICAL SERVICE UNAVAILABLE"
        log_error "   Please start your local AI API server (Ollama, LM Studio, etc.)"
        log_error "   Example: ollama serve"
        exit 1
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤  
check_optional_services() {
    log_info "üîç Checking optional services..."
    
    # TTS —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –≥–æ–ª–æ—Å—É)
    log_debug "Checking Ukrainian TTS Server (port 3001)..."
    if curl -s --max-time 3 "http://127.0.0.1:3001/health" > /dev/null 2>&1 || 
       curl -s --max-time 3 "http://127.0.0.1:3001/voices" > /dev/null 2>&1; then
        log_info "‚úÖ Ukrainian TTS Server (port 3001) - Voice synthesis available"
        export ATLAS_TTS_AVAILABLE=true
    else
        log_warn "‚ö†Ô∏è  Ukrainian TTS Server (port 3001) - Voice features disabled"
        log_warn "   Voice synthesis will be limited"
        export ATLAS_TTS_AVAILABLE=false
    fi
}

# –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
start_intelligent_atlas() {
    log_info "üß† Preparing Python environment..."
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if [ ! -d "intelligent_atlas" ]; then
        log_error "‚ùå intelligent_atlas directory not found!"
        exit 1
    fi
    
    cd intelligent_atlas
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if [ ! -d "venv" ]; then
        log_info "Creating Python virtual environment..."
        python3 -m venv venv
    fi
    
    # –ê–∫—Ç–∏–≤—É—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    source venv/bin/activate
    
    log_info "üì¶ Installing/updating dependencies..."
    pip install -r requirements.txt --quiet
    
    log_info "‚úÖ Environment prepared"
    
    log_intelligent "üß† Starting ATLAS Pure Intelligent System..."
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —É —Ñ–æ–Ω—ñ
    python core/intelligent_engine.py > ../logs/atlas_intelligent.log 2>&1 &
    local atlas_pid=$!
    echo $atlas_pid > ../logs/atlas_intelligent.pid
    
    log_intelligent "üîÑ ATLAS system starting (PID: $atlas_pid)..."
    log_intelligent "üìÑ Logs: logs/atlas_intelligent.log"
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
    cd ..
    
    # –î–∞—î–º–æ —á–∞—Å –Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    log_info "‚è≥ Waiting for system initialization (30 seconds)..."
    sleep 30
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —Å–∏—Å—Ç–µ–º–∞
    log_debug "Checking ATLAS Web Interface at http://127.0.0.1:5001/api/health..."
    if curl -s --max-time 5 "http://127.0.0.1:5001/api/health" > /dev/null 2>&1 || 
       curl -s --max-time 5 "http://127.0.0.1:5001/" > /dev/null 2>&1; then
        log_info "‚úÖ ATLAS Web Interface - AVAILABLE"
        log_intelligent "‚úÖ ATLAS Web Interface is responding"
        export ATLAS_WEB_AVAILABLE=true
    else
        log_warn "‚ö†Ô∏è  ATLAS Web Interface not responding yet, check logs"
        export ATLAS_WEB_AVAILABLE=false
    fi
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo ""
    log_intelligent "üß† ATLAS Pure Intelligent System Startup"
    log_intelligent "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
    mkdir -p logs
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
    check_requirements
    echo ""
    check_critical_services
    echo ""  
    check_optional_services
    echo ""
    
    # –ó–∞–ø—É—Å–∫ Goose, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    start_goose_if_needed
    echo ""
    
    # –ó–∞–ø—É—Å–∫ Ukrainian TTS, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    start_ukrainian_tts
    echo ""
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    start_intelligent_atlas
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    echo ""
    log_intelligent "üìä ATLAS System Status:"
    echo ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    log_debug "Checking ATLAS Web Interface at http://127.0.0.1:5001/api/health..."
    if curl -s --max-time 3 "http://127.0.0.1:5001/api/health" > /dev/null 2>&1 || 
       curl -s --max-time 3 "http://127.0.0.1:5001/" > /dev/null 2>&1; then
        log_info "‚úÖ ATLAS Web Interface - AVAILABLE"
        log_intelligent "‚úÖ ATLAS Web Interface: http://127.0.0.1:5001"
    else
        log_warn "‚ö†Ô∏è  ATLAS Web Interface - NOT RESPONDING"
    fi
    
    echo "Info: External Services:"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AI API
    log_debug "Checking Local AI API at http://127.0.0.1:3010/v1/models..."
    if curl -s --max-time 3 "http://127.0.0.1:3010/v1/models" > /dev/null 2>&1; then
        log_info "‚úÖ Local AI API - AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  Local AI API - NOT AVAILABLE"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Goose
    log_debug "Checking Goose Executor at http://127.0.0.1:3000/health..."
    if curl -s --max-time 3 "http://127.0.0.1:3000/health" > /dev/null 2>&1; then
        log_info "‚úÖ Goose Executor - AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  Goose Executor - NOT AVAILABLE"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTS
    log_debug "Checking Ukrainian TTS at http://127.0.0.1:3001/health..."
    if curl -s --max-time 3 "http://127.0.0.1:3001/health" > /dev/null 2>&1; then
        log_info "‚úÖ Ukrainian TTS - AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  Ukrainian TTS - NOT AVAILABLE"
    fi
    
    echo ""
    log_intelligent "üöÄ ATLAS Pure Intelligent System is ready!"
    log_intelligent "üåê Access: http://127.0.0.1:5001"
    log_intelligent "üìÑ Logs: logs/atlas_intelligent.log"
}

# –ó–∞–ø—É—Å–∫
main "$@"