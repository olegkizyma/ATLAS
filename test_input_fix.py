#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas API —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º –ø–æ–ª—è –≤–≤–æ–¥—É
"""

import asyncio
import json
import time
import aiohttp
from datetime import datetime

async def test_atlas_stream_api():
    """–¢–µ—Å—Ç—É—î —Å—Ç—Ä—ñ–º—ñ–Ω–≥–æ–≤–∏–π API Atlas"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas Stream API...")
    
    test_message = "–ü—Ä–∏–≤—ñ—Ç Atlas! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É."
    
    async with aiohttp.ClientSession() as session:
        try:
            print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{test_message}'")
            
            async with session.post(
                'http://localhost:8080/api/chat/stream',
                json={'message': test_message},
                headers={'Content-Type': 'application/json'}
            ) as response:
                
                if response.status != 200:
                    print(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {response.status}")
                    return
                
                print("üì° –û—Ç—Ä–∏–º—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—Ä—ñ–º–æ–º...")
                buffer = ''
                
                async for chunk in response.content.iter_chunked(1024):
                    chunk_text = chunk.decode('utf-8')
                    buffer += chunk_text
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤–Ω—ñ –ª—ñ–Ω—ñ—ó
                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        line = line.strip()
                        
                        if line.startswith('data:'):
                            data = line[5:].strip()
                            try:
                                event = json.loads(data)
                                event_type = event.get('type', event.get('event', 'unknown'))
                                print(f"  üì® {event_type}: {json.dumps(event, ensure_ascii=False)[:100]}...")
                            except json.JSONDecodeError:
                                print(f"  üì® text: {data[:50]}...")
                
                print("‚úÖ –°—Ç—Ä—ñ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def test_atlas_regular_api():
    """–¢–µ—Å—Ç—É—î –∑–≤–∏—á–∞–π–Ω–∏–π API Atlas"""
    print("\nüöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas Regular API...")
    
    test_message = "–¶–µ —Ç–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ API –±–µ–∑ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"
    
    async with aiohttp.ClientSession() as session:
        try:
            print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: '{test_message}'")
            
            async with session.post(
                'http://localhost:8080/api/chat',
                json={'message': test_message},
                headers={'Content-Type': 'application/json'}
            ) as response:
                
                if response.status != 200:
                    print(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {response.status}")
                    return
                
                data = await response.json()
                print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {json.dumps(data, ensure_ascii=False)[:200]}...")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def test_status_endpoint():
    """–¢–µ—Å—Ç—É—î —Å—Ç–∞—Ç—É—Å –µ–Ω–¥–ø–æ–π–Ω—Ç"""
    print("\nüöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏...")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get('http://localhost:8080/api/status') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {json.dumps(data, ensure_ascii=False, indent=2)}")
                else:
                    print(f"‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: HTTP {response.status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç—É—Å—É: {e}")

async def test_goose_sessions():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î Goose —Å–µ—Å—ñ—ó"""
    print("\nüöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Goose —Å–µ—Å—ñ–π...")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get('http://localhost:8080/api/goose/sessions') as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"ü™ø Goose —Å–µ—Å—ñ—ó: {json.dumps(data, ensure_ascii=False, indent=2)}")
                else:
                    print(f"‚ùå Goose —Å–µ—Å—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: HTTP {response.status}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Goose —Å–µ—Å—ñ–π: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print(f"üß™ Atlas Input Fix Test - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    await test_status_endpoint()
    await test_goose_sessions()
    await test_atlas_regular_api()
    await test_atlas_stream_api()
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–Ø–∫—â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –≤—Å–µ —â–µ –±–ª–æ–∫—É—î—Ç—å—Å—è:")
    print("1. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ Ctrl+Shift+U –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ Atlas")
    print("2. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É (F5)")
    print("3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫")

if __name__ == "__main__":
    asyncio.run(main())
