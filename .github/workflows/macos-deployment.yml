name: macOS Deployment

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-macos:
    name: Validate on macOS
    runs-on: macos-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: intelligent_atlas/requirements.txt

      - name: Install system dependencies (macOS)
        run: |
          # Install curl if not available
          if ! command -v curl &> /dev/null; then
            brew install curl
          fi
          
          # Install Python dependencies
          cd intelligent_atlas
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate import structure
        id: validate
        run: |
          cd intelligent_atlas
          export PYTHONPATH="$(pwd):$(pwd)/core:$(pwd)/config:$PYTHONPATH"
          
          echo "Validating core imports..."
          python -c "
          import sys
          import os
          
          # Add paths
          sys.path.append('.')
          sys.path.append('./core')
          sys.path.append('./config')
          
          try:
              from core.intelligent_engine import intelligent_engine
              from core.web_interface import WebInterface
              from config.dynamic_config import DynamicConfigManager
              from core.agent_system import *
              from core.voice_system import *
              print('‚úÖ All core modules validated successfully')
              
              # Test dynamic config generation (without AI API)
              config_mgr = DynamicConfigManager()
              fallback_config = config_mgr._generate_fallback_config('complete')
              assert 'WEB' in fallback_config
              assert 'AGENTS' in fallback_config
              print('‚úÖ Dynamic configuration system validated')
              
          except Exception as e:
              print(f'‚ùå Validation failed: {e}')
              sys.exit(1)
          "
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Test script permissions
        run: |
          chmod +x start_stack_macos.sh stop_stack.sh status_stack.sh
          chmod +x scripts/smoke_e2e.sh
          
          echo "‚úÖ All scripts are executable"

  deploy-staging:
    name: Deploy to Staging (macOS)
    runs-on: self-hosted
    needs: validate-macos
    if: |
      always() && 
      needs.validate-macos.outputs.validation_status == 'success' &&
      (github.event_name == 'push' || github.event.inputs.deploy_target == 'staging')
    environment:
      name: staging-macos
      url: http://localhost:5001
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stop existing ATLAS instance
        continue-on-error: true
        run: |
          if [ -f "./stop_stack.sh" ]; then
            ./stop_stack.sh
          fi
          
          # Additional cleanup for staging
          pkill -f "intelligent_atlas.*python" || true
          sleep 5

      - name: Clean staging environment
        run: |
          # Clean old logs
          if [ -d "logs" ]; then
            find logs/ -name "*.log" -type f -mtime +1 -delete || true
          fi
          
          # Clean Python cache
          if [ -d "intelligent_atlas" ]; then
            cd intelligent_atlas
            find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
            find . -type f -name "*.pyc" -delete 2>/dev/null || true
          fi

      - name: Prepare ATLAS environment
        run: |
          cd intelligent_atlas
          
          # Create/update venv
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt --upgrade
          
          echo "‚úÖ ATLAS environment prepared"

      - name: Pre-deployment health check
        run: |
          echo "Checking external service availability..."
          
          # Check if AI API is available (required)
          if curl -s --max-time 5 "http://127.0.0.1:3010/v1/models" > /dev/null 2>&1; then
            echo "‚úÖ Local AI API available"
          else
            echo "‚ùå Local AI API not available - deployment may fail"
            echo "Please ensure Ollama or another OpenAI-compatible API is running on port 3010"
          fi
          
          # Check optional services
          if curl -s --max-time 3 "http://127.0.0.1:3000/health" > /dev/null 2>&1; then
            echo "‚úÖ Goose available"
          else
            echo "‚ö†Ô∏è  Goose not available - task execution will be limited"
          fi

      - name: Deploy ATLAS
        run: |
          echo "üöÄ Deploying ATLAS Pure Intelligent System..."
          
          # Start the stack
          ./start_stack_macos.sh
          
          # Wait for system to be ready
          echo "‚è≥ Waiting for system initialization..."
          sleep 30
          
          # Verify deployment
          if curl -s --max-time 10 "http://127.0.0.1:5001/api/health" > /dev/null 2>&1; then
            echo "‚úÖ ATLAS deployment successful"
          else
            echo "‚ùå ATLAS deployment failed"
            exit 1
          fi

      - name: Post-deployment smoke test
        run: |
          echo "üß™ Running post-deployment smoke test..."
          ./scripts/smoke_e2e.sh

      - name: Generate deployment report
        run: |
          echo "üìä Generating deployment report..."
          ./status_stack.sh || true
          
          # Create deployment summary
          cat > deployment_summary.txt << EOF
          ATLAS Pure Intelligent System - Staging Deployment
          ==================================================
          
          Timestamp: $(date)
          Environment: staging-macos
          Branch: ${GITHUB_REF_NAME}
          Commit: ${GITHUB_SHA}
          
          Services:
          - ATLAS Web Interface: http://127.0.0.1:5001
          - AI API: http://127.0.0.1:3010
          - Goose: http://127.0.0.1:3000
          - TTS: http://127.0.0.1:3001
          
          Status: Deployed and healthy
          EOF
          
          cat deployment_summary.txt

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment completed successfully"
          else
            echo "‚ùå Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production (macOS)
    runs-on: self-hosted
    needs: [validate-macos, deploy-staging]
    if: |
      always() && 
      needs.validate-macos.outputs.validation_status == 'success' &&
      needs.deploy-staging.result == 'success' &&
      github.event.inputs.deploy_target == 'production'
    environment:
      name: production-macos
      url: http://localhost:5001
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Production deployment confirmation
        run: |
          echo "üî¥ PRODUCTION DEPLOYMENT INITIATED"
          echo "This will replace the production ATLAS system"
          echo "Branch: ${GITHUB_REF_NAME}"
          echo "Commit: ${GITHUB_SHA}"

      - name: Create production backup
        run: |
          echo "üíæ Creating production backup..."
          
          # Backup current logs
          if [ -d "logs" ]; then
            backup_dir="backups/production_$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$backup_dir"
            cp -r logs/* "$backup_dir/" || true
            echo "‚úÖ Logs backed up to $backup_dir"
          fi

      - name: Stop production ATLAS
        run: |
          echo "üõë Stopping production ATLAS..."
          if [ -f "./stop_stack.sh" ]; then
            ./stop_stack.sh
          fi
          
          # Ensure complete shutdown
          pkill -f "intelligent_atlas.*python" || true
          sleep 10

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          
          # Prepare environment
          cd intelligent_atlas
          source venv/bin/activate || python3 -m venv venv && source venv/bin/activate
          pip install -r requirements.txt --upgrade --quiet
          cd ..
          
          # Start production system
          ./start_stack_macos.sh
          
          # Extended wait for production
          sleep 45

      - name: Production validation
        run: |
          echo "‚úÖ Validating production deployment..."
          
          # Health check
          if ! curl -s --max-time 15 "http://127.0.0.1:5001/api/health" > /dev/null 2>&1; then
            echo "‚ùå Production health check failed"
            exit 1
          fi
          
          # Smoke test
          ./scripts/smoke_e2e.sh
          
          # Status report
          ./status_stack.sh
          
          echo "‚úÖ Production deployment validated"

      - name: Production deployment complete
        run: |
          echo "üéâ PRODUCTION DEPLOYMENT COMPLETED"
          echo "ATLAS Pure Intelligent System is now running in production"
          echo "Access: http://127.0.0.1:5001"