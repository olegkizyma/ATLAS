#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É Atlas
–°–∏–º—É–ª—é—î —Ç–æ—á–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –º—ñ—Å—Ü—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime

class AtlasBlockingTester:
    def __init__(self):
        self.base_url = "http://localhost:8080"
        self.session = None
        self.test_messages = [
            "–ü—Ä–∏–≤—ñ—Ç",
            "–Ø–∫ —Å–ø—Ä–∞–≤–∏?",
            "–†–æ–∑–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ",
            "–î–æ–ø–æ–º–æ–≥–∏ –ø–æ—Ç—Ä–µ–±—É—é",
            "–¢–µ—Å—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"
        ]
    
    async def setup(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó"""
        print(f"üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å–µ—Å—ñ—ó...")
        self.session = aiohttp.ClientSession()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞
        try:
            async with self.session.get(f"{self.base_url}/api/status") as response:
                if response.status == 200:
                    status = await response.json()
                    print(f"‚úÖ Atlas —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î: {status}")
                else:
                    print(f"‚ùå Atlas —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False
        
        return True
    
    async def cleanup(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó"""
        if self.session:
            await self.session.close()
    
    async def test_regular_api_blocking(self):
        """–¢–µ—Å—Ç –∑–≤–∏—á–∞–π–Ω–æ–≥–æ API –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
        print(f"\nüîç === –¢–ï–°–¢ –ó–í–ò–ß–ê–ô–ù–û–ì–û API ===")
        
        for i, message in enumerate(self.test_messages, 1):
            print(f"\nüì§ –¢–µ—Å—Ç {i}/{len(self.test_messages)}: '{message}'")
            
            # –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            start_time = time.time()
            
            try:
                async with self.session.post(
                    f"{self.base_url}/api/chat",
                    json={"message": message},
                    headers={"Content-Type": "application/json"}
                ) as response:
                    
                    response_time = time.time() - start_time
                    print(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_time:.2f}—Å")
                    print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        response_data = await response.json()
                        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞: {len(response_data.get('response', ''))} —Å–∏–º–≤–æ–ª—ñ–≤")
                        print(f"üéØ –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤: {response_data.get('response', '')[:100]}...")
                        
                        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–∞—É–∑–∏ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (—è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
                        await asyncio.sleep(2)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–ª—è –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        await self.check_input_field_state(i)
                        
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.status} - {error_text}")
                        break
                        
            except Exception as e:
                print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ: {e}")
                break
    
    async def test_stream_api_blocking(self):
        """–¢–µ—Å—Ç streaming API –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
        print(f"\nüîç === –¢–ï–°–¢ STREAMING API ===")
        
        for i, message in enumerate(self.test_messages, 1):
            print(f"\nüì§ Stream —Ç–µ—Å—Ç {i}/{len(self.test_messages)}: '{message}'")
            
            # –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è streaming –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            start_time = time.time()
            
            try:
                async with self.session.post(
                    f"{self.base_url}/api/chat/stream",
                    json={"message": message},
                    headers={"Content-Type": "application/json"}
                ) as response:
                    
                    print(f"üìä Stream HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        # –ß–∏—Ç–∞–Ω–Ω—è streaming –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        tokens_received = 0
                        stream_complete = False
                        
                        async for chunk in response.content.iter_chunked(1024):
                            chunk_text = chunk.decode('utf-8', errors='ignore')
                            lines = chunk_text.strip().split('\n')
                            
                            for line in lines:
                                if line.startswith('data: '):
                                    try:
                                        data = json.loads(line[6:])
                                        
                                        if data.get('type') == 'token':
                                            tokens_received += 1
                                        elif data.get('type') == 'done':
                                            stream_complete = True
                                            response_time = time.time() - start_time
                                            print(f"‚úÖ Stream –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {tokens_received} —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ {response_time:.2f}—Å")
                                            break
                                        elif data.get('type') == 'error':
                                            print(f"‚ùå Stream –ø–æ–º–∏–ª–∫–∞: {data.get('content')}")
                                            break
                                            
                                    except json.JSONDecodeError:
                                        continue
                            
                            if stream_complete:
                                break
                        
                        # –ö—Ä–∏—Ç–∏—á–Ω–∏–π –º–æ–º–µ–Ω—Ç: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è stream
                        print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–ª—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è stream...")
                        await asyncio.sleep(1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
                        await self.check_input_field_state(i, is_stream=True)
                        
                        # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                        await asyncio.sleep(2)
                        
                    else:
                        error_text = await response.text()
                        print(f"‚ùå Stream –ø–æ–º–∏–ª–∫–∞: {response.status} - {error_text}")
                        break
                        
            except Exception as e:
                print(f"‚ùå Stream –≤–∏–Ω—è—Ç–æ–∫: {e}")
                break
    
    async def check_input_field_state(self, test_number, is_stream=False):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–æ–ª—è –≤–≤–æ–¥—É (—Å–∏–º—É–ª—è—Ü—ñ—è)"""
        api_type = "Stream" if is_stream else "Regular"
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±–∏ –±—É–≤ JavaScript –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ DOM
        # –ê–ª–µ –º–∏ –º–æ–∂–µ–º–æ —Å–∏–º—É–ª—é–≤–∞—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
        
        print(f"üîç [{api_type}] –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –ø–æ–ª—è –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É {test_number}:")
        print(f"   - –ü–æ–ª–µ –º–∞—î –±—É—Ç–∏: input.disabled = false")
        print(f"   - isStreaming —Ñ–ª–∞–≥: false")
        print(f"   - isStreamPending —Ñ–ª–∞–≥: false")
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –º–æ–∂–ª–∏–≤–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if is_stream and test_number > 2:
            print(f"‚ö†Ô∏è –ü–û–¢–ï–ù–¶–Ü–ô–ù–ê –ü–†–û–ë–õ–ï–ú–ê: Stream —Ç–µ—Å—Ç {test_number} –º–æ–∂–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º!")
            print(f"   - –ú–æ–∂–ª–∏–≤–æ finally –±–ª–æ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print(f"   - –ú–æ–∂–ª–∏–≤–æ —Ñ–ª–∞–≥–∏ —Å—Ç–∞–Ω—É –Ω–µ —Å–∫–∏–Ω—É–ª–∏—Å—è")
    
    async def simulate_user_interaction_sequence(self):
        """–°–∏–º—É–ª—è—Ü—ñ—è —Ç–æ—á–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        print(f"\nüé≠ === –°–ò–ú–£–õ–Ø–¶–Ü–Ø –î–Ü–ô –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===")
        
        print(f"1. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î Atlas —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        await asyncio.sleep(1)
        
        print(f"2. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø–æ–ª–µ")
        await asyncio.sleep(1)
        
        print(f"3. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î Enter –∞–±–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
        await self.test_stream_api_blocking()
        
        print(f"4. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
        await asyncio.sleep(2)
        
        print(f"5. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print(f"   üö® –¢–£–¢ –ú–ê–Ñ –í–Ü–î–ë–£–í–ê–¢–ò–°–Ø –ë–õ–û–ö–£–í–ê–ù–ù–Ø!")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç –ø—ñ—Å–ª—è –∫—ñ–ª—å–∫–æ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await self.test_field_unlock_mechanisms()
    
    async def test_field_unlock_mechanisms(self):
        """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω—ñ–∑–º—ñ–≤ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–ª—è"""
        print(f"\nüîß === –¢–ï–°–¢ –ú–ï–•–ê–ù–Ü–ó–ú–Ü–í –†–û–ó–ë–õ–û–ö–£–í–ê–ù–ù–Ø ===")
        
        print(f"1. –¢–µ—Å—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è Ctrl+Shift+U")
        print(f"   JavaScript: document.getElementById('chatInput').disabled = false")
        
        print(f"2. –¢–µ—Å—Ç –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—ó (–∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏)")
        print(f"   setInterval –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞–Ω –ø–æ–ª—è")
        
        print(f"3. –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑ debug tools")
        print(f"   –ö–Ω–æ–ø–∫–∞ 'Unlock Input Field' —É debug_input.html")
    
    async def generate_detailed_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print(f"\nüìã === –î–ï–¢–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===")
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"–ß–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {current_time}")
        
        print(f"\nüéØ –ù–ê–ô–Ü–ú–û–í–Ü–†–ù–Ü–®–Ü –ú–Ü–°–¶–Ø –ë–õ–û–ö–£–í–ê–ù–ù–Ø:")
        print(f"1. sendToAtlasStream() - finally –±–ª–æ–∫ –Ω–µ –∑–∞–≤–∂–¥–∏ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î")
        print(f"2. Stream –æ–±—Ä–æ–±–∫–∞ - done event –º–æ–∂–µ –Ω–µ –¥—ñ–π—Ç–∏")
        print(f"3. JavaScript –ø–æ–º–∏–ª–∫–∏ - –ø–µ—Ä–µ—Ä–∏–≤–∞—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        print(f"4. Race condition - –∫—ñ–ª—å–∫–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
        
        print(f"\nüîß –†–ï–ê–õ–Ü–ó–û–í–ê–ù–Ü –†–Ü–®–ï–ù–ù–Ø:")
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —É finally")
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–≤–∞—Ä—ñ–π–Ω–∏–π hotkey Ctrl+Shift+U")
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—é –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏")
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É")
        
        print(f"\nüìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        print(f"1. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ http://localhost:8080")
        print(f"2. –í—ñ–¥–∫—Ä–∏—Ç–∏ Developer Tools ‚Üí Console –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ª–æ–≥—ñ–≤")
        print(f"3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ debug_input.html –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        print(f"4. –ü—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ - Ctrl+Shift+U –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    tester = AtlasBlockingTester()
    
    print("üß™ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ë–õ–û–ö–£–í–ê–ù–ù–Ø ATLAS")
    print("=" * 60)
    
    if not await tester.setup():
        print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    try:
        # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
        await tester.test_regular_api_blocking()
        await tester.test_stream_api_blocking()
        await tester.simulate_user_interaction_sequence()
        await tester.generate_detailed_report()
        
    except KeyboardInterrupt:
        print(f"\nüõë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await tester.cleanup()
        print(f"\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
