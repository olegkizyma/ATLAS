/**
 * ATLAS 3-Agent System Orchestrator
 * Manages communication between Atlas, Tetiana, and Grisha agents
 * Integrates with TTS system and intelligent recovery system
 */
import express from 'express';
import cors from 'cors';
import axios from 'axios';
import WebSocket from 'ws';
import { fileURLToPath } from 'url';
import path from 'path';
import os from 'os';
import { readFileSync, existsSync } from 'fs';
import ModelRegistry from './model_registry.js';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Recovery Bridge Integration
let recoveryBridge, handleExecutionFailure;
try {
    const recoveryModule = await import('../config/recovery_bridge_integration.js');
    ({ recoveryBridge, handleExecutionFailure } = recoveryModule);
    console.log('‚úÖ Recovery Bridge integration loaded');
} catch (e) {
    console.log('‚ö†Ô∏è  Recovery Bridge integration not available:', e.message);
    recoveryBridge = null;
    handleExecutionFailure = null;
}

const app = express();
const PORT = process.env.ORCH_PORT || 5101;

// –Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ adaptive behavior
const INTELLIGENT_MODE = process.env.ORCH_INTELLIGENT_MODE === 'true';
const AUTO_ADAPT = process.env.ORCH_AUTO_ADAPT === 'true';
const LEARNING_ENABLED = process.env.ORCH_LEARNING_ENABLED === 'true';

console.log('üß† ATLAS Orchestrator Intelligent Status:');
console.log(`   Intelligent Mode: ${INTELLIGENT_MODE ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
console.log(`   Auto-Adaptation: ${AUTO_ADAPT ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
console.log(`   Learning System: ${LEARNING_ENABLED ? '‚úÖ Enabled' : '‚ùå Disabled'}`);

const GRISHA_CONFIDENCE_THRESHOLD = Math.max(0, Math.min(1, parseFloat(process.env.GRISHA_CONFIDENCE_THRESHOLD || '0.8')));
const GRISHA_MAX_VERIFY_ITER = Math.max(1, parseInt(process.env.GRISHA_MAX_VERIFY_ITER || '3', 10));

app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Secret-Key']
}));
app.use(express.json({ limit: '10mb' }));

// OpenAI-compatible fallback API base (used for Atlas/Grisha only)
const FALLBACK_API_BASE = (process.env.FALLBACK_API_BASE || 'http://127.0.0.1:3010/v1').replace(/\/$/, '');

async function callOpenAICompatChat(baseUrl, model, userMessage) {
    const url = `${baseUrl}/chat/completions`;
    const payload = {
        model,
        messages: [ { role: 'user', content: userMessage } ],
        stream: false
    };
    const apiKey = process.env.OPENAI_COMPAT_API_KEY || process.env.FALLBACK_API_KEY || '';
    const headers = {
        'Content-Type': 'application/json',
        ...(apiKey ? { 'Authorization': `Bearer ${apiKey}`, 'X-API-Key': apiKey } : {})
    };
    const resp = await axios.post(url, payload, { headers, timeout: 20000 });
    if (resp.status !== 200) throw new Error(`OpenAI-compat HTTP ${resp.status}`);
    const text = resp.data?.choices?.[0]?.message?.content;
    return (typeof text === 'string' && text.trim()) ? text.trim() : null;
}

async function callOpenAICompatChatWithTimeout(baseUrl, model, userMessage, timeoutMs = 1500) {
    const url = `${baseUrl}/chat/completions`;
    const payload = {
        model,
        messages: [ { role: 'user', content: userMessage } ],
        stream: false
    };
    const apiKey = process.env.OPENAI_COMPAT_API_KEY || process.env.FALLBACK_API_KEY || '';
    const headers = {
        'Content-Type': 'application/json',
        ...(apiKey ? { 'Authorization': `Bearer ${apiKey}`, 'X-API-Key': apiKey } : {})
    };
    const resp = await axios.post(url, payload, { headers, timeout: timeoutMs });
    if (resp.status !== 200) throw new Error(`OpenAI-compat HTTP ${resp.status}`);
    const text = resp.data?.choices?.[0]?.message?.content;
    return (typeof text === 'string' && text.trim()) ? text.trim() : null;
}

// Dynamic model/provider registry
const registry = new ModelRegistry();

// –Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑ recovery system
async function handleIntelligentError(error, context, executionData = {}) {
    console.error('üî• Error detected:', error.message);
    
    if (INTELLIGENT_MODE && handleExecutionFailure) {
        try {
            const failureData = {
                error_message: error.message,
                agent_name: context.agent || 'orchestrator',
                attempt_count: context.attempts || 1,
                partial_success: context.partialSuccess || false,
                user_request: context.userRequest || '',
                task_spec: context.taskSpec || {},
                context: context,
                session_id: context.sessionId || 'unknown',
                metadata: {
                    ...executionData,
                    timestamp: new Date().toISOString(),
                    intelligent_mode: INTELLIGENT_MODE,
                    auto_adapt: AUTO_ADAPT
                }
            };
            
            console.log('üß† Requesting intelligent recovery...');
            const recoveryRecommendations = await handleExecutionFailure(failureData, context);
            
            if (recoveryRecommendations) {
                console.log('‚úÖ Recovery recommendations received:', recoveryRecommendations);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                if (recoveryRecommendations.adaptations) {
                    applyIntelligentAdaptations(recoveryRecommendations.adaptations);
                }
                
                return {
                    shouldRetry: recoveryRecommendations.action === 'retry_with_adaptations',
                    adaptations: recoveryRecommendations.adaptations,
                    strategy: recoveryRecommendations.strategy,
                    recommendations: recoveryRecommendations
                };
            }
        } catch (recoveryError) {
            console.error('‚ö†Ô∏è  Recovery system error:', recoveryError.message);
        }
    }
    
    // Fallback –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
    return {
        shouldRetry: false,
        adaptations: {},
        strategy: 'fallback',
        recommendations: null
    };
}

// –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏—Ö –∞–¥–∞–ø—Ç–∞—Ü—ñ–π
function applyIntelligentAdaptations(adaptations) {
    console.log('üîÑ Applying intelligent adaptations:', adaptations);
    
    // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è timeout
    if (adaptations.increase_timeout_factor) {
        const newTimeout = Math.round(20000 * adaptations.increase_timeout_factor);
        console.log(`‚è±Ô∏è  Adapted request timeout: ${newTimeout}ms`);
        // –ú–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    }
    
    // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è context limits
    if (adaptations.reduce_context_factor) {
        const reduction = adaptations.reduce_context_factor;
        console.log(`üìù Context reduction factor applied: ${reduction}`);
    }
    
    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
    if (adaptations.use_conservative_mode) {
        console.log('üõ°Ô∏è  Conservative mode activated');
        process.env.ORCH_CONSERVATIVE_MODE = 'true';
    }
    
    // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    if (adaptations.enable_detailed_logging) {
        console.log('üìä Detailed logging enabled');
        process.env.ORCH_DETAILED_LOGGING = 'true';
    }
}

// Agent configurations
const AGENTS = {
    atlas: {
        role: 'strategist',
        signature: '[ATLAS]',
        color: '#00ff00',
        voice: 'dmytro',
        priority: 1
    },
    tetyana: {
        role: 'executor', 
        signature: '[–¢–ï–¢–Ø–ù–ê]',
        color: '#00ffff',
        voice: 'tetiana',
        priority: 2
    },
    grisha: {
        role: 'validator',
        signature: '[–ì–†–ò–®–ê]', 
        color: '#ffff00',
    voice: 'mykyta',
        priority: 3
    }
};

// Session state management
const sessions = new Map();
let messageCounter = 0;

// Helper functions
const generateMessageId = () => `msg_${Date.now()}_${++messageCounter}`;

const logMessage = (level, message) => {
    console.log(`[${new Date().toISOString()}] [${level.toUpperCase()}] ${message}`);
};


// Tetyana structured report helpers
function tetianaSystemInstruction({ enableTools } = { enableTools: false }) {
    const base = [
        '–¢–∏ ‚Äî –¢–µ—Ç—è–Ω–∞, –≤–∏–∫–æ–Ω–∞–≤–∏—Ü—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–¢–ò–°–õ–û —Ç–∞ –ß–Ü–¢–ö–û, –ª–∏—à–µ —Ñ–∞–∫—Ç–∏ —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.',
        '–ó–ê–í–ñ–î–ò –ü–û–í–ï–†–¢–ê–ô —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ —à–∞–±–ª–æ–Ω–æ–º –Ω–∏–∂—á–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.',
        '',
        '–§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—É:',
        '1) –†–ï–ó–Æ–ú–ï (1-2 —Ä–µ—á–µ–Ω–Ω—è): –∫–æ—Ä–æ—Ç–∫–æ —â–æ –∑—Ä–æ–±–ª–µ–Ω–æ —ñ —Å—Ç–∞—Ç—É—Å.',
        '2) –ö–†–û–ö–ò: –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤.',
        '3) –†–ï–ó–£–õ–¨–¢–ê–¢–ò: –∫–ª—é—á–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ—é (—à–ª—è—Ö–∏ —Ñ–∞–π–ª—ñ–≤, –∫–æ–º–∞–Ω–¥–∏, –ø–æ—Å–∏–ª–∞–Ω–Ω—è).',
        '4) –î–û–ö–ê–ó–ò: –º–∞–ø–∞ criterion -> evidence (–º—ñ–Ω—ñ–º—É–º 2 –∫—Ä–∏—Ç–µ—Ä—ñ—ó) —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É.',
        '5) –ü–ï–†–ï–í–Ü–†–ö–ê: —è–∫ —Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—â–æ —Å–∞–º–µ —ñ —è–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º).',
        '6) –°–¢–ê–¢–£–°: Done | Blocked (–∑ –ø—Ä–∏—á–∏–Ω–æ—é) | Needs Clarification (–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º).',
        '',
        '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—á–∏–Ω–∞–π –∑ –ø—ñ–¥–ø–∏—Å—É [–¢–ï–¢–Ø–ù–ê]. –£–Ω–∏–∫–∞–π —Ä–æ–∑–ª–æ–≥–∏—Ö –º—ñ—Ä–∫—É–≤–∞–Ω—å.'
    ];
    if (enableTools) {
        base.push('–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏/–¥—ñ—ó (—Ñ–∞–π–ª–∏/OS/–¥–æ–¥–∞—Ç–∫–∏). –í—ñ–¥–¥–∞–≤–∞–π –ø–µ—Ä–µ–≤–∞–≥—É —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—é, –∞ –Ω–µ —Å–∏–º—É–ª—è—Ü—ñ—ó.');
    }
    return base.join('\n');
}

function isVagueTetianaResponse(text) {
    const t = String(text || '').toLowerCase().trim();
    if (!t) return true;
    const generic = ['–∑–∞–≤–¥–∞–Ω–Ω—è –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ', '–∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ', '–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤–∏–π', '–≥–æ—Ç–æ–≤–∞'];
    return generic.some(g => t === g || t.startsWith(g));
}

function validateTetianaReport(text) {
    const t = String(text || '');
    const hasResume = /\b–†–ï–ó–Æ–ú–ï\b/i.test(t);
    const hasSteps = /\b–ö–†–û–ö–ò\b/i.test(t);
    const hasResults = /\b–†–ï–ó–£–õ–¨–¢–ê–¢–ò\b/i.test(t);
    const hasEvidence = /\b–î–û–ö–ê–ó–ò\b/i.test(t) || /criterion\s*->\s*evidence/i.test(t);
    const hasVerification = /\b–ü–ï–†–ï–í–Ü–†–ö–ê\b/i.test(t);
    const hasStatus = /\b–°–¢–ê–¢–£–°\b/i.test(t);
    const missing = [];
    if (!hasResume) missing.push('–†–ï–ó–Æ–ú–ï');
    if (!hasSteps) missing.push('–ö–†–û–ö–ò');
    if (!hasResults) missing.push('–†–ï–ó–£–õ–¨–¢–ê–¢–ò');
    if (!hasEvidence) missing.push('–î–û–ö–ê–ó–ò');
    if (!hasVerification) missing.push('–ü–ï–†–ï–í–Ü–†–ö–ê');
    if (!hasStatus) missing.push('–°–¢–ê–¢–£–°');
    return { ok: missing.length === 0, missing };
}

function enforceTetianaStructure(text) {
    let out = String(text || '').trim();
    if (!out.startsWith('[–¢–ï–¢–Ø–ù–ê]')) {
        out = `[–¢–ï–¢–Ø–ù–ê] ${out}`;
    }
    const v = validateTetianaReport(out);
    if (v.ok) return out;
    const template = [
        out,
        '',
        '–†–ï–ó–Æ–ú–ï: ‚Äî',
        '–ö–†–û–ö–ò:',
        '1.',
        '2.',
        '–†–ï–ó–£–õ–¨–¢–ê–¢–ò:',
        '‚Ä¢',
        '–î–û–ö–ê–ó–ò (criterion -> evidence):',
        '‚Ä¢ –∫—Ä–∏—Ç–µ—Ä—ñ–π: ‚Ä¶ -> –¥–æ–∫–∞–∑: ‚Ä¶',
        '–ü–ï–†–ï–í–Ü–†–ö–ê: ‚Äî',
        '–°–¢–ê–¢–£–°: Needs Clarification ‚Äî –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏: ' + v.missing.join(', ')
    ];
    return template.join('\n');
}

// Agent dialogue system
class AgentDialogueManager {
    constructor() {
        this.activeDiscussion = null;
        this.participantStances = new Map();
        this.userAuthority = false;
    }

    startDiscussion(topic, participants) {
        this.activeDiscussion = {
            id: generateMessageId(),
            topic,
            participants,
            startTime: Date.now(),
            messages: []
        };
        this.participantStances.clear();
        this.userAuthority = false;
        logMessage('info', `Started discussion: ${topic}`);
    }

    addStance(agent, stance) {
        this.participantStances.set(agent, stance);
        if (this.activeDiscussion) {
            this.activeDiscussion.messages.push({
                agent,
                type: 'stance',
                content: stance,
                timestamp: Date.now()
            });
        }
    }

    checkConsensus() {
        if (this.participantStances.size < 2) return false;
        const stances = Array.from(this.participantStances.values());
        // Simple consensus check - could be enhanced with NLP
        return stances.every(stance => stance.includes('–ø–æ–≥–æ–¥–∂—É—é—Å—è') || stance.includes('–∑–≥–æ–¥–µ–Ω'));
    }

    requiresUserCommand() {
        return this.activeDiscussion && !this.userAuthority && !this.checkConsensus();
    }

    setUserAuthority(hasAuthority) {
        this.userAuthority = hasAuthority;
        logMessage('info', `User authority set to: ${hasAuthority}`);
    }
}

const dialogueManager = new AgentDialogueManager();

// Routes
app.get('/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.get('/agents', (req, res) => {
    res.json(AGENTS);
});

// Providers/admin endpoints
app.get('/providers/state', (req, res) => {
    try {
        return res.json(registry.getState());
    } catch (e) {
        return res.status(500).json({ error: 'failed to get state', details: e.message });
    }
});

app.post('/providers/check', async (req, res) => {
    try {
        await registry.checkAllProviders();
        return res.json(registry.getState());
    } catch (e) {
        return res.status(500).json({ error: 'failed to run health checks', details: e.message });
    }
});

// Main chat processing endpoint
// Direct Tetyana endpoint
app.post('/agent/tetyana', async (req, res) => {
    try {
        const { message, sessionId = 'default' } = req.body;
        if (!message?.trim()) {
            return res.status(400).json({ error: 'Message is required' });
        }

        logMessage('info', `Direct Tetyana request: ${message.substring(0, 100)}...`);

        // 1) –í–∏–∫–æ–Ω–∞–Ω–Ω—è: –¢–µ—Ç—è–Ω–∞ –ø—Ä–∞—Ü—é—î –¢–Ü–õ–¨–ö–ò —á–µ—Ä–µ–∑ Goose (–±–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–Ω–∏—Ö —Ñ–æ–ª–±–µ–∫—ñ–≤)
        const sys = tetianaSystemInstruction({ enableTools: true });
        const gooseExec = await callGooseAgent(message, sessionId, { enableTools: true, systemInstruction: sys });
        if (!gooseExec) {
            return res.status(502).json({ error: 'Goose is unavailable for Tetiana' });
        }

        // 2) –ö–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç: —Ñ–æ—Ä–º—É—î–º–æ —á–µ—Ä–µ–∑ openai-compat –∑ –æ–∫—Ä–µ–º–æ–≥–æ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π (–¥–æ 58)
        let provider = 'goose';
        let model = 'github_copilot';
        let content = null;
        try {
            const reportRoutes = (registry.getRoutes('tetyana', { intentHint: 'short_report' }) || []).filter(r => r.provider === 'openai_compat');
            const reportPrompt = [
                '–°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ó–í–Ü–¢ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∏–∂—á–µ. –§–æ—Ä–º–∞—Ç: –†–ï–ó–Æ–ú–ï; –ö–†–û–ö–ò; –†–ï–ó–£–õ–¨–¢–ê–¢–ò; –î–û–ö–ê–ó–ò; –ü–ï–†–ï–í–Ü–†–ö–ê; –°–¢–ê–¢–£–°.',
                `–í–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–∏—Ä–∏–π –≤–∏–≤—ñ–¥): ${String(gooseExec).slice(0, 6000)}`
            ].join('\n');
            for (const route of reportRoutes) {
                try {
                    const started = Date.now();
                    const txt = await callOpenAICompatChat(route.baseUrl || FALLBACK_API_BASE, route.model, reportPrompt);
                    if (txt) {
                        content = txt;
                        provider = 'openai_compat';
                        model = route.model;
                        registry.reportSuccess(route, Date.now() - started);
                        break;
                    }
                    registry.reportFailure(route);
                } catch (_) {
                    registry.reportFailure(route);
                }
            }
        } catch (_) { /* ignore summarizer errors, fallback to goose text below */ }

        // 3) –Ø–∫—â–æ summarizer –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –≤–∏–≤—ñ–¥ Goose —è–∫ —î
        const finalText = enforceTetianaStructure(content || gooseExec);

        const msg = {
            role: 'assistant',
            content: finalText.startsWith('[–¢–ï–¢–Ø–ù–ê]') ? finalText : `[–¢–ï–¢–Ø–ù–ê] ${finalText}`,
            agent: 'tetyana',
            messageId: generateMessageId(),
            timestamp: Date.now(),
            voice: 'tetiana',
            color: '#00ffff',
            provider,
            model
        };

        return res.json({
            success: true,
            response: [msg],
            session: { id: sessionId, currentAgent: 'tetyana' }
        });
    } catch (error) {
        logMessage('error', `Tetyana endpoint error: ${error.message}`);
        return res.status(500).json({ error: 'Internal server error', details: error.message });
    }
});

app.post('/chat/stream', async (req, res) => {
    const { message, sessionId, userId } = req.body;
    
    if (!message) {
        return res.status(400).json({ error: 'Message is required' });
    }

    logMessage('info', `Incoming /chat/stream message (session=${sessionId || 'n/a'}): ${String(message).slice(0, 200)}`);

    const session = sessions.get(sessionId) || { 
        id: sessionId,
        history: [],
        currentAgent: 'atlas',
        lastInteraction: Date.now()
    };
    sessions.set(sessionId, session);

    // Check for user commands
    const messageText = message.toLowerCase().trim();
    
    // Check for authority command "–Ω–∞–∫–∞–∑—É—é"
    if (messageText.includes('–Ω–∞–∫–∞–∑—É—é') || messageText.includes('command')) {
        dialogueManager.setUserAuthority(true);
        session.history.push({
            role: 'user',
            content: message,
            timestamp: Date.now(),
            type: 'command'
        });
        
        return res.json({
            success: true,
            message: 'User authority established',
            shouldContinue: true,
            nextAgent: 'atlas'
        });
    }

    // Check for interruption commands
    if (messageText.includes('stop') || messageText.includes('—Å—Ç–æ–ø') || 
        messageText.includes('wait') || messageText.includes('—á–µ–∫–∞–π')) {
        
        session.history.push({
            role: 'user', 
            content: message,
            timestamp: Date.now(),
            type: 'interruption'
        });

        return res.json({
            success: true,
            message: 'Processing interrupted by user',
            shouldPause: true,
            awaitingUserInput: true
        });
    }

    // Process regular message through agent system
    try {
        const response = await processAgentCycle(message, session);
        try {
            // Summarize agents and providers for observability
            const meta = (response || []).map(r => `${r.agent}:${r.provider || 'simulation'}${r.model ? '('+r.model+')' : ''}`).join(', ');
            logMessage('info', `Processed message for session=${sessionId || 'n/a'} agents=[${meta}]`);
        } catch {}
        
    // –ê–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –ø–∞–π–ø–ª–∞–π–Ω—É/–Ω–∞—Å—Ç—É–ø–Ω–æ—ó –¥—ñ—ó —ñ —Ü–µ –ù–ï smalltalk
    const ended = !session.pipeline && !session.nextAction && session.intent !== 'smalltalk';

        res.json({
            success: true,
            response: response,
            session: {
                id: sessionId,
                currentAgent: session.currentAgent,
                requiresUserCommand: dialogueManager.requiresUserCommand(),
                nextAction: session.nextAction || null
            },
            endOfConversation: ended === true
        });

    } catch (error) {
        logMessage('error', `Chat processing failed: ${error.message}`);
        res.status(500).json({
            error: 'Processing failed',
            details: error.message
        });
    }
});

// Compatibility endpoint: support legacy POST /chat
// Normalizes payload and forwards to the same processing as /chat/stream
app.post('/chat', async (req, res) => {
    try {
        // Normalize fields from various clients
        const message = req.body?.message;
        const sessionId = req.body?.sessionId || req.body?.session_id || 'default';
        const userId = req.body?.userId || req.body?.user_id || 'legacy-client';

        if (!message) {
            return res.status(400).json({ error: 'Message is required' });
        }

    logMessage('info', `Incoming /chat message (session=${sessionId}): ${String(message).slice(0, 200)}`);

        // Ensure session exists
        const session = sessions.get(sessionId) || {
            id: sessionId,
            history: [],
            currentAgent: 'atlas',
            lastInteraction: Date.now()
        };
        sessions.set(sessionId, session);

        // Reuse processing logic
        const response = await processAgentCycle(message, session);
        try {
            const meta = (response || []).map(r => `${r.agent}:${r.provider || 'simulation'}${r.model ? '('+r.model+')' : ''}`).join(', ');
            logMessage('info', `Processed legacy /chat for session=${sessionId} agents=[${meta}]`);
        } catch {}

        return res.json({
            success: true,
            response: response,
            session: {
                id: sessionId,
                currentAgent: session.currentAgent,
                requiresUserCommand: dialogueManager.requiresUserCommand()
            }
        });
    } catch (error) {
        logMessage('error', `Legacy /chat failed: ${error.message}`);
        return res.status(500).json({
            error: 'Processing failed',
            details: error.message
        });
    }
});

// Agent processing cycle
async function processAgentCycle(userMessage, session) {
    const responses = [];
    
    // Add user message to history
    session.history.push({
        role: 'user',
        content: userMessage,
        timestamp: Date.now()
    });

    // Phase 1: Atlas creates primary reply/plan (use heuristic intent to bias model choice)
    const preIntent = classifyIntentHeuristic(userMessage, '');
    const atlasResponse = await generateAgentResponse('atlas', userMessage, session, { intentHint: preIntent });
    responses.push(atlasResponse);
    session.history.push(atlasResponse);

    // Classify user intent to route the flow efficiently (LLM-first with fallback)
    const intent = await classifyIntentSmart(userMessage, atlasResponse.content || '');
    session.intent = intent;
    logMessage('info', `Intent classified as: ${intent}`);

    // If actionable -> staged pipeline with TTS pacing
    if (intent === 'actionable') {
        // 1) Grisha precheck now; execution deferred until frontend TTS completes
        const precheckPrompt = [
            '–¢–∏ ‚Äî –ì—Ä–∏—à–∞. –ü–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º —Å–∫–ª–∞–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ –≤–∏–∑–Ω–∞—á 1-3 —Ç–æ—á–∫–æ–≤—ñ –¥—ñ—ó –¥–ª—è –¢–µ—Ç—è–Ω–∏, —è–∫—ñ –¥–∞–¥—É—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏.',
            '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ: –°–ü–ò–°–û–ö ¬´–î–õ–Ø –¢–ï–¢–Ø–ù–ò¬ª, –¥–µ –∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º.',
            '',
            `–ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userMessage}`,
            `–ü–ª–∞–Ω Atlas: ${atlasResponse.content}`
        ].join('\n');
        const grishaPre = await generateAgentResponse('grisha', precheckPrompt, session);
        responses.push(grishaPre);
        session.history.push(grishaPre);

        // Save pipeline state and instruct frontend to call /chat/continue after TTS
        session.pipeline = {
            type: 'actionable',
            stage: 'prechecked',
            userMessage,
            atlasPlan: atlasResponse.content,
            grishaPre: grishaPre.content,
            iter: 0
        };
        session.nextAction = 'tetyana_execute';
        return responses;
    }

    // Phase 2: Optional review (planning/complex discussions only)
    if (intent === 'planning' && shouldTriggerDiscussion(atlasResponse.content)) {
        const grishaResponse = await generateAgentResponse('grisha', atlasResponse.content, session);
        responses.push(grishaResponse);
        session.history.push(grishaResponse);

        // Start discussion if there's disagreement
        if (detectDisagreement([atlasResponse, grishaResponse])) {
            dialogueManager.startDiscussion('Task execution approach', ['atlas', 'grisha', 'tetyana']);
        }
    }

    return responses;
}

// Lightweight intent classifier for routing
// Returns: 'actionable' | 'planning' | 'qa' | 'smalltalk'
function classifyIntentHeuristic(userText, atlasText) {
    const t = String(userText || '').toLowerCase();
    const a = String(atlasText || '').toLowerCase();

    // Actionable if explicit commands present
    if (isActionableTask(t)) return 'actionable';

    // Small talk
    const smallTalkRe = /(–ø—Ä–∏–≤—ñ—Ç|–≤—ñ—Ç–∞—é|–¥–æ–±—Ä(–∏–π|–æ–≥–æ)|—Ö–∞–π|—è–∫ —Å–ø—Ä–∞–≤–∏|–¥—è–∫—É—é|–±—É–¥—å –ª–∞—Å–∫–∞|–≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è|–Ω–∞ –¥–æ–±—Ä–∞–Ω—ñ—á|—Å–∞–ª—é—Ç|hello|hi|thanks|thank you)/i;
    if (smallTalkRe.test(t)) return 'smalltalk';

    // Q&A indicators
    const qaRe = /(\?|—â–æ —Ç–∞–∫–µ|—è–∫ –∑—Ä–æ–±–∏—Ç–∏|—è–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏|–ø–æ—è—Å–Ω–∏|explain|how to|why|—â–æ —Ä–æ–±–∏—Ç–∏)/i;
    if (qaRe.test(t)) return 'qa';

    // Planning if plan/strategy is the focus without direct action
    const planningRe = /(–ø–ª–∞–Ω|—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è|–∫—Ä–æ–∫–∏|–µ—Ç–∞–ø–∏|—Ä–∏–∑–∏–∫|–±–µ–∑–ø–µ–∫–∞)/i;
    if (planningRe.test(a) || planningRe.test(t)) return 'planning';

    // Default fallback
    return /(^—â–æ\b|^—è–∫\b|^—á–æ–º—É\b)/i.test(t) ? 'qa' : 'smalltalk';
}

// LLM-based intent classification via openai_compat (3010) with fallback to heuristic
async function classifyIntentSmart(userText, atlasText) {
    try {
        const routes = (registry.getRoutes('atlas') || []).filter(r => r.provider === 'openai_compat');
        const prompt = [
            '–ö–ª–∞—Å–∏—Ñ—ñ–∫—É–π –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: actionable | planning | qa | smalltalk.',
            '–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ —Å–ª–æ–≤–æ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å, –±–µ–∑ –ª–∞–ø–æ–∫.',
            '',
            `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${String(userText || '').slice(0, 2000)}`
        ];
        if (atlasText && String(atlasText).trim()) {
            prompt.push(`–ö–æ–Ω—Ç–µ–∫—Å—Ç Atlas: ${String(atlasText).slice(0, 1000)}`);
        }
        const promptStr = prompt.join('\n');

        for (const route of routes) {
            try {
                const started = Date.now();
                const out = await callOpenAICompatChatWithTimeout(route.baseUrl || FALLBACK_API_BASE, route.model, promptStr, 1500);
                if (out) {
                    registry.reportSuccess(route, Date.now() - started);
                    const norm = out.trim().toLowerCase();
                    if (['actionable','planning','qa','smalltalk'].includes(norm)) return norm;
                    const token = norm.split(/\s|\W/).find(x => ['actionable','planning','qa','smalltalk'].includes(x));
                    if (token) return token;
                } else {
                    registry.reportFailure(route);
                }
            } catch (_) {
                registry.reportFailure(route);
            }
        }
    } catch {}
    return classifyIntentHeuristic(userText, atlasText);
}

// Continue staged pipeline after TTS completes on the frontend
app.post('/chat/continue', async (req, res) => {
    try {
        const { sessionId } = req.body || {};
        if (!sessionId) return res.status(400).json({ error: 'sessionId is required' });
        const session = sessions.get(sessionId);
        if (!session || !session.pipeline) return res.status(400).json({ error: 'No active pipeline for session' });

        const responses = [];
        const pipe = session.pipeline;

        if (pipe.type === 'actionable' && pipe.stage === 'prechecked') {
            // Execute by Tetiana
            const execPrompt = `–ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${pipe.userMessage}\n–ü–ª–∞–Ω Atlas: ${pipe.atlasPlan}\n–í–∏–º–æ–≥–∏ –ì—Ä–∏—à—ñ: ${pipe.grishaPre}\n\n–í–∏–∫–æ–Ω–∞–π –∫—Ä–æ–∫–∏ —Ç–∞ —á—ñ—Ç–∫–æ –∑–≤—ñ—Ç—É–π.`;
            const tetyanaExec = await generateAgentResponse('tetyana', execPrompt, session, { enableTools: true });
            responses.push(tetyanaExec);
            session.history.push(tetyanaExec);

            // Verify by Grisha
            const verify = await grishaVerifyWithGoose(pipe.userMessage, pipe.atlasPlan, tetyanaExec.content, session.id);
            const confirmed = verify.confidence >= GRISHA_CONFIDENCE_THRESHOLD;
            const verdictMsg = confirmed
                ? `–ù–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: CONF=${verify.confidence.toFixed(2)} ‚Äî –ó–∞–≤–¥–∞–Ω–Ω—è –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û –≤–∏–∫–æ–Ω–∞–Ω–∏–º.`
                : `–ù–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: CONF=${verify.confidence.toFixed(2)} ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–∫–∞–∑—ñ–≤. –ü–æ—Å–∏–ª–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.`;
            const grishaVerdict = await generateAgentResponse('grisha', verdictMsg + (verify.result?.summary ? `\n${verify.result.summary}` : ''), session);
            responses.push(grishaVerdict);
            session.history.push(grishaVerdict);

            if (!confirmed) {
                const missing = (verify.result?.criteria || []).filter(c => c && c.result === false).map(c => c.name);
                const ask = `–ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–æ–∫–∞–∑–∏ –ø–æ: ${missing.join(', ') || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}. –ù–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —à–ª—è—Ö–∏/–≤–º—ñ—Å—Ç/–≤–∏—Ö–æ–¥–∏ –∫–æ–º–∞–Ω–¥.`;
                const grishaFollow = await generateAgentResponse('grisha', ask, session);
                responses.push(grishaFollow);
                session.history.push(grishaFollow);
                // update pipeline for next continuation
                pipe.stage = 'needs_more';
                pipe.need = missing;
                pipe.lastReport = tetyanaExec.content;
                session.nextAction = 'tetyana_supplement';
            } else {
                // clear pipeline
                session.pipeline = null;
                session.nextAction = null;
            }
        } else if (pipe.type === 'actionable' && pipe.stage === 'needs_more') {
            pipe.iter = (pipe.iter || 0) + 1;
            const extraPrompt = `–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–æ–∫–∞–∑–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ: ${pipe.need?.join(', ') || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}. –ù–∞–¥–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ñ–∞–π–ª–∏/–≤–º—ñ—Å—Ç/–≤–∏—Ö–æ–¥–∏ –∫–æ–º–∞–Ω–¥. –û–Ω–æ–≤–∏ –∑–≤—ñ—Ç.`;
            const tetyanaMore = await generateAgentResponse('tetyana', extraPrompt, session, { enableTools: true });
            responses.push(tetyanaMore);
            session.history.push(tetyanaMore);

            const verify = await grishaVerifyWithGoose(pipe.userMessage, pipe.atlasPlan, tetyanaMore.content, session.id);
            const confirmed = verify.confidence >= GRISHA_CONFIDENCE_THRESHOLD;
            const verdictMsg = confirmed
                ? `–ù–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: CONF=${verify.confidence.toFixed(2)} ‚Äî –ó–∞–≤–¥–∞–Ω–Ω—è –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û.`
                : `–ù–µ–∑–∞–ª–µ–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: CONF=${verify.confidence.toFixed(2)} ‚Äî –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–∫–∞–∑—ñ–≤.`;
            const grishaVerdict = await generateAgentResponse('grisha', verdictMsg + (verify.result?.summary ? `\n${verify.result.summary}` : ''), session);
            responses.push(grishaVerdict);
            session.history.push(grishaVerdict);

            if (!confirmed && pipe.iter < GRISHA_MAX_VERIFY_ITER) {
                const missing = (verify.result?.criteria || []).filter(c => c && c.result === false).map(c => c.name);
                const ask = `–©–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Å–∏–ª–∏—Ç–∏ –¥–æ–∫–∞–∑–∏ –ø–æ: ${missing.join(', ') || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}.`;
                const grishaFollow = await generateAgentResponse('grisha', ask, session);
                responses.push(grishaFollow);
                session.history.push(grishaFollow);
                pipe.need = missing;
                session.nextAction = 'tetyana_supplement';
            } else {
                session.pipeline = null;
                session.nextAction = null;
            }
        }

    // –î–ª—è –µ—Ç–∞–ø—ñ–≤ –ø–∞–π–ø–ª–∞–π–Ω—É (actionable) –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, smalltalk —Ç—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
    const ended = !session.pipeline && !session.nextAction;

        res.json({
            success: true,
            response: responses,
            session: {
                id: session.id,
                currentAgent: session.currentAgent,
                requiresUserCommand: dialogueManager.requiresUserCommand(),
                nextAction: session.nextAction || null
            },
            endOfConversation: ended === true
        });
    } catch (error) {
        logMessage('error', `/chat/continue failed: ${error.message}`);
        res.status(500).json({ error: 'continue failed', details: error.message });
    }
});

// Heuristics: detect actionable tasks that require an executor (Tetyana)
function isActionableTask(text) {
    const t = (text || '').toLowerCase();
    const verbs = [
        '–≤—ñ–¥–∫—Ä–∏–π', '–∑–∞–ø—É—Å—Ç–∏', '–≤–∏–∫–æ–Ω–∞–π', '–≤–∏–∫–æ–Ω–∞—Ç–∏', '–æ–±—á–∏—Å–ª–∏', '–ø–æ—Ä–∞—Ö—É–π', '–∫–æ—Ä—ñ–Ω—å', 'sqrt',
        '–∑–±–µ—Ä–µ–∂–∏', '–∑–±–µ—Ä–µ–≥—Ç–∏', '—Å—Ç–≤–æ—Ä–∏', '—Å—Ç–≤–æ—Ä–∏—Ç–∏', '–Ω–∞ –ø–∫', '–Ω–∞ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–æ–ª—ñ', '–Ω–∞ —Ä–æ–±–æ—á–∏–π —Å—Ç—ñ–ª',
    '–≤—ñ–¥–∫—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', '—Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª', 'txt',
    // —Ö–µ–Ω–¥-–æ—Ñ/–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    '–ø–µ—Ä–µ–¥–∞–π —Ç–µ—Ç—è–Ω—ñ', '–ø–µ—Ä–µ–¥–∞—Ç–∏ —Ç–µ—Ç—è–Ω—ñ', '–¥–ª—è —Ç–µ—Ç—è–Ω–∏', '—Ç–µ—Ç—è–Ω–∞',
    '–ø–µ—Ä–µ–¥–∞–π –≥—Ä—ñ—à—ñ', '–ø–µ—Ä–µ–¥–∞—Ç–∏ –≥—Ä—ñ—à—ñ', '–¥–ª—è –≥—Ä–∏—à—ñ', '–≥—Ä–∏—à–∞', '–ø–µ—Ä–µ–≤—ñ—Ä–∫—É', '–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏'
    ];
    return verbs.some(v => t.includes(v));
}

// Legacy static plan removed: dynamic routing handled by ModelRegistry

// Real agent integration
async function generateAgentResponse(agentName, inputMessage, session, options = {}) {
    const agent = AGENTS[agentName];
    const messageId = generateMessageId();
    
    // Create role-based prompt
    let prompt = createAgentPrompt(agentName, inputMessage, session);
    
    let content;
    let provider = undefined;
    let model = undefined;
    
    if (agentName === 'tetyana') {
        // Execution via Goose only (no provider fallbacks for execution)
        const execNotes = await callGooseAgent(prompt, session.id, {
            enableTools: options.enableTools === true,
            systemInstruction: tetianaSystemInstruction({ enableTools: options.enableTools === true })
        });

        if (!execNotes) {
            // Execution failed -> return blocked status without switching providers
            const blocked = '–†–ï–ó–Æ–ú–ï: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ (Goose –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π).\n–°–¢–ê–¢–£–°: Blocked ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.';
            content = enforceTetianaStructure(blocked);
            provider = 'goose';
            model = 'github_copilot';
        } else {
            // Short structured report via openai-compat using configured 58-model list
            const reportRoutes = (registry.getRoutes('tetyana', { intentHint: 'short_report' }) || []).filter(r => r.provider === 'openai_compat');
            const reportPrompt = [
                '–°—Ñ–æ—Ä–º—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ó–í–Ü–¢ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∏–∂—á–µ. –§–æ—Ä–º–∞—Ç: –†–ï–ó–Æ–ú–ï; –ö–†–û–ö–ò; –†–ï–ó–£–õ–¨–¢–ê–¢–ò; –î–û–ö–ê–ó–ò; –ü–ï–†–ï–í–Ü–†–ö–ê; –°–¢–ê–¢–£–°.',
                `–í–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–∏—Ä–∏–π –≤–∏–≤—ñ–¥): ${String(execNotes).slice(0, 6000)}`
            ].join('\n');
            let reportText = null;
            for (const route of reportRoutes) {
                try {
                    const started = Date.now();
                    const txt = await callOpenAICompatChat(route.baseUrl || FALLBACK_API_BASE, route.model, reportPrompt);
                    if (txt) {
                        reportText = txt;
                        registry.reportSuccess(route, Date.now() - started);
                        provider = 'openai_compat';
                        model = route.model;
                        break;
                    }
                    registry.reportFailure(route);
                } catch (_) {
                    registry.reportFailure(route);
                }
            }
            const base = reportText || execNotes;
            content = enforceTetianaStructure(base);
            if (!provider) { provider = 'goose'; model = 'github_copilot'; }
        }
    } else {
        // Dynamic provider/model routing via registry for Atlas/Grisha
        const sysInstr = (agentName === 'atlas')
            ? '–¢–∏ ‚Äî ATLAS (—Å—Ç—Ä–∞—Ç–µ–≥). –°—Ç–∏—Å–ª–æ —Å—Ñ–æ—Ä–º—É–π –ø–ª–∞–Ω –¥—ñ–π –∑ —á—ñ—Ç–∫–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏ —Ç–∞ —Ç–æ—á–∫–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é. –£–Ω–∏–∫–∞–π –≤–æ–¥–∏.'
            : '–¢–∏ ‚Äî –ì–†–ò–®–ê (–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä). –ü–µ—Ä–µ–≤—ñ—Ä –ø–ª–∞–Ω –Ω–∞ –±–µ–∑–ø–µ–∫—É —Ç–∞ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—ñ—Å—Ç—å, –¥–∞–π —Å—Ç–∏—Å–ª–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–¥–±–µ–∫.';

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–∞–º—ñ—Ä—É (intent-aware –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É ModelRegistry)
    const routes = registry.getRoutes(agentName, { intentHint: (options?.intentHint) || session.intent });
        for (const route of routes) {
            const started = Date.now();
            try {
                if (route.provider === 'goose') {
                    const gooseText = await callGooseAgent(prompt, session.id, { enableTools: false, systemInstruction: sysInstr });
                    if (gooseText) {
                        content = gooseText;
                        provider = 'goose';
                        model = route.model || 'github_copilot';
                        registry.reportSuccess(route, Date.now() - started);
                        break;
                    }
                    registry.reportFailure(route);
                } else if (route.provider === 'openai_compat') {
                    const text = await callOpenAICompatChat(route.baseUrl || FALLBACK_API_BASE, route.model, prompt);
                    if (text) {
                        content = text;
                        provider = 'openai_compat';
                        model = route.model;
                        registry.reportSuccess(route, Date.now() - started);
                        break;
                    }
                    registry.reportFailure(route);
                }
            } catch (err) {
                registry.reportFailure(route);
                // keep trying next route
            }
        }

        if (!content) {
            // Final minimal fallback
            content = await simulateAgentThinking(agentName, prompt);
        }
    }
    
    return {
        role: 'assistant',
    content: `${agent.signature} ${content.replace(/^\[–¢–ï–¢–Ø–ù–ê\]\s*/i, '')}`,
        agent: agentName,
        messageId: messageId,
        timestamp: Date.now(),
        voice: agent.voice,
        color: agent.color,
        provider,
        model
    };
}

// Call Goose agent (Tetyana) via WebSocket
async function callGooseAgent(message, sessionId, opts = {}) {
    const gooseBaseUrl = process.env.GOOSE_BASE_URL || 'http://localhost:3000';
    const secretKey = process.env.GOOSE_SECRET_KEY || 'test';
    
    try {
        // If tools are explicitly enabled, prefer SSE (it supports tool_choice)
        if (opts?.enableTools) {
            const sseToolsResult = await callGooseSSE(gooseBaseUrl, message, sessionId, secretKey, { enableTools: true, systemInstruction: opts.systemInstruction });
            if (sseToolsResult) return sseToolsResult;
        }

        // Otherwise try WebSocket first (preferred for regular chat)
        const result = await callGooseWebSocket(gooseBaseUrl, message, sessionId, secretKey);
        if (result) return result;
        
        // Fallback to SSE /reply endpoint (tools disabled)
    const sseResult = await callGooseSSE(gooseBaseUrl, message, sessionId, secretKey, { enableTools: false, systemInstruction: opts.systemInstruction });
        if (sseResult) return sseResult;
        
    // Final fallback -> signal failure so that upper layer can switch provider
    return null;
        
    } catch (error) {
    console.error('Goose integration error:', error);
    // Signal failure
    return null;
    }
}

// WebSocket integration with Goose
async function callGooseWebSocket(baseUrl, message, sessionId, secretKey) {
    return new Promise((resolve) => {
        const wsUrl = baseUrl.replace(/^http/, 'ws') + '/ws';
        
        let collected = '';
        let timeout;
        
        try {
            const ws = new WebSocket(wsUrl);
            
            timeout = setTimeout(() => {
                ws.close();
                resolve(null); // Will try SSE fallback
            }, 15000);
            
            ws.on('open', () => {
                const payload = {
                    type: 'message',
                    content: message,
                    session_id: sessionId,
                    timestamp: Date.now()
                };
                ws.send(JSON.stringify(payload));
            });
            
            ws.on('message', (data) => {
                try {
                    const obj = JSON.parse(data.toString());
                    const type = obj.type;
                    
                    if (type === 'response') {
                        const content = obj.content;
                        if (content) {
                            collected += String(content);
                        }
                    } else if (type === 'complete' || type === 'cancelled') {
                        clearTimeout(timeout);
                        ws.close();
                        resolve(collected.trim() || "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ.");
                    } else if (type === 'error') {
                        clearTimeout(timeout);
                        ws.close();
                        resolve(null); // Will try SSE fallback
                    }
                } catch (e) {
                    // Ignore non-JSON frames
                }
            });
            
            ws.on('error', () => {
                clearTimeout(timeout);
                resolve(null); // Will try SSE fallback
            });
            
            ws.on('close', () => {
                clearTimeout(timeout);
                if (collected.trim()) {
                    resolve(collected.trim());
                } else {
                    resolve(null); // Will try SSE fallback
                }
            });
            
        } catch (error) {
            if (timeout) clearTimeout(timeout);
            resolve(null); // Will try SSE fallback
        }
    });
}

// SSE integration with Goose (fallback)
async function callGooseSSE(baseUrl, message, sessionId, secretKey, options = { enableTools: false, systemInstruction: undefined }) {
    try {
        const url = `${baseUrl}/reply`;
        const headers = {
            'Accept': 'text/event-stream',
            'Content-Type': 'application/json',
            'X-Secret-Key': secretKey
        };
        
        // Build OpenAI-compatible messages; include a system instruction to allow tool usage when enabled
        const messages = [];
        if (options?.systemInstruction) {
            messages.push({
                role: 'system',
                created: Math.floor(Date.now() / 1000),
                content: [{ type: 'text', text: options.systemInstruction }]
            });
        }
        messages.push({
            role: 'user',
            created: Math.floor(Date.now() / 1000),
            content: [{ type: 'text', text: message }]
        });

        // Heuristic: use Desktop as working dir if user explicitly asked to save on Desktop
        const onDesktop = /—Ä–æ–±–æ—á(–æ–º—É|–∏–π) —Å—Ç–æ–ª|desktop/i.test(message || '');
        const workingDir = onDesktop ? path.join(os.homedir(), 'Desktop') : process.cwd();

        const payload = {
            messages,
            session_id: sessionId,
            session_working_dir: workingDir,
            ...(options?.enableTools ? { tool_choice: 'auto' } : {})
        };
        
    const response = await axios.post(url, payload, {
            headers,
            timeout: 20000,
            responseType: 'stream'
        });
        
        if (response.status !== 200) {
            return null;
        }
        
        return new Promise((resolve) => {
            let collected = '';
            
            response.data.on('data', (chunk) => {
                const lines = chunk.toString().split('\n');
                for (const line of lines) {
                    if (line.startsWith('data:')) {
                        const dataStr = line.slice(5).trim();
                        try {
                            const obj = JSON.parse(dataStr);
                            if (obj.type === 'Message' && obj.message?.content) {
                                for (const content of obj.message.content) {
                                    if (content.type === 'text' && content.text) {
                                        collected += content.text;
                                    }
                                }
                                // Detect tool call hints in message payloads (diagnostic only)
                                if (obj.message?.tool_calls || obj.tool_calls) {
                                    console.warn('Goose indicated tool_calls in stream; current orchestrator does not execute tools inline yet.');
                                }
                            } else if (obj.type === 'Error' && obj.error) {
                                // Bubble error into logs for diagnostics
                                console.error('Goose SSE error frame:', obj.error);
                            } else if (obj.text || obj.content) {
                                collected += (obj.text || obj.content);
                            }
                        } catch (e) {
                            // Not JSON, might be plain text
                            if (dataStr && !dataStr.startsWith('[')) {
                                collected += dataStr;
                            }
                        }
                    }
                }
            });
            
            response.data.on('end', () => {
                resolve(collected.trim() || "–ó–∞–≤–¥–∞–Ω–Ω—è –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.");
            });
            
            response.data.on('error', () => {
                console.error('Goose SSE stream error:', err?.message || err);
                resolve(collected.trim() || null);
            });
        });
        
    } catch (error) {
        try {
            if (axios.isAxiosError?.(error)) {
                const status = error.response?.status;
                const body = error.response?.data;
                let bodyStr = '';
                if (typeof body === 'string') bodyStr = body;
                else if (body && typeof body === 'object') {
                    try { bodyStr = JSON.stringify(body); } catch { bodyStr = '[non-serializable body]'; }
                } else bodyStr = String(body || '');
                console.error('Goose SSE request failed', status, bodyStr.slice(0, 2000));
            } else {
                console.error('Goose SSE request error', error?.message || String(error));
            }
        } catch {}
        return null;
    }
}

// Simulate agent thinking (for Atlas and Grisha)

// Create prompts based on agent roles
function createAgentPrompt(agentName, message, session) {
    const baseContext = `You are ${agentName.toUpperCase()}, a specialized AI agent in the ATLAS system.`;
    
    switch (agentName) {
        case 'atlas':
            return `${baseContext} –¢–∏ ‚Äî ATLAS, —Å—Ç—Ä–∞—Ç–µ–≥. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è: —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑—Ä–æ–∑—É–º—ñ–ª–æ—é –º–æ–≤–æ—é, –æ–∫—Ä–µ—Å–ª–∏—Ç–∏ —Å—É—Ç—å —ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–∏–¥—ñ–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ –≤–∏–º–æ–≥–∏ —ñ —Ä–∏–∑–∏–∫–∏. –ë–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó –Ω—É–º–µ—Ä–∞—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤ ‚Äî —Ü–µ —Ä–æ–±–æ—Ç–∞ –¢–µ—Ç—è–Ω–∏. –Ø–∫—â–æ –±—Ä–∞–∫—É—î –¥–∞–Ω–∏—Ö, —Å—Ñ–æ—Ä–º—É–ª—é–π 1‚Äì2 —Ç–æ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –¥–æ –¢–µ—Ç—è–Ω–∏.

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${message}
–ù–µ—â–æ–¥–∞–≤–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${getRecentHistory(session, 3)}

–°—Ç–∏–ª—å: —Å—Ç–∏—Å–ª–æ, –ø–æ —Å—É—Ç—ñ, –¥—Ä—É–∂–Ω—å–æ, –∑ –ª–µ–≥–∫–∏–º–∏ –∂–∏–≤–∏–º–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è–º–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ (–±–µ–∑ –∑–∞—É—á–µ–Ω–∏—Ö —Ñ—Ä–∞–∑).`;

        case 'grisha':
            return `${baseContext} –¢–∏ ‚Äî –ì—Ä–∏—à–∞, –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –∞–≥–µ–Ω—Ç. –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥ ATLAS: –æ—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤ —ñ –±–µ–∑–ø–µ–∫–∏, –≤–∫–∞–∂–∏ –Ω–∞ —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è. –î—Ä—É–≥–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Äî –ø—ñ—Å–ª—è –∑–≤—ñ—Ç—É –¢–µ—Ç—è–Ω–∏: –≤–∞–ª—ñ–¥—É–π, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–¥—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏. –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ ‚Äî —á—ñ—Ç–∫–æ –≤–∫–∞–∂–∏, —â–æ —Å–∞–º–µ –Ω–µ —Ç–∞–∫, —ñ —è–∫—ñ –¥–æ–∫–∞–∑–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ.

–ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${message}
–°–µ—Å—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${getRecentHistory(session, 3)}

–°—Ç–∏–ª—å: –æ–±–µ—Ä–µ–∂–Ω–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π, –±–µ–∑ –≤–æ–¥–∏, –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –¥–æ–∫–∞–∑–∞—Ö —ñ –±–µ–∑–ø–µ—Ü—ñ.`;

        case 'tetyana':
            return `${baseContext} –¢–∏ ‚Äî –¢–µ—Ç—è–Ω–∞, –≤–∏–∫–æ–Ω–∞–≤–∏—Ü—è. –û—Ç—Ä–∏–º—É—î—à –≤—ñ–¥ ATLAS –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç —ñ –≤–∏–º–æ–≥–∏ –≤—ñ–¥ –ì—Ä–∏—à—ñ. –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∑–≤—ñ—Ç (–†–ï–ó–Æ–ú–ï, –ö–†–û–ö–ò, –†–ï–ó–£–õ–¨–¢–ê–¢–ò –∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ—é, –î–û–ö–ê–ó–ò, –ü–ï–†–ï–í–Ü–†–ö–ê, –°–¢–ê–¢–£–°). –Ø–∫—â–æ —â–æ—Å—å –±–ª–æ–∫—É—î ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∑–∞–∑–Ω–∞—á –ø—Ä–∏—á–∏–Ω—É —ñ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è: ${message}
–°–µ—Å—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${getRecentHistory(session, 3)}

–°—Ç–∏–ª—å: —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, –±–µ–∑ –∑–∞–π–≤–æ–≥–æ, –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–æ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.`;

        default:
            return `${baseContext} Respond appropriately to: ${message}`;
    }
}

// Simulate agent thinking (for Atlas and Grisha)
async function simulateAgentThinking(agentName, prompt) {
    // This is a placeholder for Atlas and Grisha - Tetyana uses real Goose integration
    const responses = {
        atlas: [
            "–ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–≤–¥–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—é—é –ø–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø–ª–∞–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–∂–ª–∏–≤–∏—Ö —Ä–∏–∑–∏–∫—ñ–≤.",
            "–†–æ–∑—Ä–æ–±–ª—è—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥. –í–∏–∑–Ω–∞—á–∞—é –∫–ª—é—á–æ–≤—ñ –µ—Ç–∞–ø–∏ —Ç–∞ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é.",
            "–ü–ª–∞–Ω—É—é —Ä–µ—Å—É—Ä—Å–∏ —Ç–∞ —á–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏. –ì–æ—Ç—É—é –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."
        ],
        grisha: [
            "–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–ª–∞–Ω –Ω–∞ –±–µ–∑–ø–µ–∫—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. –ê–Ω–∞–ª—ñ–∑—É—é –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ —Ä–∏–∑–∏–∫–∏.",
            "–û—Ü—ñ–Ω—é—é —è–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è. –®—É–∫–∞—é —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è —Ç–∞ –Ω–µ–¥–æ–ª—ñ–∫–∏.",
            "–ö–æ–Ω—Ç—Ä–æ–ª—é—é –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä. –í–∏–º–∞–≥–∞—é –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π –±–µ–∑–ø–µ–∫–∏."
        ]
    };

    const agentResponses = responses[agentName] || responses.atlas;
    const randomResponse = agentResponses[Math.floor(Math.random() * agentResponses.length)];
    
    // Add slight delay to simulate thinking
    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));
    
    return randomResponse;
}

// Helper functions
function shouldTriggerDiscussion(message) {
    const discussionTriggers = ['–ø–ª–∞–Ω', '—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è', '–±–µ–∑–ø–µ–∫–∞', '—Ä–∏–∑–∏–∫', '–ø—Ä–æ–±–ª–µ–º–∞'];
    return discussionTriggers.some(trigger => message.toLowerCase().includes(trigger));
}

function detectDisagreement(responses) {
    const disagreementWords = ['–Ω–µ –∑–≥–æ–¥–µ–Ω', '–ø—Ä–æ—Ç–∏', '—Ä–∏–∑–∏–∫o', '–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'];
    return responses.some(response => 
        disagreementWords.some(word => response.content.toLowerCase().includes(word))
    );
}

function getRecentHistory(session, count = 3) {
    return session.history
        .slice(-count)
        .map(msg => `${msg.role}: ${msg.content.substring(0, 200)}`)
        .join('\n');
}

// ----------------------------
// Grisha independent verification via Goose
// ----------------------------

function grishaVerificationSessionId(baseSessionId) {
    const ts = Date.now();
    return `${baseSessionId || 'default'}-grisha-verify-${ts}`;
}

function extractJson(text) {
    // Try to extract the last JSON object from text
    const s = String(text || '');
    const start = s.lastIndexOf('{');
    const end = s.lastIndexOf('}');
    if (start !== -1 && end !== -1 && end > start) {
        try { return JSON.parse(s.slice(start, end + 1)); } catch (_) {}
    }
    return null;
}

async function grishaVerifyWithGoose(userMessage, atlasPlan, tetyanaReport, baseSessionId) {
    const verifySession = grishaVerificationSessionId(baseSessionId);
    let iteration = 0;
    let confidence = 0;
    let lastResult = null;
    let notes = [];

    while (iteration < GRISHA_MAX_VERIFY_ITER) {
        iteration++;
        const verifyPrompt = [
            '–¢–∏ ‚Äî –ì—Ä–∏—à–∞, –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–π –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –∞–≥–µ–Ω—Ç. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ü–ï–†–ï–í–Ü–†–ò–¢–ò —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¢–µ—Ç—è–Ω–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏ (—Ñ–∞–π–ª–∏/OS/–¥–æ–¥–∞—Ç–∫–∏).',
            '–ü—Ä–∞—Ü—é–π –∞–∫—É—Ä–∞—Ç–Ω–æ, –≤–∏–∫–æ–Ω—É–π –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.',
            '–ü–æ–≤–µ—Ä–Ω–∏ –†–Ü–í–ù–û JSON –∑ –ø–æ–ª—è–º–∏:',
            '{ "criteria": [ { "name": string, "result": true|false, "evidence": string }... ], "confidence": number (0..1), "summary": string }',
            '',
            `–ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userMessage}`,
            `–ü–ª–∞–Ω Atlas: ${atlasPlan}`,
            `–ó–≤—ñ—Ç –¢–µ—Ç—è–Ω–∏: ${tetyanaReport}`,
            '',
            '–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:',
            '- –ü–µ—Ä–µ–≤—ñ—Ä—è–π –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤, –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—ñ–≤, –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —à–ª—è—Ö—ñ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥.',
            '- –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é –Ω–∞–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–æ–∫–∞–∑ (evidence), –Ω–∞–ø—Ä. –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö, —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–º—ñ—Å—Ç—É, –≤–∏—Ö—ñ–¥ –∫–æ–º–∞–Ω–¥–∏).',
            '- –û—Ü—ñ–Ω–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 0..1.'
        ].join('\n');

    const grishaSys = '–¢–∏ ‚Äî –ì—Ä–∏—à–∞, –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –∞–≥–µ–Ω—Ç. –í–∏–∫–æ–Ω—É–π –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ. –ü–û–í–ï–†–¢–ê–ô –°–¢–†–û–ì–û JSON: { "criteria": [ { "name": string, "result": true|false, "evidence": string } ], "confidence": number, "summary": string }';
    const gooseOut = await callGooseAgent(verifyPrompt, verifySession, { enableTools: true, systemInstruction: grishaSys });
        const parsed = extractJson(gooseOut);
        if (parsed && typeof parsed === 'object') {
            lastResult = parsed;
            confidence = typeof parsed.confidence === 'number' ? parsed.confidence : 0;
            notes.push(`iter${iteration}: conf=${confidence}`);
            if (confidence >= GRISHA_CONFIDENCE_THRESHOLD) break;
            // Refine: ask to focus on failed criteria only
            const failed = (parsed.criteria || []).filter(c => c && c.result === false).map(c => c.name).join(', ');
            if (failed) {
                const refinePrompt = [
                    '–ü–æ–ø–µ—Ä–µ–¥–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—è. –ü–æ—Å–∏–ª–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—è—Ö:',
                    failed,
                    '–ü–û–í–ï–†–ù–ò –õ–ò–®–ï JSON —É —Ç–æ–º—É –∂ —Ñ–æ—Ä–º–∞—Ç—ñ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–∏ –∞–±–æ —Å–ø—Ä–æ—Å—Ç–æ–≤—É—é—á–∏.'
                ].join('\n');
                const refine = await callGooseAgent(refinePrompt, verifySession, { enableTools: true, systemInstruction: grishaSys });
                const refParsed = extractJson(refine);
                if (refParsed && typeof refParsed === 'object' && typeof refParsed.confidence === 'number') {
                    lastResult = refParsed;
                    confidence = refParsed.confidence;
                }
            }
        } else {
            // Could not parse JSON; treat as low confidence and break to avoid loop
            lastResult = { criteria: [], confidence: 0, summary: '–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Goose.' };
            confidence = 0;
            break;
        }
    }

    return { result: lastResult, confidence, iterations: iteration, notes };
}

// SSE endpoint for real-time streaming
app.get('/chat/stream/:sessionId', (req, res) => {
    const sessionId = req.params.sessionId;
    
    res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Cache-Control'
    });

    const keepAlive = setInterval(() => {
        res.write('data: {"type":"keepalive"}\n\n');
    }, 30000);

    req.on('close', () => {
        clearInterval(keepAlive);
        logMessage('info', `SSE connection closed for session ${sessionId}`);
    });

    res.write('data: {"type":"connected","sessionId":"' + sessionId + '"}\n\n');
});

// Start server
if (process.env.NODE_ENV !== 'test') {
    let retryCount = 0;
    const maxRetries = 3;
    
    function startServer() {
        const server = app.listen(PORT, '0.0.0.0', () => {
            logMessage('info', `ATLAS Orchestrator running on port ${PORT}`);
            logMessage('info', 'Agent system initialized with TTS integration');
        });
        
        server.on('error', (err) => {
            if (err.code === 'EADDRINUSE') {
                retryCount++;
                if (retryCount <= maxRetries) {
                    logMessage('error', `Port ${PORT} is busy. Retry ${retryCount}/${maxRetries} in 2 seconds...`);
                    setTimeout(() => {
                        startServer();
                    }, 2000);
                } else {
                    logMessage('error', `Failed to start server after ${maxRetries} retries. Port ${PORT} is permanently busy.`);
                    process.exit(1);
                }
            } else {
                logMessage('error', `Server error: ${err.message}`);
                process.exit(1);
            }
        });
    }
    
    startServer();
}

export default app;