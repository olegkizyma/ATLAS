#!/usr/bin/env python3
"""
ATLAS Dynamic Configuration Manager
–ü–æ–≤–Ω—ñ—Å—Ç—é –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –±–µ–∑ —Ö–∞—Ä–¥–∫–æ—Ä—ñ–≤
"""

import json
import logging
import time
import os
from typing import Dict, Any, Optional
from pathlib import Path
import aiohttp

logger = logging.getLogger('atlas.dynamic_config')

class DynamicConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –∑ AI-–≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é"""
    
    def __init__(self):
        self.ai_api_base = "http://127.0.0.1:3010/v1"
        self.config_cache = {}
        self.last_generated = 0
        self.cache_ttl = 3600  # 1 –≥–æ–¥–∏–Ω–∞
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
        self.system_context = self._gather_system_context()
    
    def _gather_system_context(self) -> Dict[str, Any]:
        """–ó–±–∏—Ä–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
        
        context = {
            'timestamp': time.time(),
            'python_version': f"{os.sys.version_info.major}.{os.sys.version_info.minor}",
            'platform': os.name,
            'working_directory': str(Path.cwd()),
            'environment_variables': {
                key: value for key, value in os.environ.items() 
                if any(keyword in key.lower() for keyword in ['atlas', 'goose', 'tts', 'whisper', 'ai', 'api'])
            }
        }
        
        # –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        try:
            import psutil
            context['system_resources'] = {
                'cpu_count': psutil.cpu_count(),
                'memory_total_gb': round(psutil.virtual_memory().total / (1024**3), 2),
                'memory_available_gb': round(psutil.virtual_memory().available / (1024**3), 2),
                'disk_free_gb': round(psutil.disk_usage('/').free / (1024**3), 2)
            }
        except ImportError:
            context['system_resources'] = {
                'cpu_count': os.cpu_count() or 2,
                'memory_total_gb': 4.0,  # –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è
                'memory_available_gb': 2.0,
                'disk_free_gb': 10.0
            }
        
        return context
    
    async def generate_intelligent_config(self, config_type: str = "complete") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI"""
        
        current_time = time.time()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        cache_key = f"{config_type}_{current_time // self.cache_ttl}"
        if cache_key in self.config_cache:
            logger.info(f"Using cached config for {config_type}")
            return self.config_cache[cache_key]
        
        logger.info(f"üîß Generating dynamic config: {config_type}")
        
        try:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI
            config = await self._generate_config_via_ai(config_type)
            
            # –í–∞–ª—ñ–¥—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            validated_config = self._validate_and_enhance_config(config, config_type)
            
            # –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.config_cache[cache_key] = validated_config
            self.last_generated = current_time
            
            logger.info(f"‚úÖ Dynamic config generated: {len(validated_config)} sections")
            return validated_config
            
        except Exception as e:
            logger.error(f"‚ùå Failed to generate config via AI: {e}")
            
            # Fallback –¥–æ –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            fallback_config = self._generate_fallback_config(config_type)
            self.config_cache[cache_key] = fallback_config
            return fallback_config
    
    async def _generate_config_via_ai(self, config_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI API"""
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        system_prompt = """
–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó AI —Å–∏—Å—Ç–µ–º. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ ATLAS.

ATLAS - —Ü–µ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ 3 –∞–≥–µ–Ω—Ç–∞–º–∏:
- Atlas: –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI API)
- Tetyana: –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Goose + AI API)  
- Grisha: –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î AI API + Goose –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)

–°–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î:
- –õ–æ–∫–∞–ª—å–Ω–µ AI API –Ω–∞ –ø–æ—Ä—Ç—ñ 3010 (OpenAI-compatible)
- Goose –Ω–∞ –ø–æ—Ä—Ç—ñ 3000 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
- TTS —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—ñ 3001 –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å–∏–Ω—Ç–µ–∑–∞—Ü—ñ—ó –º–æ–≤–∏
- Whisper –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–Ω—è –º–æ–≤–∏
- –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –ø–æ—Ä—Ç—ñ 5001

–ü—Ä–∏–Ω—Ü–∏–ø–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:
1. ZERO HARDCODE - –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏
2. SUPER RELIABILITY - –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —à–∞–Ω—Å–∏ –Ω–∞ –≤—ñ–¥–º–æ–≤—É
3. INTELLIGENT ADAPTATION - –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
4. PERFORMANCE OPTIMIZATION - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å

–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
"""
        
        user_prompt = f"""
–ó–≥–µ–Ω–µ—Ä—É–π {config_type} –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è ATLAS —Å–∏—Å—Ç–µ–º–∏.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–∏:
{json.dumps(self.system_context, indent=2, ensure_ascii=False)}

–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–∞—î –≤–∫–ª—é—á–∞—Ç–∏:

1. SYSTEM - –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
2. AGENTS - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (Atlas, Tetyana, Grisha)
3. AI_API - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI API
4. GOOSE - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Goose executor
5. VOICE - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TTS/STT —Å–∏—Å—Ç–µ–º–∏
6. WEB - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
7. PERFORMANCE - –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
8. RELIABILITY - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ

–ö–æ–∂–Ω–∞ —Å–µ–∫—Ü—ñ—è –º–∞—î –≤–∫–ª—é—á–∞—Ç–∏:
- timeout –∑–Ω–∞—á–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –¥–æ —Ä–µ—Å—É—Ä—Å—ñ–≤
- retry policies –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
- adaptive parameters —â–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
- resource limits –±–∞–∑–æ–≤–∞–Ω—ñ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö
- intelligent fallback strategies

–í—Ä–∞—Ö–æ–≤—É–π –Ω–∞—è–≤–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    "stream": False,
                    "temperature": 0.3  # –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
                }
                
                async with session.post(
                    f"{self.ai_api_base}/chat/completions",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status == 200:
                        ai_response = await response.json()
                        content = ai_response['choices'][0]['message']['content']
                        
                        # –í–∏—Ç—è–≥—É—î–º–æ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                        import re
                        json_match = re.search(r'\{.*\}', content, re.DOTALL)
                        if json_match:
                            return json.loads(json_match.group(0))
                        else:
                            raise Exception("No JSON found in AI response")
                    else:
                        raise Exception(f"AI API returned status {response.status}")
                        
        except Exception as e:
            logger.error(f"AI config generation failed: {e}")
            raise
    
    def _validate_and_enhance_config(self, config: Dict[str, Any], config_type: str) -> Dict[str, Any]:
        """–í–∞–ª—ñ–¥—É—î —Ç–∞ –ø–æ–∫—Ä–∞—â—É—î –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        
        # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–∞–∑–æ–≤–∏—Ö —Å–µ–∫—Ü—ñ–π
        required_sections = ['SYSTEM', 'AGENTS', 'AI_API', 'GOOSE', 'VOICE', 'WEB', 'PERFORMANCE', 'RELIABILITY']
        
        for section in required_sections:
            if section not in config:
                config[section] = {}
        
        # –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –∫–æ—Ä–µ–≥—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self._validate_system_section(config['SYSTEM'])
        self._validate_agents_section(config['AGENTS'])
        self._validate_ai_api_section(config['AI_API'])
        self._validate_goose_section(config['GOOSE'])
        self._validate_voice_section(config['VOICE'])
        self._validate_web_section(config['WEB'])
        self._validate_performance_section(config['PERFORMANCE'])
        self._validate_reliability_section(config['RELIABILITY'])
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        config['META'] = {
            'generated_at': time.time(),
            'generated_by': 'AI',
            'config_type': config_type,
            'system_context_hash': hash(str(self.system_context)),
            'version': '1.0'
        }
        
        return config
    
    def _validate_system_section(self, system_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–∏—Å—Ç–µ–º–Ω—É —Å–µ–∫—Ü—ñ—é"""
        defaults = {
            'max_concurrent_requests': min(10, max(2, self.system_context['system_resources']['cpu_count'])),
            'request_timeout_seconds': 30,
            'health_check_interval_seconds': 60,
            'log_level': 'INFO',
            'debug_mode': False
        }
        
        for key, default_value in defaults.items():
            if key not in system_config:
                system_config[key] = default_value
    
    def _validate_agents_section(self, agents_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é –∞–≥–µ–Ω—Ç—ñ–≤"""
        required_agents = ['atlas', 'tetyana', 'grisha']
        
        for agent in required_agents:
            if agent not in agents_config:
                agents_config[agent] = {}
            
            agent_config = agents_config[agent]
            
            # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            defaults = {
                'timeout_seconds': 30 if agent == 'atlas' else (60 if agent == 'tetyana' else 20),
                'max_retries': 3,
                'retry_delay_seconds': 1,
                'max_context_tokens': 8000 if agent == 'atlas' else (12000 if agent == 'tetyana' else 10000),
                'enabled': True
            }
            
            for key, default_value in defaults.items():
                if key not in agent_config:
                    agent_config[key] = default_value
    
    def _validate_ai_api_section(self, ai_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é AI API"""
        defaults = {
            'base_url': 'http://127.0.0.1:3010/v1',
            'model': 'gpt-4o-mini',
            'timeout_seconds': 30,
            'max_retries': 3,
            'retry_delay_seconds': 2,
            'temperature': 0.7,
            'max_tokens': None
        }
        
        for key, default_value in defaults.items():
            if key not in ai_config:
                ai_config[key] = default_value
    
    def _validate_goose_section(self, goose_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é Goose"""
        defaults = {
            'base_url': 'http://127.0.0.1:3000',
            'timeout_seconds': 60,
            'max_retries': 2,
            'retry_delay_seconds': 5,
            'health_check_interval_seconds': 30,
            'enable_tools': True
        }
        
        for key, default_value in defaults.items():
            if key not in goose_config:
                goose_config[key] = default_value
    
    def _validate_voice_section(self, voice_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é –≥–æ–ª–æ—Å—É"""
        defaults = {
            'tts_enabled': True,
            'tts_url': 'http://127.0.0.1:3001',
            'tts_timeout_seconds': 10,
            'stt_enabled': True,
            'stt_timeout_seconds': 15,
            'stt_model': 'large-v3',
            'default_voice': 'dmytro',
            'language': 'uk-UA'
        }
        
        for key, default_value in defaults.items():
            if key not in voice_config:
                voice_config[key] = default_value
    
    def _validate_web_section(self, web_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        defaults = {
            'port': 5001,
            'host': '127.0.0.1',
            'debug': False,
            'auto_reload': False,
            'max_content_length': 16 * 1024 * 1024,  # 16MB
            'request_timeout_seconds': 30
        }
        
        for key, default_value in defaults.items():
            if key not in web_config:
                web_config[key] = default_value
    
    def _validate_performance_section(self, perf_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        cpu_count = self.system_context['system_resources']['cpu_count']
        memory_gb = self.system_context['system_resources']['memory_available_gb']
        
        defaults = {
            'worker_processes': min(cpu_count, 4),
            'worker_threads': cpu_count * 2,
            'memory_limit_mb': int(memory_gb * 0.5 * 1024),  # 50% –¥–æ—Å—Ç—É–ø–Ω–æ—ó –ø–∞–º'—è—Ç—ñ
            'cache_enabled': memory_gb > 1.0,
            'cache_size_mb': min(int(memory_gb * 0.1 * 1024), 512),
            'connection_pool_size': min(cpu_count * 5, 20)
        }
        
        for key, default_value in defaults.items():
            if key not in perf_config:
                perf_config[key] = default_value
    
    def _validate_reliability_section(self, rel_config: Dict[str, Any]):
        """–í–∞–ª—ñ–¥—É—î —Å–µ–∫—Ü—ñ—é –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ"""
        defaults = {
            'enable_auto_recovery': True,
            'max_recovery_attempts': 5,
            'circuit_breaker_enabled': True,
            'circuit_breaker_threshold': 5,
            'circuit_breaker_timeout_seconds': 60,
            'health_check_enabled': True,
            'graceful_shutdown_timeout_seconds': 30
        }
        
        for key, default_value in defaults.items():
            if key not in rel_config:
                rel_config[key] = default_value
    
    def _generate_fallback_config(self, config_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤—É fallback –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        
        cpu_count = self.system_context['system_resources']['cpu_count']
        memory_gb = self.system_context['system_resources']['memory_available_gb']
        
        return {
            'SYSTEM': {
                'max_concurrent_requests': min(cpu_count, 5),
                'request_timeout_seconds': 30,
                'health_check_interval_seconds': 60,
                'log_level': 'INFO',
                'debug_mode': False
            },
            'AGENTS': {
                'atlas': {
                    'timeout_seconds': 15,
                    'max_retries': 3,
                    'max_context_tokens': 8000,
                    'enabled': True
                },
                'tetyana': {
                    'timeout_seconds': 60,
                    'max_retries': 2,
                    'max_context_tokens': 12000,
                    'enabled': True,
                    'requires_goose': True
                },
                'grisha': {
                    'timeout_seconds': 20,
                    'max_retries': 3,
                    'max_context_tokens': 10000,
                    'enabled': True
                }
            },
            'AI_API': {
                'base_url': 'http://127.0.0.1:3010/v1',
                'model': 'gpt-4o-mini',
                'timeout_seconds': 30,
                'max_retries': 3,
                'temperature': 0.7
            },
            'GOOSE': {
                'base_url': 'http://127.0.0.1:3000',
                'timeout_seconds': 60,
                'max_retries': 2,
                'enable_tools': True
            },
            'VOICE': {
                'tts_enabled': True,
                'tts_url': 'http://127.0.0.1:3001',
                'tts_timeout_seconds': 10,
                'stt_enabled': True,
                'stt_timeout_seconds': 15,
                'stt_model': 'large-v3'
            },
            'WEB': {
                'port': 5001,
                'host': '127.0.0.1',
                'debug': False
            },
            'PERFORMANCE': {
                'worker_processes': min(cpu_count, 2),
                'memory_limit_mb': int(memory_gb * 0.5 * 1024),
                'cache_enabled': memory_gb > 1.0
            },
            'RELIABILITY': {
                'enable_auto_recovery': True,
                'max_recovery_attempts': 3,
                'circuit_breaker_enabled': True
            },
            'META': {
                'generated_at': time.time(),
                'generated_by': 'fallback',
                'config_type': config_type,
                'version': '1.0'
            }
        }
    
    async def get_config_for_service(self, service_name: str) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É"""
        
        full_config = await self.generate_intelligent_config()
        
        # –ú–∞–ø–ø—ñ–Ω–≥ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–æ —Å–µ–∫—Ü—ñ–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        service_mapping = {
            'intelligent_engine': ['SYSTEM', 'AI_API', 'PERFORMANCE', 'RELIABILITY'],
            'goose_executor': ['GOOSE', 'RELIABILITY'],
            'agent_system': ['AGENTS', 'AI_API'],
            'voice_system': ['VOICE'],
            'web_interface': ['WEB', 'PERFORMANCE']
        }
        
        relevant_sections = service_mapping.get(service_name, ['SYSTEM'])
        
        service_config = {}
        for section in relevant_sections:
            if section in full_config:
                service_config[section.lower()] = full_config[section]
        
        return service_config
    
    def get_cached_config(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–µ—à–æ–≤–∞–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —è–∫—â–æ —î"""
        if not self.config_cache:
            return None
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –∫–µ—à—É
        latest_key = max(self.config_cache.keys())
        return self.config_cache[latest_key]
    
    def clear_cache(self):
        """–û—á–∏—â–∞—î –∫–µ—à –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
        self.config_cache.clear()
        logger.info("Configuration cache cleared")