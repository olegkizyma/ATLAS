#!/bin/bash

# ATLAS Intelligent System Startup Script
# –Ñ–¥–∏–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ ATLAS

set -e

echo "üß† ATLAS Pure Intelligent System"
echo "üöÄ Starting Intelligent Stack..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
export ATLAS_MODE="intelligent"
export ATLAS_CONFIG_TYPE="dynamic"
export PYTHONPATH="${PYTHONPATH}:$(pwd)"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_service() {
    local service_name=$1
    local url=$2
    local timeout=${3:-5}
    
    log_debug "Checking $service_name at $url..."
    
    if curl -s --max-time $timeout "$url" > /dev/null 2>&1; then
        log_info "‚úÖ $service_name is available"
        return 0
    else
        log_warn "‚ö†Ô∏è  $service_name is not available at $url"
        return 1
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
check_python_deps() {
    log_info "üêç Checking Python dependencies..."
    
    cd intelligent_atlas
    
    if [ ! -d "venv" ]; then
        log_info "Creating Python virtual environment..."
        python3 -m venv venv
    fi
    
    source venv/bin/activate
    
    log_info "Installing/updating dependencies..."
    pip install -r requirements.txt --quiet
    
    log_info "‚úÖ Python environment ready"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_required_services() {
    log_info "üîç Checking required services..."
    
    local all_good=true
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ AI API (–æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
    if check_service "Local AI API" "http://127.0.0.1:3010/v1/models"; then
        log_info "‚úÖ Local AI API (port 3010) - REQUIRED SERVICE AVAILABLE"
    else
        log_error "‚ùå Local AI API (port 3010) - REQUIRED SERVICE NOT AVAILABLE"
        log_error "   Please start your local AI API server on port 3010"
        all_good=false
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Goose (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
    if check_service "Goose" "http://127.0.0.1:3000/health"; then
        log_info "‚úÖ Goose (port 3000) - EXECUTION SERVICE AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  Goose (port 3000) - EXECUTION SERVICE NOT AVAILABLE"
        log_warn "   Task execution will be limited without Goose"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTS (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
    if check_service "TTS Server" "http://127.0.0.1:3001/health"; then
        log_info "‚úÖ TTS Server (port 3001) - VOICE SERVICE AVAILABLE"
    else
        log_warn "‚ö†Ô∏è  TTS Server (port 3001) - VOICE SERVICE NOT AVAILABLE"
        log_warn "   Voice synthesis will not be available"
    fi
    
    if [ "$all_good" = false ]; then
        log_error "‚ùå Required services are not available. Cannot start ATLAS."
        log_error ""
        log_error "REQUIRED SERVICES:"
        log_error "  1. Local AI API on port 3010 (OpenAI-compatible)"
        log_error "     Example: ollama serve, lm-studio, etc."
        log_error ""
        log_error "RECOMMENDED SERVICES:"
        log_error "  2. Goose on port 3000 for task execution"
        log_error "  3. Ukrainian TTS on port 3001 for voice"
        exit 1
    fi
    
    log_info "‚úÖ Service check completed"
}

# –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
start_intelligent_system() {
    log_info "üß† Starting Intelligent ATLAS System..."
    
    cd intelligent_atlas
    source venv/bin/activate
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ PYTHONPATH –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤
    export PYTHONPATH="$(pwd):$(pwd)/core:$(pwd)/config:$PYTHONPATH"
    
    log_info "üîß Initializing Intelligent Engine..."
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
    python3 -c "
import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s'
)

logger = logging.getLogger('atlas.startup')

async def main():
    try:
        logger.info('üß† Initializing ATLAS Intelligent System...')
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        from intelligent_engine import intelligent_engine
        from web_interface import WebInterface
        from dynamic_config import DynamicConfigManager
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
        config_manager = DynamicConfigManager()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        logger.info('üîß Generating dynamic configuration via AI...')
        config = await config_manager.generate_intelligent_config('complete')
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏–π –¥–≤–∏–∂–æ–∫
        logger.info('üß† Initializing Intelligent Engine...')
        initialized = await intelligent_engine.initialize()
        
        if not initialized:
            logger.error('‚ùå Failed to initialize Intelligent Engine')
            sys.exit(1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        web_config = config.get('WEB', {})
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        logger.info('üåê Starting Web Interface...')
        web_interface = WebInterface(web_config)
        
        logger.info('‚úÖ ATLAS Intelligent System is ready!')
        logger.info('')
        logger.info('üìä System Information:')
        logger.info(f'   üß† AI Engine: Initialized with {len(config)} config sections')
        logger.info(f'   üåê Web Interface: http://127.0.0.1:{web_config.get(\"port\", 5001)}')
        logger.info(f'   üé≠ Agents: Atlas (planner), Tetyana (executor), Grisha (validator)')
        logger.info(f'   üîß Configuration: 100% AI-generated, zero hardcodes')
        logger.info('')
        logger.info('üéâ ATLAS is now running in PURE INTELLIGENT MODE!')
        logger.info('   All decisions are made via AI API (port 3010)')
        logger.info('   All executions are real via Goose (port 3000)')
        logger.info('   Zero simulations, zero hardcodes, maximum reliability')
        logger.info('')
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–±–ª–æ–∫—É—é—á–∏–π –≤–∏–∫–ª–∏–∫)
        web_interface.run()
        
    except KeyboardInterrupt:
        logger.info('üîÑ Shutting down ATLAS Intelligent System...')
        if 'intelligent_engine' in locals():
            await intelligent_engine.shutdown()
        logger.info('‚úÖ ATLAS shutdown complete')
        
    except Exception as e:
        logger.error(f'‚ùå ATLAS startup failed: {e}')
        sys.exit(1)

if __name__ == '__main__':
    asyncio.run(main())
"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–∏—Å—Ç–µ–º–∏
stop_system() {
    log_info "üîÑ Stopping ATLAS Intelligent System..."
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ü–µ—Å Python
    local atlas_pid=$(ps aux | grep "intelligent_engine" | grep -v grep | awk '{print $2}')
    
    if [ -n "$atlas_pid" ]; then
        log_info "Stopping ATLAS process (PID: $atlas_pid)..."
        kill -TERM $atlas_pid 2>/dev/null || true
        
        # –ß–µ–∫–∞—î–º–æ graceful shutdown
        sleep 3
        
        # –Ø–∫—â–æ —â–µ –ø—Ä–∞—Ü—é—î, —Ñ–æ—Ä—Å—É—î–º–æ –∑—É–ø–∏–Ω–∫—É
        if kill -0 $atlas_pid 2>/dev/null; then
            log_warn "Force stopping ATLAS process..."
            kill -KILL $atlas_pid 2>/dev/null || true
        fi
        
        log_info "‚úÖ ATLAS process stopped"
    else
        log_info "No ATLAS process found"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç—É—Å—É
show_status() {
    log_info "üìä ATLAS System Status:"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞—Ü—é—î ATLAS
    local atlas_pid=$(ps aux | grep "intelligent_engine" | grep -v grep | awk '{print $2}')
    
    if [ -n "$atlas_pid" ]; then
        log_info "‚úÖ ATLAS Process: Running (PID: $atlas_pid)"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if check_service "ATLAS Web Interface" "http://127.0.0.1:5001/api/health" 2; then
            log_info "‚úÖ Web Interface: http://127.0.0.1:5001"
        else
            log_warn "‚ö†Ô∏è  Web Interface: Not responding"
        fi
    else
        log_warn "‚ùå ATLAS Process: Not running"
    fi
    
    echo ""
    log_info "External Services:"
    check_service "Local AI API" "http://127.0.0.1:3010/v1/models" 2
    check_service "Goose" "http://127.0.0.1:3000/health" 2
    check_service "TTS Server" "http://127.0.0.1:3001/health" 2
}

# –ì–æ–ª–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
main() {
    case "${1:-start}" in
        start)
            log_info "üöÄ Starting ATLAS Intelligent System..."
            echo ""
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
            check_python_deps
            echo ""
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
            check_required_services
            echo ""
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º—É
            start_intelligent_system
            ;;
            
        stop)
            stop_system
            ;;
            
        restart)
            log_info "üîÑ Restarting ATLAS..."
            stop_system
            sleep 2
            $0 start
            ;;
            
        status)
            show_status
            ;;
            
        *)
            echo "Usage: $0 {start|stop|restart|status}"
            echo ""
            echo "ATLAS Intelligent System Control Script"
            echo ""
            echo "Commands:"
            echo "  start   - Start the intelligent system (default)"
            echo "  stop    - Stop the system gracefully"
            echo "  restart - Restart the system"
            echo "  status  - Show system status"
            echo ""
            echo "Access the system at: http://127.0.0.1:5001"
            exit 1
            ;;
    esac
}

# –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
trap 'log_info "Received shutdown signal..."; stop_system; exit 0' SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫
main "$@"