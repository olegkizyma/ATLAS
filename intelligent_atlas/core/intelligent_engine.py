#!/usr/bin/env python3
"""
ATLAS Intelligent Engine
–ì–æ–ª–æ–≤–Ω–∏–π AI –¥–≤–∏–∂–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ ATLAS
"""

import asyncio
import json
import logging
import time
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
import aiohttp
import sys
from pathlib import Path

# –î–æ–¥–∞—î–º–æ config –¥–æ sys.path
config_path = Path(__file__).parent.parent / 'config'
sys.path.insert(0, str(config_path))

from dynamic_config import DynamicConfigManager

logger = logging.getLogger('atlas.intelligent_engine')

@dataclass
class IntelligentRequest:
    """–Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_message: str
    session_id: str
    timestamp: float
    context: Dict[str, Any]
    metadata: Dict[str, Any]

@dataclass
class IntelligentResponse:
    """–Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–∏—Å—Ç–µ–º–∏"""
    success: bool
    response_text: str
    agent_used: str
    execution_evidence: Dict[str, Any]
    tts_ready: bool = True
    needs_continuation: bool = False

class IntelligentEngine:
    """–ì–æ–ª–æ–≤–Ω–∏–π AI –¥–≤–∏–∂–æ–∫ —Å–∏—Å—Ç–µ–º–∏ ATLAS"""
    
    def __init__(self):
        self.config_manager = DynamicConfigManager()
        self.config = {}
        self.ai_api_base = "http://127.0.0.1:3010/v1"
        self.sessions = {}
        self.is_initialized = False
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —ñ–Ω—à—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –ª–µ–Ω–∏–≤–æ
        self.goose_executor = None
        self.voice_system = None
        self.agent_system = None
    
    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—é —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—É —Å–∏—Å—Ç–µ–º—É"""
        try:
            logger.info("üß† Initializing ATLAS Intelligent Engine...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI
            await self._generate_intelligent_config()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏
            await self._initialize_components()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏
            await self._verify_system_readiness()
            
            self.is_initialized = True
            logger.info("‚úÖ ATLAS Intelligent Engine initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Intelligent Engine: {e}")
            return False
    
    async def _generate_intelligent_config(self):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI API"""
        logger.info("üîß Generating intelligent configuration...")
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ AI –ø—Ä–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
        config_prompt = """
        –¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó AI —Å–∏—Å—Ç–µ–º. –ó–≥–µ–Ω–µ—Ä—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ ATLAS.
        
        –°–∏—Å—Ç–µ–º–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑:
        - AI –¥–≤–∏–∂–∫–∞ (—Ç–∏)
        - 3 –∞–≥–µ–Ω—Ç—ñ–≤: Atlas (–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫), Tetyana (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å), Grisha (–≤–∞–ª—ñ–¥–∞—Ç–æ—Ä)
        - Goose executor –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        - TTS/STT —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        - –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        –ü–æ–≤–µ—Ä–Ω–∏ JSON –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ.
        –í–∫–ª—é—á–∏ timeouts, retry policies, agent behaviors, system limits.
        """
        
        try:
            config_response = await self._call_ai_api(config_prompt, "config_generation")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI
            if config_response and 'choices' in config_response:
                content = config_response['choices'][0]['message']['content']
                
                # –í–∏—Ç—è–≥—É—î–º–æ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    self.config = json.loads(json_match.group(0))
                else:
                    # Fallback –¥–æ –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
                    self.config = self._get_fallback_config()
            else:
                self.config = self._get_fallback_config()
                
        except Exception as e:
            logger.warning(f"AI config generation failed, using fallback: {e}")
            self.config = self._get_fallback_config()
        
        logger.info(f"Configuration generated with {len(self.config)} sections")
    
    def _get_fallback_config(self) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞ fallback –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"""
        return {
            "system": {
                "max_concurrent_requests": 5,
                "request_timeout_seconds": 30,
                "retry_attempts": 3,
                "health_check_interval": 60
            },
            "agents": {
                "atlas": {
                    "role": "planner",
                    "timeout_seconds": 15,
                    "max_context_tokens": 8000
                },
                "tetyana": {
                    "role": "executor", 
                    "timeout_seconds": 60,
                    "max_context_tokens": 12000,
                    "requires_goose": True
                },
                "grisha": {
                    "role": "validator",
                    "timeout_seconds": 20, 
                    "max_context_tokens": 10000
                }
            },
            "voice": {
                "tts_enabled": True,
                "stt_enabled": True,
                "tts_timeout_seconds": 10,
                "stt_timeout_seconds": 15
            },
            "goose": {
                "base_url": "http://127.0.0.1:3000",
                "timeout_seconds": 60,
                "retry_attempts": 2
            }
        }
    
    async def _initialize_components(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üîß Initializing system components...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ GooseExecutor
        from goose_executor import GooseExecutor
        self.goose_executor = GooseExecutor(self.config.get('goose', {}))
        await self.goose_executor.initialize()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ VoiceSystem
        from voice_system import VoiceSystem
        self.voice_system = VoiceSystem(self.config.get('voice', {}))
        await self.voice_system.initialize()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AgentSystem
        from agent_system import AgentSystem
        self.agent_system = AgentSystem(
            self.config.get('agents', {}),
            self.ai_api_base,
            self.goose_executor
        )
        await self.agent_system.initialize()
    
    async def _verify_system_readiness(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        logger.info("üîç Verifying system readiness...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AI API
        health_check = await self._call_ai_api("ping", "health_check")
        if not health_check:
            raise Exception("AI API not responding")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Goose
        if not await self.goose_executor.health_check():
            logger.warning("Goose not available - some functions may be limited")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTS/STT
        if not await self.voice_system.health_check():
            logger.warning("Voice system not available - voice features disabled")
        
        logger.info("‚úÖ System readiness verified")
    
    async def process_intelligent_request(self, request: IntelligentRequest) -> IntelligentResponse:
        """–û–±—Ä–æ–±–ª—è—î —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not self.is_initialized:
            raise Exception("Engine not initialized")
        
        try:
            logger.info(f"üß† Processing intelligent request: {request.user_message[:100]}...")
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ AI
            analysis = await self._analyze_request_with_ai(request)
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI
            selected_agent = await self._select_agent_with_ai(request, analysis)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            execution_result = await self.agent_system.execute_with_agent(
                selected_agent, request, analysis
            )
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = await self._generate_intelligent_response(
                request, analysis, selected_agent, execution_result
            )
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å–µ—Å—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            self._update_session_context(request.session_id, request, response)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Request processing failed: {e}")
            
            # –Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ AI
            recovery_response = await self._intelligent_error_recovery(request, str(e))
            return recovery_response
    
    async def _analyze_request_with_ai(self, request: IntelligentRequest) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑—É—î –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ AI"""
        
        analysis_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á:
        1. –¢–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è (–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —Ä–æ–∑–º–æ–≤–∞)
        2. –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å (–Ω–∏–∑—å–∫–∞, —Å–µ—Ä–µ–¥–Ω—è, –≤–∏—Å–æ–∫–∞)
        3. –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å (–Ω–∏–∑—å–∫–∞, –Ω–æ—Ä–º–∞–ª—å–Ω–∞, –≤–∏—Å–æ–∫–∞)
        4. –ü–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ (Goose –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –≥–æ–ª–æ—Å, –≤–µ–±-–¥–æ—Å—Ç—É–ø)
        5. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        –ó–∞–ø–∏—Ç: "{request.user_message}"
        –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó: {json.dumps(self.sessions.get(request.session_id, {}), ensure_ascii=False)}
        
        –ü–æ–≤–µ—Ä–Ω–∏ JSON –∞–Ω–∞–ª—ñ–∑.
        """
        
        ai_response = await self._call_ai_api(analysis_prompt, "request_analysis")
        
        if ai_response and 'choices' in ai_response:
            content = ai_response['choices'][0]['message']['content']
            try:
                return json.loads(content)
            except:
                # Fallback –∞–Ω–∞–ª—ñ–∑
                return {
                    "task_type": "execution",
                    "complexity": "medium", 
                    "urgency": "normal",
                    "needs_goose": True,
                    "needs_voice": False
                }
        
        return {"task_type": "unknown", "complexity": "medium"}
    
    async def _select_agent_with_ai(self, request: IntelligentRequest, analysis: Dict[str, Any]) -> str:
        """–í–∏–±–∏—Ä–∞—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        
        selection_prompt = f"""
        –í–∏–±–µ—Ä–∏ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
        
        –î–æ—Å—Ç—É–ø–Ω—ñ –∞–≥–µ–Ω—Ç–∏:
        - Atlas: –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥, —Å—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–ª–∞–Ω–∏
        - Tetyana: –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å, –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ Goose —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
        - Grisha: –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ —è–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        
        –ó–∞–ø–∏—Ç: "{request.user_message}"
        –ê–Ω–∞–ª—ñ–∑: {json.dumps(analysis, ensure_ascii=False)}
        
        –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è –∞–≥–µ–Ω—Ç–∞: atlas, tetyana, –∞–±–æ grisha
        """
        
        ai_response = await self._call_ai_api(selection_prompt, "agent_selection")
        
        if ai_response and 'choices' in ai_response:
            content = ai_response['choices'][0]['message']['content'].lower().strip()
            if content in ['atlas', 'tetyana', 'grisha']:
                return content
        
        # Fallback –ª–æ–≥—ñ–∫–∞
        task_type = analysis.get('task_type', 'execution')
        if task_type == 'planning':
            return 'atlas'
        elif task_type == 'execution':
            return 'tetyana'
        elif task_type == 'validation':
            return 'grisha'
        else:
            return 'atlas'  # Default
    
    async def _generate_intelligent_response(self, request: IntelligentRequest, 
                                           analysis: Dict[str, Any], agent: str,
                                           execution_result: Dict[str, Any]) -> IntelligentResponse:
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"""
        
        response_prompt = f"""
        –°—Ñ–æ—Ä–º—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
        
        –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{request.user_message}"
        –ê–≥–µ–Ω—Ç —è–∫–∏–π –≤–∏–∫–æ–Ω—É–≤–∞–≤: {agent}
        –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {json.dumps(execution_result, ensure_ascii=False)}
        
        –°—Ñ–æ—Ä–º—É–π –ø—Ä–∏—Ä–æ–¥–Ω—é —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —â–æ:
        1. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        2. –ü–æ—è—Å–Ω—é—î —â–æ –±—É–ª–æ –∑—Ä–æ–±–ª–µ–Ω–æ
        3. –ù–∞–¥–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        4. –ü—Ä–æ–ø–æ–Ω—É—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –¥—Ä—É–∂–Ω—å–æ—é —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—é.
        """
        
        ai_response = await self._call_ai_api(response_prompt, "response_generation")
        
        response_text = "–ó–∞–≤–¥–∞–Ω–Ω—è –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ."  # Fallback
        if ai_response and 'choices' in ai_response:
            response_text = ai_response['choices'][0]['message']['content']
        
        return IntelligentResponse(
            success=execution_result.get('success', True),
            response_text=response_text,
            agent_used=agent,
            execution_evidence=execution_result.get('evidence', {}),
            tts_ready=True,
            needs_continuation=execution_result.get('needs_continuation', False)
        )
    
    async def _intelligent_error_recovery(self, request: IntelligentRequest, error: str) -> IntelligentResponse:
        """–Ü–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏"""
        
        recovery_prompt = f"""
        –°–∏—Å—Ç–µ–º–∞ –∑—ñ—Ç–∫–Ω—É–ª–∞—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –í–∏–∑–Ω–∞—á –Ω–∞–π–∫—Ä–∞—â—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:
        
        –ó–∞–ø–∏—Ç: "{request.user_message}"
        –ü–æ–º–∏–ª–∫–∞: "{error}"
        
        –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:
        1. –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É –∑ —ñ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        2. –†–æ–∑–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏
        3. –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
        4. –ü–æ–ø—Ä–æ—Å–∏—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        –ü–æ–≤–µ—Ä–Ω–∏ JSON –∑ –ø–ª–∞–Ω–æ–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        
        ai_response = await self._call_ai_api(recovery_prompt, "error_recovery")
        
        recovery_message = f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è."
        
        if ai_response and 'choices' in ai_response:
            content = ai_response['choices'][0]['message']['content']
            try:
                recovery_plan = json.loads(content)
                recovery_message = recovery_plan.get('user_message', recovery_message)
            except:
                pass
        
        return IntelligentResponse(
            success=False,
            response_text=recovery_message,
            agent_used="system",
            execution_evidence={"error": error, "recovery_attempted": True},
            tts_ready=True,
            needs_continuation=False
        )
    
    def _update_session_context(self, session_id: str, request: IntelligentRequest, response: IntelligentResponse):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó"""
        if session_id not in self.sessions:
            self.sessions[session_id] = {
                "created_at": time.time(),
                "messages": [],
                "agent_preferences": {},
                "context": {}
            }
        
        session = self.sessions[session_id]
        session["messages"].append({
            "timestamp": request.timestamp,
            "user_message": request.user_message,
            "agent_response": response.response_text,
            "agent_used": response.agent_used,
            "success": response.success
        })
        
        # –û–±–º–µ–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if len(session["messages"]) > 20:
            session["messages"] = session["messages"][-15:]
    
    async def _call_ai_api(self, prompt: str, operation: str) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–ª–∏–∫–∞—î –ª–æ–∫–∞–ª—å–Ω–µ AI API"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "model": "gpt-4o-mini",  # –ú–æ–¥–µ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    "messages": [
                        {"role": "system", "content": "–¢–∏ - —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —Å–∏—Å—Ç–µ–º–∏ ATLAS. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –±—É–¥—å —Ç–æ—á–Ω–∏–º —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–º."},
                        {"role": "user", "content": prompt}
                    ],
                    "stream": False,
                    "temperature": 0.7
                }
                
                async with session.post(
                    f"{self.ai_api_base}/chat/completions",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.warning(f"AI API returned status {response.status} for {operation}")
                        return None
                        
        except Exception as e:
            logger.error(f"AI API call failed for {operation}: {e}")
            return None
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏"""
        status = {
            "engine_initialized": self.is_initialized,
            "timestamp": time.time(),
            "active_sessions": len(self.sessions),
            "config_sections": len(self.config),
            "components": {}
        }
        
        if self.goose_executor:
            status["components"]["goose"] = await self.goose_executor.get_status()
        
        if self.voice_system:
            status["components"]["voice"] = await self.voice_system.get_status()
        
        if self.agent_system:
            status["components"]["agents"] = await self.agent_system.get_status()
        
        return status
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üîÑ Shutting down Intelligent Engine...")
        
        if self.goose_executor:
            await self.goose_executor.shutdown()
        
        if self.voice_system:
            await self.voice_system.shutdown()
        
        if self.agent_system:
            await self.agent_system.shutdown()
        
        logger.info("‚úÖ Intelligent Engine shutdown complete")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π instance –¥–≤–∏–∂–∫–∞
intelligent_engine = IntelligentEngine()