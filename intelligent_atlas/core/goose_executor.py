#!/usr/bin/env python3
"""
ATLAS Goose Executor
–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ Goose –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
"""

import asyncio
import json
import logging
import time
from typing import Dict, Any, Optional
import aiohttp
import websockets
from dataclasses import dataclass

logger = logging.getLogger('atlas.goose_executor')

@dataclass
class ExecutionTask:
    """–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    task_id: str
    description: str
    context: Dict[str, Any]
    session_id: str
    timeout_seconds: int = 60
    require_evidence: bool = True

@dataclass
class ExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    success: bool
    task_id: str
    output: str
    evidence: Dict[str, Any]
    execution_time: float
    error_message: Optional[str] = None

class GooseExecutor:
    """–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ Goose –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é real execution"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.base_url = config.get('base_url', 'http://127.0.0.1:3000')
        self.timeout_seconds = config.get('timeout_seconds', 60)
        self.retry_attempts = config.get('retry_attempts', 2)
        
        self.is_available = False
        self.last_health_check = 0
        self.health_check_interval = 30  # —Å–µ–∫—É–Ω–¥
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        self.stats = {
            'total_executions': 0,
            'successful_executions': 0,
            'failed_executions': 0,
            'average_execution_time': 0,
            'last_execution_time': 0
        }
    
    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Goose Executor"""
        logger.info("ü¶¢ Initializing Goose Executor...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Goose
            await self.health_check()
            
            if self.is_available:
                logger.info("‚úÖ Goose Executor initialized successfully")
                return True
            else:
                logger.warning("‚ö†Ô∏è Goose not available - execution capabilities limited")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Goose Executor: {e}")
            return False
    
    async def health_check(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è Goose —Å–µ—Ä–≤–µ—Ä–∞"""
        current_time = time.time()
        
        # –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç health check
        if current_time - self.last_health_check < self.health_check_interval:
            return self.is_available
        
        try:
            async with aiohttp.ClientSession() as session:
                # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ /health endpoint
                async with session.get(
                    f"{self.base_url}/health",
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        self.is_available = True
                        self.last_health_check = current_time
                        return True
        except:
            pass
        
        try:
            # Fallback –¥–æ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            async with websockets.connect(
                self.base_url.replace('http', 'ws') + '/ws',
                timeout=5
            ) as websocket:
                await websocket.ping()
                self.is_available = True
                self.last_health_check = current_time
                return True
                
        except Exception as e:
            logger.warning(f"Goose health check failed: {e}")
            self.is_available = False
            self.last_health_check = current_time
            return False
    
    async def execute_task(self, task: ExecutionTask) -> ExecutionResult:
        """–í–∏–∫–æ–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose"""
        start_time = time.time()
        self.stats['total_executions'] += 1
        
        logger.info(f"ü¶¢ Executing task {task.task_id}: {task.description[:100]}...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Goose
            if not await self.health_check():
                raise Exception("Goose server not available")
            
            # –§–æ—Ä–º—É—î–º–æ prompt –¥–ª—è Goose –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            execution_prompt = self._build_execution_prompt(task)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ —á–µ—Ä–µ–∑ Goose
            result = await self._execute_via_goose(execution_prompt, task.session_id, task.timeout_seconds)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result and result.get('success'):
                evidence = await self._collect_execution_evidence(task, result)
                
                execution_time = time.time() - start_time
                self._update_stats(execution_time, True)
                
                return ExecutionResult(
                    success=True,
                    task_id=task.task_id,
                    output=result.get('response', ''),
                    evidence=evidence,
                    execution_time=execution_time
                )
            else:
                error_msg = result.get('error', 'Unknown execution error') if result else 'No response from Goose'
                raise Exception(error_msg)
                
        except Exception as e:
            execution_time = time.time() - start_time
            self._update_stats(execution_time, False)
            
            logger.error(f"‚ùå Task {task.task_id} execution failed: {e}")
            
            return ExecutionResult(
                success=False,
                task_id=task.task_id,
                output="",
                evidence={},
                execution_time=execution_time,
                error_message=str(e)
            )
    
    def _build_execution_prompt(self, task: ExecutionTask) -> str:
        """–ë—É–¥—É—î prompt –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        
        prompt_parts = [
            "–¢–∏ - –¢–µ—Ç—è–Ω–∞, –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å —Å–∏—Å—Ç–µ–º–∏ ATLAS.",
            "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - —Ä–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∑–∞–ø–∏—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏.",
            "",
            f"–ó–ê–í–î–ê–ù–ù–Ø: {task.description}",
            "",
            "–Ü–ù–°–¢–†–£–ö–¶–Ü–á:",
            "1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–µ–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ (—Ñ–∞–π–ª–∏, –±—Ä–∞—É–∑–µ—Ä, –¥–æ–¥–∞—Ç–∫–∏)",
            "2. –í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ–µ—Ç–∞–ø–Ω–æ —Ç–∞ —Ä–µ—Ç–µ–ª—å–Ω–æ",
            "3. –ó–±–∏—Ä–∞–π –¥–æ–∫–∞–∑–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, —Ñ–∞–π–ª–∏, –≤–∏—Ö–æ–¥–∏ –∫–æ–º–∞–Ω–¥)",
            "4. –ù–∞–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥—ñ—ó",
            "",
            "–§–û–†–ú–ê–¢ –ó–í–Ü–¢–£:",
            "1. –†–ï–ó–Æ–ú–ï: –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —â–æ –∑—Ä–æ–±–ª–µ–Ω–æ",
            "2. –ö–†–û–ö–ò: –°–ø–∏—Å–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤", 
            "3. –†–ï–ó–£–õ–¨–¢–ê–¢–ò: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –¥–æ–∫–∞–∑–∞–º–∏",
            "4. –î–û–ö–ê–ó–ò: –§–∞–π–ª–∏, —à–ª—è—Ö–∏, —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –∫–æ–º–∞–Ω–¥–∏",
            "5. –°–¢–ê–¢–£–°: –ó–ê–í–ï–†–®–ï–ù–û / –ß–ê–°–¢–ö–û–í–û / –ü–û–ú–ò–õ–ö–ê",
            ""
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–∫—â–æ —î
        if task.context:
            prompt_parts.extend([
                "–ö–û–ù–¢–ï–ö–°–¢:",
                json.dumps(task.context, ensure_ascii=False, indent=2),
                ""
            ])
        
        prompt_parts.append("–ü–æ—á–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ó–ê–†–ê–ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.")
        
        return "\n".join(prompt_parts)
    
    async def _execute_via_goose(self, prompt: str, session_id: str, timeout: int) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î prompt —á–µ—Ä–µ–∑ Goose"""
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ WebSocket
        try:
            result = await self._execute_via_websocket(prompt, session_id, timeout)
            if result:
                return result
        except Exception as e:
            logger.warning(f"WebSocket execution failed: {e}")
        
        # Fallback –¥–æ SSE
        try:
            result = await self._execute_via_sse(prompt, session_id, timeout)
            return result
        except Exception as e:
            logger.error(f"SSE execution failed: {e}")
            return None
    
    async def _execute_via_websocket(self, prompt: str, session_id: str, timeout: int) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î —á–µ—Ä–µ–∑ WebSocket"""
        ws_url = self.base_url.replace('http', 'ws') + '/ws'
        
        try:
            async with websockets.connect(ws_url, timeout=timeout) as websocket:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                message = {
                    "type": "message",
                    "content": prompt,
                    "session_id": session_id,
                    "timestamp": int(time.time() * 1000)
                }
                
                await websocket.send(json.dumps(message))
                
                # –ó–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                collected_response = ""
                
                while True:
                    try:
                        response = await asyncio.wait_for(websocket.recv(), timeout=timeout)
                        data = json.loads(response)
                        
                        if data.get('type') == 'response':
                            content = data.get('content', '')
                            if content:
                                collected_response += content
                        
                        elif data.get('type') in ['complete', 'cancelled']:
                            break
                            
                        elif data.get('type') == 'error':
                            return {'success': False, 'error': data.get('message', 'WebSocket error')}
                            
                    except asyncio.TimeoutError:
                        logger.warning("WebSocket response timeout")
                        break
                
                return {
                    'success': bool(collected_response.strip()),
                    'response': collected_response.strip() or "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ (–±–µ–∑ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)"
                }
                
        except Exception as e:
            logger.error(f"WebSocket execution error: {e}")
            return None
    
    async def _execute_via_sse(self, prompt: str, session_id: str, timeout: int) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î —á–µ—Ä–µ–∑ SSE"""
        url = f"{self.base_url}/reply"
        
        headers = {
            'Accept': 'text/event-stream',
            'Content-Type': 'application/json',
            'X-Secret-Key': 'test'  # Default Goose secret
        }
        
        messages = [
            {
                "role": "system",
                "created": int(time.time()),
                "content": [{"type": "text", "text": "–¢–∏ - –¢–µ—Ç—è–Ω–∞, –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."}]
            },
            {
                "role": "user", 
                "created": int(time.time()),
                "content": [{"type": "text", "text": prompt}]
            }
        ]
        
        payload = {
            "messages": messages,
            "session_id": session_id,
            "session_working_dir": "/home",  # Default working directory
            "tool_choice": "auto"  # –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, headers=headers, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
                    
                    if response.status != 200:
                        return {'success': False, 'error': f'HTTP {response.status}'}
                    
                    collected_content = ""
                    
                    async for line in response.content:
                        line_str = line.decode('utf-8').strip()
                        
                        if line_str.startswith('data:'):
                            data_str = line_str[5:].strip()
                            
                            try:
                                data = json.loads(data_str)
                                
                                if data.get('type') == 'Message' and data.get('message', {}).get('content'):
                                    for content in data['message']['content']:
                                        if content.get('type') == 'text':
                                            text = content.get('text', '')
                                            if text:
                                                collected_content += text
                                
                                elif data.get('type') == 'Error':
                                    return {'success': False, 'error': data.get('error', 'Unknown SSE error')}
                                
                            except json.JSONDecodeError:
                                # –ú–æ–∂–ª–∏–≤–æ, —Ü–µ plain text
                                if data_str and not data_str.startswith('['):
                                    collected_content += data_str
                    
                    return {
                        'success': bool(collected_content.strip()),
                        'response': collected_content.strip() or "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ"
                    }
                    
        except Exception as e:
            logger.error(f"SSE execution error: {e}")
            return None
    
    async def _collect_execution_evidence(self, task: ExecutionTask, result: Dict[str, Any]) -> Dict[str, Any]:
        """–ó–±–∏—Ä–∞—î –¥–æ–∫–∞–∑–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        
        evidence = {
            'task_id': task.task_id,
            'execution_timestamp': time.time(),
            'goose_response': result.get('response', ''),
            'execution_method': 'goose',
            'session_id': task.session_id
        }
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–∫–∞–∑—ñ–≤
        response_text = result.get('response', '')
        
        # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        import re
        file_patterns = [
            r'/[^\s]+\.(txt|json|py|html|css|js|png|jpg|jpeg|pdf)',
            r'~/[^\s]+\.[a-zA-Z0-9]+',
            r'\./[^\s]+\.[a-zA-Z0-9]+'
        ]
        
        found_files = []
        for pattern in file_patterns:
            matches = re.findall(pattern, response_text)
            found_files.extend(matches)
        
        if found_files:
            evidence['files_mentioned'] = found_files
        
        # –®—É–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        command_patterns = [
            r'`([^`]+)`',
            r'–∫–æ–º–∞–Ω–¥–∞[:\s]+([^\n]+)',
            r'–≤–∏–∫–æ–Ω–∞–Ω–æ[:\s]+([^\n]+)'
        ]
        
        found_commands = []
        for pattern in command_patterns:
            matches = re.findall(pattern, response_text, re.IGNORECASE)
            found_commands.extend(matches)
        
        if found_commands:
            evidence['commands_executed'] = found_commands
        
        return evidence
    
    def _update_stats(self, execution_time: float, success: bool):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
        if success:
            self.stats['successful_executions'] += 1
        else:
            self.stats['failed_executions'] += 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        total_exec = self.stats['total_executions']
        current_avg = self.stats['average_execution_time']
        self.stats['average_execution_time'] = (current_avg * (total_exec - 1) + execution_time) / total_exec
        self.stats['last_execution_time'] = execution_time
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å Goose Executor"""
        await self.health_check()  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        
        return {
            'available': self.is_available,
            'base_url': self.base_url,
            'last_health_check': self.last_health_check,
            'config': self.config,
            'stats': self.stats.copy()
        }
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É Goose Executor"""
        logger.info("üîÑ Shutting down Goose Executor...")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ cleanup –ª–æ–≥—ñ–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        logger.info("‚úÖ Goose Executor shutdown complete")