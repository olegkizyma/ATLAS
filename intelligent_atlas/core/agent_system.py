#!/usr/bin/env python3
"""
ATLAS Agent System
–°–∏—Å—Ç–µ–º–∞ 3 –∞–≥–µ–Ω—Ç—ñ–≤: Atlas (–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫), Tetyana (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å), Grisha (–≤–∞–ª—ñ–¥–∞—Ç–æ—Ä)
"""

import asyncio
import json
import logging
import time
from typing import Dict, Any, Optional
from dataclasses import dataclass
import aiohttp

logger = logging.getLogger('atlas.agent_system')

@dataclass
class AgentResponse:
    """–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≥–µ–Ω—Ç–∞"""
    agent_name: str
    response_text: str
    execution_evidence: Dict[str, Any]
    execution_time: float
    success: bool
    needs_continuation: bool = False

class AgentSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞–º–∏ Atlas, Tetyana, Grisha"""
    
    def __init__(self, config: Dict[str, Any], ai_api_base: str, goose_executor):
        self.config = config
        self.ai_api_base = ai_api_base
        self.goose_executor = goose_executor
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç—ñ–≤
        self.agents = {
            'atlas': {
                'role': 'planner',
                'description': '–°—Ç—Ä–∞—Ç–µ–≥ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫, —Å—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–ª–∞–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
                'capabilities': ['planning', 'analysis', 'strategy', 'coordination'],
                'uses_goose': False,  # Atlas –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ AI API
                'timeout': config.get('atlas', {}).get('timeout_seconds', 15)
            },
            'tetyana': {
                'role': 'executor', 
                'description': '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏',
                'capabilities': ['execution', 'tools', 'files', 'applications', 'verification'],
                'uses_goose': True,   # Tetyana –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Goose
                'timeout': config.get('tetyana', {}).get('timeout_seconds', 60)
            },
            'grisha': {
                'role': 'validator',
                'description': '–í–∞–ª—ñ–¥–∞—Ç–æ—Ä —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
                'capabilities': ['validation', 'verification', 'quality_check', 'compliance'],
                'uses_goose': True,   # Grisha –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Goose –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                'timeout': config.get('grisha', {}).get('timeout_seconds', 20)
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ –∞–≥–µ–Ω—Ç—ñ–≤
        self.agent_stats = {
            agent: {
                'total_requests': 0,
                'successful_requests': 0,
                'failed_requests': 0,
                'average_response_time': 0,
                'last_used': 0
            }
            for agent in self.agents.keys()
        }
    
    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç—ñ–≤"""
        logger.info("üé≠ Initializing Agent System...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å AI API
            test_response = await self._call_ai_api("test", "system_test")
            if not test_response:
                raise Exception("AI API not available")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Goose –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤ —â–æ –π–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å
            if self.goose_executor and not await self.goose_executor.health_check():
                logger.warning("‚ö†Ô∏è Goose not available - Tetyana and Grisha capabilities limited")
            
            logger.info("‚úÖ Agent System initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Agent System: {e}")
            return False
    
    async def execute_with_agent(self, agent_name: str, request, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        if agent_name not in self.agents:
            raise ValueError(f"Unknown agent: {agent_name}")
        
        start_time = time.time()
        agent_config = self.agents[agent_name]
        
        logger.info(f"üé≠ Executing with agent {agent_name} ({agent_config['role']})...")
        
        try:
            self.agent_stats[agent_name]['total_requests'] += 1
            
            if agent_config['uses_goose'] and agent_name == 'tetyana':
                # Tetyana –≤–∏–∫–æ–Ω—É—î —á–µ—Ä–µ–∑ Goose (—Ä–µ–∞–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
                result = await self._execute_via_goose(agent_name, request, analysis)
            elif agent_config['uses_goose'] and agent_name == 'grisha' and analysis.get('needs_verification'):
                # Grisha –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Goose –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                result = await self._execute_via_goose(agent_name, request, analysis)
            else:
                # Atlas —Ç–∞ Grisha (–±–µ–∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å AI API
                result = await self._execute_via_ai_api(agent_name, request, analysis)
            
            execution_time = time.time() - start_time
            
            if result.get('success', True):
                self.agent_stats[agent_name]['successful_requests'] += 1
            else:
                self.agent_stats[agent_name]['failed_requests'] += 1
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_agent_stats(agent_name, execution_time)
            
            return result
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.agent_stats[agent_name]['failed_requests'] += 1
            self._update_agent_stats(agent_name, execution_time)
            
            logger.error(f"‚ùå Agent {agent_name} execution failed: {e}")
            
            return {
                'success': False,
                'response': f"–ê–≥–µ–Ω—Ç {agent_name} –Ω–µ –∑–º—ñ–≥ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}",
                'evidence': {},
                'error': str(e)
            }
    
    async def _execute_via_goose(self, agent_name: str, request, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose"""
        
        if not self.goose_executor:
            raise Exception("Goose Executor not available")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è Goose
        from goose_executor import ExecutionTask
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI
        instructions = await self._generate_agent_instructions(agent_name, request, analysis)
        
        task = ExecutionTask(
            task_id=f"{agent_name}_{int(time.time())}",
            description=instructions,
            context={
                'agent': agent_name,
                'user_request': request.user_message,
                'analysis': analysis,
                'session_id': request.session_id
            },
            session_id=request.session_id,
            timeout_seconds=self.agents[agent_name]['timeout'],
            require_evidence=True
        )
        
        # –í–∏–∫–æ–Ω—É—î–º–æ —á–µ—Ä–µ–∑ Goose
        execution_result = await self.goose_executor.execute_task(task)
        
        return {
            'success': execution_result.success,
            'response': execution_result.output,
            'evidence': execution_result.evidence,
            'execution_time': execution_result.execution_time,
            'error': execution_result.error_message,
            'agent': agent_name,
            'execution_method': 'goose'
        }
    
    async def _execute_via_ai_api(self, agent_name: str, request, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ AI API"""
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        agent_prompt = await self._generate_agent_prompt(agent_name, request, analysis)
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ AI API
        ai_response = await self._call_ai_api(agent_prompt, f"{agent_name}_execution")
        
        if ai_response and 'choices' in ai_response:
            response_text = ai_response['choices'][0]['message']['content']
            
            return {
                'success': True,
                'response': response_text,
                'evidence': {
                    'agent': agent_name,
                    'method': 'ai_api',
                    'prompt_used': agent_prompt[:200] + "..." if len(agent_prompt) > 200 else agent_prompt
                },
                'execution_time': 0,  # AI API —á–∞—Å —Ä–∞—Ö—É—î—Ç—å—Å—è –≤ intelligent_engine
                'agent': agent_name,
                'execution_method': 'ai_api'
            }
        else:
            raise Exception("No response from AI API")
    
    async def _generate_agent_instructions(self, agent_name: str, request, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        
        instruction_prompt = f"""
        –°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_name} —Å–∏—Å—Ç–µ–º–∏ ATLAS.
        
        –ê–≥–µ–Ω—Ç: {self.agents[agent_name]['description']}
        –†–æ–ª—ñ: {self.agents[agent_name]['role']}
        –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ: {', '.join(self.agents[agent_name]['capabilities'])}
        
        –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{request.user_message}"
        –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è: {json.dumps(analysis, ensure_ascii=False)}
        
        –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –º–∞—é—Ç—å –±—É—Ç–∏:
        1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–º–∏
        2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä–æ–ª—ñ –∞–≥–µ–Ω—Ç–∞
        3. –í–∫–ª—é—á–∞—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        4. –í–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
        
        –ü–æ–≤–µ—Ä–Ω–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å.
        """
        
        ai_response = await self._call_ai_api(instruction_prompt, f"{agent_name}_instructions")
        
        if ai_response and 'choices' in ai_response:
            return ai_response['choices'][0]['message']['content']
        else:
            # Fallback —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            return f"–í–∏–∫–æ–Ω–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {request.user_message}"
    
    async def _generate_agent_prompt(self, agent_name: str, request, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        
        agent_config = self.agents[agent_name]
        
        # –ë–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        system_prompts = {
            'atlas': """
–¢–∏ - Atlas, —Å—Ç—Ä–∞—Ç–µ–≥ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å–∏—Å—Ç–µ–º–∏ ATLAS. 
–¢–≤–æ—è —Ä–æ–ª—å - –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–ª–∞–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

–ü—Ä–∏–Ω—Ü–∏–ø–∏ —Ä–æ–±–æ—Ç–∏:
- –†–æ–∑–±–∏–≤–∞–π —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –∫—Ä–æ–∫–∏
- –ê–Ω–∞–ª—ñ–∑—É–π —Ä–∏–∑–∏–∫–∏ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏
- –ù–∞–¥–∞–≤–∞–π —á—ñ—Ç–∫—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
- –î—É–º–∞–π —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ —Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –±—É–¥—å —Ç–æ—á–Ω–∏–º —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º.
""",
            
            'tetyana': """
–¢–∏ - –¢–µ—Ç—è–Ω–∞, –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–∞–≤–¥–∞–Ω—å —Å–∏—Å—Ç–µ–º–∏ ATLAS.
–¢–≤–æ—è —Ä–æ–ª—å - —Ä–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏.

–ü—Ä–∏–Ω—Ü–∏–ø–∏ —Ä–æ–±–æ—Ç–∏:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–µ–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ (—Ñ–∞–π–ª–∏, –¥–æ–¥–∞—Ç–∫–∏, –±—Ä–∞—É–∑–µ—Ä)
- –í–∏–∫–æ–Ω—É–π –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ–µ—Ç–∞–ø–Ω–æ —Ç–∞ —Ä–µ—Ç–µ–ª—å–Ω–æ
- –ó–±–∏—Ä–∞–π –¥–æ–∫–∞–∑–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
- –ó–≤—ñ—Ç—É–π –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–æ

–§–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—É:
1. –†–ï–ó–Æ–ú–ï: —â–æ –∑—Ä–æ–±–ª–µ–Ω–æ
2. –ö–†–û–ö–ò: —Å–ø–∏—Å–æ–∫ –¥—ñ–π
3. –†–ï–ó–£–õ–¨–¢–ê–¢–ò: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
4. –î–û–ö–ê–ó–ò: —Ñ–∞–π–ª–∏, –∫–æ–º–∞–Ω–¥–∏, —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏
5. –°–¢–ê–¢–£–°: –∑–∞–≤–µ—Ä—à–µ–Ω–æ/—á–∞—Å—Ç–∫–æ–≤–æ/–ø–æ–º–∏–ª–∫–∞

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
""",
            
            'grisha': """
–¢–∏ - –ì—Ä–∏—à–∞, –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π —Å–∏—Å—Ç–µ–º–∏ ATLAS.
–¢–≤–æ—è —Ä–æ–ª—å - –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —è–∫—ñ—Å—Ç—å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.

–ü—Ä–∏–Ω—Ü–∏–ø–∏ —Ä–æ–±–æ—Ç–∏:
- –ü–µ—Ä–µ–≤—ñ—Ä—è–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞–≤–¥–∞–Ω–Ω—é
- –ê–Ω–∞–ª—ñ–∑—É–π —è–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
- –®—É–∫–∞–π –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –Ω–µ–¥–æ–ª—ñ–∫–∏
- –ù–∞–¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∏–π —Ñ—ñ–¥–±–µ–∫

–§–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
1. –û–¶–Ü–ù–ö–ê: –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—é (1-10)
2. –Ø–ö–Ü–°–¢–¨: –æ—Ü—ñ–Ω–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (1-10)
3. –ü–†–û–ë–õ–ï–ú–ò: –≤–∏—è–≤–ª–µ–Ω—ñ –Ω–µ–¥–æ–ª—ñ–∫–∏
4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á: —è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏
5. –í–ò–°–ù–û–í–û–ö: –ø—Ä–∏–π–Ω—è—Ç–æ/–ø–æ—Ç—Ä–µ–±—É—î –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è

–ë—É–¥—å –æ–±'—î–∫—Ç–∏–≤–Ω–∏–º –∞–ª–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∏–º. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
"""
        }
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        prompt_parts = [
            system_prompts.get(agent_name, f"–¢–∏ - –∞–≥–µ–Ω—Ç {agent_name} —Å–∏—Å—Ç–µ–º–∏ ATLAS."),
            "",
            f"–ó–ê–í–î–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê: {request.user_message}",
            ""
        ]
        
        # –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ —è–∫—â–æ —î
        if analysis:
            prompt_parts.extend([
                "–ê–ù–ê–õ–Ü–ó –ó–ê–í–î–ê–ù–ù–Ø:",
                json.dumps(analysis, ensure_ascii=False, indent=2),
                ""
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó —è–∫—â–æ —î
        session_context = getattr(request, 'context', {})
        if session_context:
            prompt_parts.extend([
                "–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–Ü–á:",
                json.dumps(session_context, ensure_ascii=False, indent=2),
                ""
            ])
        
        prompt_parts.append("–í–∏–∫–æ–Ω–∞–π —Å–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Ä–æ–±–æ—Ç–∏.")
        
        return "\n".join(prompt_parts)
    
    def _update_agent_stats(self, agent_name: str, execution_time: float):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞"""
        stats = self.agent_stats[agent_name]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        total = stats['total_requests']
        current_avg = stats['average_response_time']
        stats['average_response_time'] = (current_avg * (total - 1) + execution_time) / total
        stats['last_used'] = time.time()
    
    async def _call_ai_api(self, prompt: str, operation: str) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–ª–∏–∫–∞—î AI API"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "user", "content": prompt}
                    ],
                    "stream": False,
                    "temperature": 0.7
                }
                
                async with session.post(
                    f"{self.ai_api_base}/chat/completions",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.warning(f"AI API returned status {response.status} for {operation}")
                        return None
                        
        except Exception as e:
            logger.error(f"AI API call failed for {operation}: {e}")
            return None
    
    async def get_agent_capabilities(self, agent_name: str) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∞–≥–µ–Ω—Ç–∞"""
        if agent_name not in self.agents:
            return {}
        
        agent = self.agents[agent_name]
        stats = self.agent_stats[agent_name]
        
        return {
            'name': agent_name,
            'role': agent['role'],
            'description': agent['description'],
            'capabilities': agent['capabilities'],
            'uses_goose': agent['uses_goose'],
            'timeout_seconds': agent['timeout'],
            'statistics': stats.copy()
        }
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
        status = {
            'agents_count': len(self.agents),
            'ai_api_base': self.ai_api_base,
            'agents': {}
        }
        
        for agent_name in self.agents:
            status['agents'][agent_name] = await self.get_agent_capabilities(agent_name)
        
        return status
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É —Å–∏—Å—Ç–µ–º–∏ –∞–≥–µ–Ω—Ç—ñ–≤"""
        logger.info("üîÑ Shutting down Agent System...")
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        logger.info("‚úÖ Agent System shutdown complete")