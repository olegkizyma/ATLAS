#!/usr/bin/env python3
"""
ATLAS Voice System
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è TTS/STT –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
"""

import asyncio
import json
import logging
import time
import tempfile
import os
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
import aiohttp

logger = logging.getLogger('atlas.voice_system')

@dataclass
class VoiceRequest:
    """–ó–∞–ø–∏—Ç –Ω–∞ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è"""
    text: str
    agent: str = 'atlas'
    voice: str = 'dmytro'
    language: str = 'uk-UA'

@dataclass 
class STTRequest:
    """–ó–∞–ø–∏—Ç –Ω–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏"""
    audio_file: str
    language: str = 'uk'
    model: str = 'large-v3'

class VoiceSystem:
    """–°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ TTS —Ç–∞ STT"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        
        # TTS –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.tts_enabled = config.get('tts_enabled', True)
        self.tts_base_url = config.get('tts_url', 'http://127.0.0.1:3001')
        self.tts_timeout = config.get('tts_timeout_seconds', 10)
        
        # STT –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è  
        self.stt_enabled = config.get('stt_enabled', True)
        self.stt_timeout = config.get('stt_timeout_seconds', 15)
        
        # –ì–æ–ª–æ—Å–∏ –∞–≥–µ–Ω—Ç—ñ–≤
        self.agent_voices = {
            'atlas': {
                'voice': 'dmytro',
                'signature': '[ATLAS]',
                'color': '#00ff00',
                'rate': 1.0,
                'pitch': 1.0
            },
            'tetyana': {
                'voice': 'tetiana',
                'signature': '[–¢–ï–¢–Ø–ù–ê]', 
                'color': '#00ffff',
                'rate': 1.0,
                'pitch': 1.05
            },
            'grisha': {
                'voice': 'mykyta',
                'signature': '[–ì–†–ò–®–ê]',
                'color': '#ffff00',
                'rate': 1.1,
                'pitch': 0.9
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'tts_requests': 0,
            'tts_successful': 0,
            'tts_failed': 0,
            'stt_requests': 0,
            'stt_successful': 0,
            'stt_failed': 0,
            'average_tts_time': 0,
            'average_stt_time': 0
        }
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        self.tts_available = False
        self.stt_available = False
        self.last_health_check = 0
        self.health_check_interval = 60
    
    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–æ–ª–æ—Å–æ–≤—É —Å–∏—Å—Ç–µ–º—É"""
        logger.info("üé§ Initializing Voice System...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å TTS
            if self.tts_enabled:
                self.tts_available = await self._check_tts_health()
                if self.tts_available:
                    logger.info("‚úÖ TTS system available")
                else:
                    logger.warning("‚ö†Ô∏è TTS system not available")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å STT (Whisper)
            if self.stt_enabled:
                self.stt_available = await self._check_stt_health()
                if self.stt_available:
                    logger.info("‚úÖ STT system available")
                else:
                    logger.warning("‚ö†Ô∏è STT system not available")
            
            logger.info("‚úÖ Voice System initialized")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Voice System: {e}")
            return False
    
    async def _check_tts_health(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è TTS —Å–∏—Å—Ç–µ–º–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.tts_base_url}/health",
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    return response.status == 200
        except:
            try:
                # Fallback - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ /voices endpoint
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                        f"{self.tts_base_url}/voices",
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as response:
                        return response.status == 200
            except:
                return False
    
    async def _check_stt_health(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è STT —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å faster-whisper
            import faster_whisper
            return True
        except ImportError:
            logger.warning("faster-whisper not available")
            return False
    
    async def health_check(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        current_time = time.time()
        
        if current_time - self.last_health_check < self.health_check_interval:
            return self.tts_available or self.stt_available
        
        if self.tts_enabled:
            self.tts_available = await self._check_tts_health()
        
        if self.stt_enabled:
            self.stt_available = await self._check_stt_health()
        
        self.last_health_check = current_time
        return self.tts_available or self.stt_available
    
    async def synthesize_speech(self, request: VoiceRequest) -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑—É—î –º–æ–≤—É –∑ —Ç–µ–∫—Å—Ç—É"""
        if not self.tts_enabled or not self.tts_available:
            logger.warning("TTS not available")
            return None
        
        start_time = time.time()
        self.stats['tts_requests'] += 1
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            agent_config = self.agent_voices.get(request.agent, self.agent_voices['atlas'])
            
            # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –ø—ñ–¥–ø–∏—Å—ñ–≤ –∞–≥–µ–Ω—Ç—ñ–≤
            clean_text = self._clean_text_for_tts(request.text, agent_config['signature'])
            
            if not clean_text.strip():
                logger.warning("Empty text for TTS")
                return None
            
            # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ TTS API
            tts_payload = {
                'text': clean_text,
                'voice': request.voice or agent_config['voice'],
                'speed': agent_config.get('rate', 1.0),
                'return_audio': True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.tts_base_url}/tts",
                    json=tts_payload,
                    timeout=aiohttp.ClientTimeout(total=self.tts_timeout)
                ) as response:
                    
                    if response.status == 200:
                        audio_data = await response.read()
                        
                        execution_time = time.time() - start_time
                        self._update_tts_stats(execution_time, True)
                        
                        logger.info(f"‚úÖ TTS synthesis successful: {len(audio_data)} bytes in {execution_time:.2f}s")
                        return audio_data
                    else:
                        error_text = await response.text()
                        logger.error(f"TTS API error {response.status}: {error_text}")
                        
        except Exception as e:
            logger.error(f"‚ùå TTS synthesis failed: {e}")
        
        execution_time = time.time() - start_time
        self._update_tts_stats(execution_time, False)
        return None
    
    def _clean_text_for_tts(self, text: str, signature: str) -> str:
        """–û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –¥–ª—è TTS"""
        import re
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∏ –∞–≥–µ–Ω—Ç—ñ–≤
        clean_text = text.replace(signature, '').strip()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏
        clean_text = re.sub(r'\[[^\]]+\]\s*', '', clean_text)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–¥–º—ñ—Ä–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        
        return clean_text
    
    async def transcribe_audio(self, request: STTRequest) -> Optional[Dict[str, Any]]:
        """–†–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É –∑ –∞—É–¥—ñ–æ"""
        if not self.stt_enabled or not self.stt_available:
            logger.warning("STT not available")
            return None
        
        start_time = time.time()
        self.stats['stt_requests'] += 1
        
        try:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Whisper
            from faster_whisper import WhisperModel
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–æ–¥–µ–ª—å (–∫–µ—à—É—î—Ç—å—Å—è)
            if not hasattr(self, '_whisper_model'):
                device = 'cpu'  # –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                compute_type = 'int8'
                
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—Ä–∞—â—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                try:
                    import torch
                    if torch.backends.mps.is_available():
                        device = 'auto'  # Metal –Ω–∞ macOS
                    elif torch.cuda.is_available():
                        device = 'cuda'
                        compute_type = 'float16'
                except:
                    pass
                
                logger.info(f"Loading Whisper model {request.model} on {device}")
                self._whisper_model = WhisperModel(
                    request.model,
                    device=device,
                    compute_type=compute_type
                )
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ –∞—É–¥—ñ–æ
            segments, info = self._whisper_model.transcribe(
                request.audio_file,
                beam_size=5,
                language=request.language,
                temperature=0.0
            )
            
            # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            full_text = ""
            segments_list = []
            
            for segment in segments:
                segment_data = {
                    'start': segment.start,
                    'end': segment.end,
                    'text': segment.text
                }
                segments_list.append(segment_data)
                full_text += segment.text
            
            execution_time = time.time() - start_time
            self._update_stt_stats(execution_time, True)
            
            result = {
                'success': True,
                'text': full_text.strip(),
                'language': info.language,
                'language_probability': info.language_probability,
                'duration': info.duration,
                'segments': segments_list,
                'execution_time': execution_time
            }
            
            logger.info(f"‚úÖ STT transcription successful: '{full_text[:100]}...' in {execution_time:.2f}s")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå STT transcription failed: {e}")
            execution_time = time.time() - start_time
            self._update_stt_stats(execution_time, False)
            
            return {
                'success': False,
                'error': str(e),
                'execution_time': execution_time
            }
    
    def _update_tts_stats(self, execution_time: float, success: bool):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TTS"""
        if success:
            self.stats['tts_successful'] += 1
        else:
            self.stats['tts_failed'] += 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å
        total = self.stats['tts_requests']
        current_avg = self.stats['average_tts_time']
        self.stats['average_tts_time'] = (current_avg * (total - 1) + execution_time) / total
    
    def _update_stt_stats(self, execution_time: float, success: bool):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É STT"""
        if success:
            self.stats['stt_successful'] += 1
        else:
            self.stats['stt_failed'] += 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å
        total = self.stats['stt_requests']
        current_avg = self.stats['average_stt_time']
        self.stats['average_stt_time'] = (current_avg * (total - 1) + execution_time) / total
    
    async def get_available_voices(self) -> List[Dict[str, Any]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤"""
        if not self.tts_available:
            return []
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.tts_base_url}/voices",
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç
                        voices = []
                        raw_voices = data if isinstance(data, list) else data.get('voices', [])
                        
                        for voice in raw_voices:
                            if isinstance(voice, dict):
                                voices.append({
                                    'name': voice.get('name', voice.get('id', '')),
                                    'locale': voice.get('locale', voice.get('lang', 'uk-UA'))
                                })
                            elif isinstance(voice, str):
                                voices.append({
                                    'name': voice,
                                    'locale': 'uk-UA'
                                })
                        
                        return voices
        except Exception as e:
            logger.error(f"Failed to get available voices: {e}")
        
        # Fallback —Å–ø–∏—Å–æ–∫
        return [
            {'name': 'dmytro', 'locale': 'uk-UA'},
            {'name': 'tetiana', 'locale': 'uk-UA'},
            {'name': 'mykyta', 'locale': 'uk-UA'},
            {'name': 'oleksa', 'locale': 'uk-UA'}
        ]
    
    async def prepare_voice_response(self, text: str) -> Dict[str, Any]:
        """–ü—ñ–¥–≥–æ—Ç–æ–≤—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è"""
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞ –∑–∞ –ø—ñ–¥–ø–∏—Å–æ–º
        agent = 'atlas'
        for agent_name, config in self.agent_voices.items():
            if config['signature'] in text:
                agent = agent_name
                break
        
        # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç
        agent_config = self.agent_voices[agent]
        clean_text = self._clean_text_for_tts(text, agent_config['signature'])
        
        return {
            'success': True,
            'text': clean_text,
            'agent': agent,
            'voice': agent_config['voice'],
            'signature': agent_config['signature']
        }
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        await self.health_check()  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        
        return {
            'tts_enabled': self.tts_enabled,
            'tts_available': self.tts_available,
            'tts_url': self.tts_base_url,
            'stt_enabled': self.stt_enabled, 
            'stt_available': self.stt_available,
            'agent_voices': self.agent_voices,
            'statistics': self.stats.copy(),
            'last_health_check': self.last_health_check
        }
    
    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        logger.info("üîÑ Shutting down Voice System...")
        
        # –û—á–∏—â–∞—î–º–æ Whisper –º–æ–¥–µ–ª—å —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞
        if hasattr(self, '_whisper_model'):
            del self._whisper_model
        
        logger.info("‚úÖ Voice System shutdown complete")