#!/bin/bash

echo "üîç ATLAS Context Diagnostics Tool"
echo "=================================="
echo ""

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±–ª–∏–∑–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤
estimate_tokens() {
    local text="$1"
    local char_count=${#text}
    echo $((char_count / 4))
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ token limit
echo "üìä –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫ token limit –≤ –ª–æ–≥–∞—Ö:"
echo "-------------------------------------"

LOG_FILES=(
    "frontend_new/orchestrator/server.log"
    "goose/goosed.log" 
    "goose/goosed_agent.log"
    "atlas_start.log"
    "frontend/atlas_frontend.log"
)

TOKEN_ERRORS=0
for log_file in "${LOG_FILES[@]}"; do
    if [ -f "$log_file" ]; then
        errors=$(grep -i "token.*exceed\|prompt.*token.*count\|context.*limit\|model_max_prompt_tokens" "$log_file" 2>/dev/null | wc -l)
        if [ $errors -gt 0 ]; then
            echo "‚ùå $log_file: $errors token limit errors"
            TOKEN_ERRORS=$((TOKEN_ERRORS + errors))
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–º–∏–ª–∫—É
            echo "   –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞:"
            grep -i "token.*exceed\|prompt.*token.*count\|context.*limit\|model_max_prompt_tokens" "$log_file" 2>/dev/null | tail -1 | sed 's/^/   /'
        else
            echo "‚úÖ $log_file: –ü–æ–º–∏–ª–æ–∫ token limit –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        fi
    else
        echo "‚ö†Ô∏è  $log_file: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
done

echo ""
echo "üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
echo "  ‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–º–∏–ª–æ–∫ token limit: $TOKEN_ERRORS"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
echo ""
echo "‚öôÔ∏è  –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:"
echo "-----------------------------------"

# Env variables
ENV_VARS=(
    "ORCH_MAX_MISTRAL_USER_CHARS"
    "ORCH_MAX_MISTRAL_SYSTEM_CHARS" 
    "ORCH_MAX_TASKSPEC_SUMMARY_CHARS"
    "GOOSE_CONTEXT_LIMIT"
    "GOOSE_CONTEXT_STRATEGY"
)

for var in "${ENV_VARS[@]}"; do
    value=$(printenv "$var" 2>/dev/null || echo "–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    echo "  ‚Ä¢ $var: $value"
done

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
echo ""
echo "üìÅ –†–æ–∑–º—ñ—Ä–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:"
echo "----------------------------------"

CONFIG_FILES=(
    "config.yaml"
    "config2.yaml"
    "goose_ui_config.json"
    "frontend_new/config/.env"
    "frontend_new/orchestrator/intelligeich.json"
)

for config_file in "${CONFIG_FILES[@]}"; do
    if [ -f "$config_file" ]; then
        size=$(wc -c < "$config_file")
        tokens=$(estimate_tokens "$(cat "$config_file")")
        echo "  ‚Ä¢ $config_file: ${size} —Å–∏–º–≤–æ–ª—ñ–≤ (~${tokens} —Ç–æ–∫–µ–Ω—ñ–≤)"
    fi
done

# –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ—Ü–µ—Å—ñ–≤
echo ""
echo "üîÑ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:"
echo "------------------"

if pgrep -f "goose" > /dev/null; then
    echo "‚úÖ Goose –ø—Ä–æ—Ü–µ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ"
    echo "  –ü—Ä–æ—Ü–µ—Å–∏: $(pgrep -f 'goose' | wc -l)"
else
    echo "‚ùå Goose –ø—Ä–æ—Ü–µ—Å–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ"
fi

if pgrep -f "atlas" > /dev/null; then
    echo "‚úÖ Atlas –ø—Ä–æ—Ü–µ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ"
else
    echo "‚ùå Atlas –ø—Ä–æ—Ü–µ—Å–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ"  
fi

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
echo ""
echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
echo "----------------"

if [ $TOKEN_ERRORS -gt 0 ]; then
    echo "üîß –í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏ token limit. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è:"
    echo "   1. –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: ./apply_context_optimization.sh"
    echo "   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É: ./stop_stack.sh && ./start_stack.sh"
    echo "   3. –ú–æ–Ω—ñ—Ç–æ—Ä–∏—Ç–∏ –ª–æ–≥–∏: tail -f frontend_new/orchestrator/server.log"
else
    echo "‚úÖ –ü–æ–º–∏–ª–æ–∫ token limit –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ"
fi

echo ""
echo "üèÉ‚Äç‚ôÇÔ∏è –î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π –≤–∏–∫–æ–Ω–∞–π—Ç–µ:"
echo "   ./apply_context_optimization.sh"
