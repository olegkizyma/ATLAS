{
  "id": "java-kotlin-test-migration",
  "title": "Migrate Java Tests to Kotlin",
  "description": "Select Java tests and migrate them to Kotlin, including compilation verification",
  "category": "technical",
  "job": "engineering",
  "example_prompt": "Please help migrate Java tests to Kotlin by:\n1. Finding and selecting 5 Java test files\n2. Converting each test to Kotlin while maintaining functionality\n3. Removing original Java files\n4. Verifying compilation with gradle\n5. Generating migration diffs\n\nFor each test file:\n- Create equivalent Kotlin test\n- Maintain test structure and assertions\n- Verify compilation success\n- Generate diff for review",
  "example_result": "I'll help you migrate the Java tests to Kotlin. Here's the migration process for one test file:\n\nOriginal Java Test:\n```java\n// UserServiceTest.java\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class UserServiceTest {\n    private final UserRepository userRepository = mock(UserRepository.class);\n    private final EmailService emailService = mock(EmailService.class);\n    private final UserService userService = new UserService(userRepository, emailService);\n\n    @Test\n    public void createUser_WithValidData_ShouldSucceed() {\n        // Given\n        UserDTO userDTO = new UserDTO(\"john@example.com\", \"John Doe\");\n        User user = new User(userDTO.getEmail(), userDTO.getName());\n        when(userRepository.findByEmail(userDTO.getEmail())).thenReturn(null);\n        when(userRepository.save(any(User.class))).thenReturn(user);\n\n        // When\n        User result = userService.createUser(userDTO);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(userDTO.getEmail(), result.getEmail());\n        assertEquals(userDTO.getName(), result.getName());\n        verify(emailService).sendWelcomeEmail(user);\n    }\n\n    @Test\n    public void createUser_WithExistingEmail_ShouldThrowException() {\n        // Given\n        UserDTO userDTO = new UserDTO(\"existing@example.com\", \"John Doe\");\n        when(userRepository.findByEmail(userDTO.getEmail()))\n            .thenReturn(new User(userDTO.getEmail(), \"Existing User\"));\n\n        // When/Then\n        assertThrows(UserAlreadyExistsException.class, () -> {\n            userService.createUser(userDTO);\n        });\n        verify(userRepository, never()).save(any());\n        verify(emailService, never()).sendWelcomeEmail(any());\n    }\n}\n```\n\nMigrated Kotlin Test:\n```kotlin\n// UserServiceTest.kt\nimport org.junit.jupiter.api.Test\nimport org.junit.jupiter.api.assertThrows\nimport org.mockito.kotlin.*\nimport kotlin.test.assertEquals\nimport kotlin.test.assertNotNull\n\nclass UserServiceTest {\n    private val userRepository: UserRepository = mock()\n    private val emailService: EmailService = mock()\n    private val userService = UserService(userRepository, emailService)\n\n    @Test\n    fun `create user with valid data should succeed`() {\n        // Given\n        val userDTO = UserDTO(email = \"john@example.com\", name = \"John Doe\")\n        val user = User(email = userDTO.email, name = userDTO.name)\n        whenever(userRepository.findByEmail(userDTO.email)).thenReturn(null)\n        whenever(userRepository.save(any())).thenReturn(user)\n\n        // When\n        val result = userService.createUser(userDTO)\n\n        // Then\n        assertNotNull(result)\n        assertEquals(userDTO.email, result.email)\n        assertEquals(userDTO.name, result.name)\n        verify(emailService).sendWelcomeEmail(user)\n    }\n\n    @Test\n    fun `create user with existing email should throw exception`() {\n        // Given\n        val userDTO = UserDTO(email = \"existing@example.com\", name = \"John Doe\")\n        whenever(userRepository.findByEmail(userDTO.email))\n            .thenReturn(User(email = userDTO.email, name = \"Existing User\"))\n\n        // When/Then\n        assertThrows<UserAlreadyExistsException> {\n            userService.createUser(userDTO)\n        }\n        verify(userRepository, never()).save(any())\n        verify(emailService, never()).sendWelcomeEmail(any())\n    }\n}\n```\n\nKey Changes Made:\n1. File Extension: .java → .kt\n2. Class Declaration: Removed 'public'\n3. Test Methods:\n   - Removed 'public void'\n   - Added backtick names for readability\n   - Used Kotlin's string templates\n4. Assertions:\n   - Imported from kotlin.test\n   - Used Kotlin's assertThrows\n5. Mocking:\n   - Used mockito-kotlin extensions\n   - Replaced when/thenReturn with whenever\n6. Properties:\n   - Converted to Kotlin property syntax\n   - Used constructor parameter properties\n7. Named Parameters:\n   - Added for better readability\n   - Especially in object creation\n\nVerification Steps:\n```bash\n# Compile and test\n./gradlew :service:test --tests \"com.example.service.UserServiceTest\"\n\n# Test output\n> Task :service:test\nBUILD SUCCESSFUL in 3s\n4 actionable tasks: 4 executed\n```\n\nMigration Summary:\n1. ✅ Syntax converted to idiomatic Kotlin\n2. ✅ All tests passing\n3. ✅ Maintained test coverage\n4. ✅ Improved readability with Kotlin features\n5. ✅ Verified with Gradle build\n\nWould you like me to proceed with migrating the remaining test files?",
  "extensions": [
    {
      "name": "Developer",
      "command": "developer",
      "is_builtin": true,
      "environmentVariables": [

      ]
    }
  ]
}
