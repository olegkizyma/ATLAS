{
  "id": "multi-project-security-audit",
  "title": "Multi-Project Security Audit",
  "description": "Perform comprehensive security analysis across multiple projects to identify and fix vulnerabilities",
  "category": "technical",
  "job": "engineering",
  "example_prompt": "Please analyze these codebases for security issues:\n\n1. Project Directories:\n- [Directory Path 1]\n- [Directory Path 2]\n- [Directory Path 3]\n\n2. Look for:\n- Hardcoded credentials (API keys, passwords, secrets)\n- Insecure cryptographic practices\n- SQL injection vulnerabilities\n- Exposed configuration files\n- Insecure session handling\n- Logging of sensitive data\n- Outdated dependencies\n- Unsafe authentication methods\n\n3. For each vulnerability found:\n- Show the problematic code\n- Explain the security risk\n- Provide a secure implementation\n- Help apply and test the fixes\n\n4. Create a detailed security report including:\n- Critical findings by project\n- Risk severity levels\n- File locations and snippets\n- Applied fixes and improvements\n- Verification steps taken",
  "example_result": "# Security Audit Report\n\n## Executive Summary\n\nAudit completed across 3 projects. Found:\n- 4 Critical vulnerabilities\n- 7 High-risk issues\n- 12 Medium-risk issues\n- 8 Low-risk concerns\n\n## Project 1: E-commerce API\n\n### Critical Findings\n\n1. Hardcoded AWS Credentials\n```python\n# /app/config/aws.py - Line 23\n# VULNERABLE CODE\naws_access_key = 'AKIA1234567890ABCDEF'\naws_secret_key = 'abcd1234EFGH5678ijkl9012mnop3456QRST7890'\n\n# SECURE IMPLEMENTATION\naws_access_key = os.environ.get('AWS_ACCESS_KEY')\naws_secret_key = os.environ.get('AWS_SECRET_KEY')\n\nif not all([aws_access_key, aws_secret_key]):\n    raise ConfigurationError('AWS credentials not properly configured')\n```\n\nRisk: Critical\n- Exposed credentials in version control\n- Potential unauthorized AWS access\n- Financial and data security implications\n\nFix Applied:\n```bash\n# 1. Removed credentials from code\n# 2. Added to environment variables\n# 3. Updated deployment configurations\n# 4. Rotated AWS keys\n```\n\n2. SQL Injection Vulnerability\n```python\n# /app/models/user.py - Line 156\n# VULNERABLE CODE\ndef find_by_username(username):\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    return db.execute(query)\n\n# SECURE IMPLEMENTATION\ndef find_by_username(username):\n    query = \"SELECT * FROM users WHERE username = %s\"\n    return db.execute(query, (username,))\n```\n\nRisk: Critical\n- SQL injection possible\n- Potential data breach\n- Unauthorized data access\n\n## Project 2: Admin Dashboard\n\n### High Risk Findings\n\n1. Insecure Session Configuration\n```javascript\n// /src/config/session.js - Line 45\n// VULNERABLE CODE\napp.use(session({\n  secret: 'my-secret-key',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n\n// SECURE IMPLEMENTATION\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'strict',\n    maxAge: 3600000 // 1 hour\n  }\n}));\n```\n\n2. Outdated Dependencies\n```json\n// package.json\n{\n  \"dependencies\": {\n    \"express\": \"4.16.1\",        // Vulnerable version\n    \"moment\": \"2.24.0\",         // Known security issues\n    \"lodash\": \"4.17.15\"        // Multiple CVEs\n  }\n}\n```\n\nUpdated to:\n```json\n{\n  \"dependencies\": {\n    \"express\": \"4.18.2\",\n    \"moment\": \"2.29.4\",\n    \"lodash\": \"4.17.21\"\n  }\n}\n```\n\n## Project 3: Mobile API\n\n### High Risk Findings\n\n1. Insecure Password Hashing\n```java\n// /src/main/java/com/example/auth/PasswordUtil.java\n// VULNERABLE CODE\npublic String hashPassword(String password) {\n    return DigestUtils.md5Hex(password);\n}\n\n// SECURE IMPLEMENTATION\npublic String hashPassword(String password) {\n    return BCrypt.hashpw(password, BCrypt.gensalt(12));\n}\n```\n\n2. Sensitive Data Exposure\n```java\n// /src/main/java/com/example/logging/AuditLogger.java\n// VULNERABLE CODE\nlogger.info(\"User login: \" + username + \", password: \" + password);\n\n// SECURE IMPLEMENTATION\nlogger.info(\"User login attempt: {}\" username);\n```\n\n## Applied Security Improvements\n\n1. Dependency Updates\n```bash\n# Updated all projects to use latest secure versions\nnpm audit fix\ncomposer update\nmvn versions:use-latest-versions\n```\n\n2. Security Headers\n```javascript\n// Added security headers to all projects\napp.use(helmet());\napp.use(hpp());\napp.use(cors(corsOptions));\n```\n\n3. Input Validation\n```python\n# Added request validation\nfrom marshmallow import Schema, fields\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=3))\n    email = fields.Email(required=True)\n```\n\n## Verification Steps\n\n1. Automated Testing\n```bash\n# Run security scans\nnpm audit\nbandit -r .\nSonarQube analysis\n\n# Run penetration tests\nOWASP ZAP scan\nBurp Suite tests\n```\n\n2. Manual Testing\n```\n✓ SQL injection attempts\n✓ XSS payload testing\n✓ CSRF token verification\n✓ Session handling checks\n✓ Password policy enforcement\n```\n\n## Recommendations\n\n1. Immediate Actions:\n```\n- Rotate all exposed credentials\n- Update vulnerable dependencies\n- Enable WAF rules\n- Implement security headers\n```\n\n2. Short-term Improvements:\n```\n- Set up automated security scanning\n- Implement SAST/DAST in CI/CD\n- Add security test cases\n- Update security documentation\n```\n\n3. Long-term Strategy:\n```\n- Regular security training\n- Quarterly security audits\n- Threat modeling for new features\n- Bug bounty program\n```\n\nWould you like me to:\n1. Generate security patches?\n2. Create Jira tickets?\n3. Update security documentation?\n4. Schedule follow-up review?",
  "extensions": [
    {
      "name": "Filesystem",
      "command": "npx -y @modelcontextprotocol/server-filesystem",
      "is_builtin": false,
      "environmentVariables": [

      ]
    },
    {
      "name": "Developer",
      "command": "developer",
      "is_builtin": true,
      "environmentVariables": [

      ]
    }
  ]
}
