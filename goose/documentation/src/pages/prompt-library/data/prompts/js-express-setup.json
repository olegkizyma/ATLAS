{
  "id": "developer-js-express-setup",
  "title": "Scaffold JavaScript Boilerplate",
  "description": "Initialize a new JavaScript project with Express, Mongoose, Nodemon, and Dotenv",
  "category": "technical",
  "job": "engineering",
  "example_prompt": "Set up a new JavaScript project with Express, Mongoose, Nodemon, and Dotenv. Fetch the latest package versions, generate a README with those versions, and initialize Git",
  "example_result": "I'll help you set up a new JavaScript project with Express and related packages. Here's the step-by-step process:\n\n1. Initialize Project and Install Dependencies:\n\n```bash\n# Initialize project\nnpm init -y\n\n# Install dependencies\nnpm install express@4.18.2 mongoose@8.0.3 dotenv@16.3.1\nnpm install --save-dev nodemon@3.0.2\n```\n\n2. Project Structure:\n\n```\nproject-root/\n├── src/\n│   ├── config/\n│   │   └── database.js\n│   ├── models/\n│   │   └── User.js\n│   ├── routes/\n│   │   └── api.js\n│   ├── middleware/\n│   │   └── auth.js\n│   └── app.js\n├── .env\n├── .gitignore\n├── package.json\n└── README.md\n```\n\n3. Configuration Files:\n\n```javascript\n// src/config/database.js\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n```\n\n4. Main Application File:\n\n```javascript\n// src/app.js\nrequire('dotenv').config();\nconst express = require('express');\nconst connectDB = require('./config/database');\n\nconst app = express();\n\n// Connect to database\nconnectDB();\n\n// Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.use('/api', require('./routes/api'));\n\n// Error handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n5. Example Route and Model:\n\n```javascript\n// src/models/User.js\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n```javascript\n// src/routes/api.js\nconst express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\n\nrouter.post('/users', async (req, res) => {\n  try {\n    const user = new User(req.body);\n    await user.save();\n    res.status(201).json(user);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n```\n\n6. Environment Configuration:\n\n```env\n# .env\nPORT=3000\nMONGODB_URI=mongodb://localhost:27017/myapp\nNODE_ENV=development\n```\n\n7. Package.json Scripts:\n\n```json\n{\n  \"name\": \"express-mongoose-starter\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"node src/app.js\",\n    \"dev\": \"nodemon src/app.js\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"mongoose\": \"^8.0.3\",\n    \"dotenv\": \"^16.3.1\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n```\n\n8. Git Configuration:\n\n```bash\n# Initialize Git\ngit init\n\n# Create .gitignore\ncat > .gitignore << EOL\nnode_modules/\n.env\n.DS_Store\nEOL\n\n# Initial commit\ngit add .\ngit commit -m \"Initial commit: Express project setup\"\n```\n\n9. README.md:\n\n```markdown\n# Express Mongoose Starter\n\nA modern Express.js application with MongoDB integration.\n\n## Features\n\n- Express.js 4.18.2 web framework\n- MongoDB integration with Mongoose 8.0.3\n- Environment variable support with Dotenv 16.3.1\n- Development server with Nodemon 3.0.2\n- Structured project layout\n- Basic error handling\n- API route examples\n\n## Getting Started\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Create .env file with required variables\n4. Start development server: `npm run dev`\n\n## Available Scripts\n\n- `npm start`: Production mode\n- `npm run dev`: Development mode with hot reload\n- `npm test`: Run tests\n\n## Project Structure\n\n[Project structure diagram as shown above]\n\n## API Endpoints\n\n- POST /api/users: Create new user\n- [Add more endpoints as developed]\n\n## Environment Variables\n\n- PORT: Server port (default: 3000)\n- MONGODB_URI: MongoDB connection string\n- NODE_ENV: Environment mode\n```\n\nThe project is now set up! Would you like me to:\n1. Add authentication middleware?\n2. Set up testing with Jest?\n3. Add more API endpoints?\n4. Configure CI/CD?",
  "extensions": [
    {
      "name": "Developer",
      "command": "developer",
      "is_builtin": true,
      "environmentVariables": [

      ]
    }
  ]
}
