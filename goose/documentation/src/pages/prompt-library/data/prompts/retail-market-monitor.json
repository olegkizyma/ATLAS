{
  "id": "business-retail-market-monitor",
  "title": "Monitor Top Retailers Market Activity",
  "description": "Generate and maintain an automated dashboard tracking top retailers' digital presence and market activities",
  "category": "business",
  "job": "marketing-content",
  "example_prompt": "1. Search the web for the top 5 most popular retailers.\n2. For each identified retailer, generate a comprehensive report on each retailer's:\n* Website updates\n* New product launches\n* Social media engagement\n* Recent customer reviews\n* Press mentions\n3. Generate an HTML dashboard based on findings for each retailer\n4. Open the dashboard in a browser\n5. Automation Script to pull new results every 30 days",
  "example_result": "I've created a retail market monitoring dashboard. Here's the analysis and implementation:\n\n1. Top Retailers Identified:\n```json\n{\n  \"retailers\": [\n    {\n      \"name\": \"Amazon\",\n      \"market_cap\": \"$1.78T\",\n      \"monthly_visitors\": \"2.7B\"\n    },\n    {\n      \"name\": \"Walmart\",\n      \"market_cap\": \"$420B\",\n      \"monthly_visitors\": \"410M\"\n    },\n    {\n      \"name\": \"Target\",\n      \"market_cap\": \"$65B\",\n      \"monthly_visitors\": \"250M\"\n    },\n    {\n      \"name\": \"Costco\",\n      \"market_cap\": \"$245B\",\n      \"monthly_visitors\": \"120M\"\n    },\n    {\n      \"name\": \"Home Depot\",\n      \"market_cap\": \"$350B\",\n      \"monthly_visitors\": \"170M\"\n    }\n  ]\n}\n```\n\n2. Monitoring Script:\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom datetime import datetime\nimport schedule\nimport time\n\nclass RetailMonitor:\n    def __init__(self, retailers):\n        self.retailers = retailers\n        self.data = {}\n\n    def fetch_website_updates(self, retailer):\n        # Monitor website changes\n        url = f\"https://www.{retailer.lower()}.com\"\n        response = requests.get(url)\n        return {\n            'last_modified': response.headers.get('last-modified'),\n            'content_hash': hash(response.text)\n        }\n\n    def get_social_metrics(self, retailer):\n        # Fetch social media engagement\n        platforms = ['twitter', 'facebook', 'instagram']\n        metrics = {}\n        for platform in platforms:\n            # API calls to fetch metrics\n            metrics[platform] = self.fetch_social_metrics(retailer, platform)\n        return metrics\n\n    def analyze_reviews(self, retailer):\n        # Aggregate customer reviews\n        sources = ['trustpilot', 'google', 'sitejabber']\n        reviews = []\n        for source in sources:\n            reviews.extend(self.fetch_reviews(retailer, source))\n        return self.analyze_sentiment(reviews)\n\n    def generate_report(self):\n        for retailer in self.retailers:\n            self.data[retailer] = {\n                'website': self.fetch_website_updates(retailer),\n                'social': self.get_social_metrics(retailer),\n                'reviews': self.analyze_reviews(retailer),\n                'press': self.fetch_press_mentions(retailer),\n                'timestamp': datetime.now()\n            }\n        return self.data\n\n    def update_dashboard(self):\n        self.generate_report()\n        self.create_html_dashboard()\n```\n\n3. Dashboard HTML Template:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Retail Market Monitor</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body class=\"bg-gray-100\">\n    <div class=\"container mx-auto px-4 py-8\">\n        <h1 class=\"text-3xl font-bold mb-8\">Retail Market Monitor</h1>\n        \n        <!-- Retailer Cards -->\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {% for retailer in retailers %}\n            <div class=\"bg-white rounded-lg shadow-lg p-6\">\n                <h2 class=\"text-xl font-semibold mb-4\">{{ retailer.name }}</h2>\n                \n                <!-- Website Updates -->\n                <div class=\"mb-4\">\n                    <h3 class=\"font-medium\">Website Updates</h3>\n                    <p>Last Modified: {{ retailer.website.last_modified }}</p>\n                </div>\n                \n                <!-- Social Metrics -->\n                <div class=\"mb-4\">\n                    <h3 class=\"font-medium\">Social Engagement</h3>\n                    <canvas id=\"social-chart-{{ retailer.id }}\"></canvas>\n                </div>\n                \n                <!-- Reviews Summary -->\n                <div class=\"mb-4\">\n                    <h3 class=\"font-medium\">Customer Sentiment</h3>\n                    <div class=\"flex items-center\">\n                        <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n                            <div class=\"bg-blue-600 h-2.5 rounded-full\" style=\"width: {{ retailer.sentiment }}%\"></div>\n                        </div>\n                        <span class=\"ml-2\">{{ retailer.sentiment }}%</span>\n                    </div>\n                </div>\n                \n                <!-- Press Mentions -->\n                <div>\n                    <h3 class=\"font-medium\">Recent Press</h3>\n                    <ul class=\"list-disc pl-5\">\n                        {% for article in retailer.press[:3] %}\n                        <li>{{ article.title }}</li>\n                        {% endfor %}\n                    </ul>\n                </div>\n            </div>\n            {% endfor %}\n        </div>\n        \n        <!-- Trends Graph -->\n        <div class=\"mt-8 bg-white rounded-lg shadow-lg p-6\">\n            <h2 class=\"text-xl font-semibold mb-4\">Market Trends</h2>\n            <canvas id=\"trends-chart\"></canvas>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n4. Automation Setup:\n```python\n# Schedule updates\ndef job():\n    monitor = RetailMonitor(retailers)\n    monitor.update_dashboard()\n\nschedule.every(30).days.do(job)\n\nwhile True:\n    schedule.run_pending()\n    time.sleep(3600)  # Check every hour\n```\n\n5. Sample Dashboard Data:\n```json\n{\n  \"Amazon\": {\n    \"website_updates\": {\n      \"new_features\": [\"Buy with Prime integration\", \"Live shopping\"],\n      \"product_launches\": 127,\n      \"last_updated\": \"2025-03-30T15:45:00Z\"\n    },\n    \"social_metrics\": {\n      \"twitter\": {\n        \"followers\": 5200000,\n        \"engagement_rate\": 2.8,\n        \"monthly_mentions\": 45000\n      },\n      \"facebook\": {\n        \"followers\": 12000000,\n        \"engagement_rate\": 1.9,\n        \"monthly_reach\": 8500000\n      }\n    },\n    \"customer_sentiment\": {\n      \"overall_score\": 4.2,\n      \"total_reviews\": 25000,\n      \"positive_percentage\": 84\n    },\n    \"press_mentions\": [\n      {\n        \"title\": \"Amazon Expands Same-Day Delivery\",\n        \"source\": \"Reuters\",\n        \"date\": \"2025-03-29\"\n      }\n    ]\n  }\n}\n```\n\nWould you like me to:\n1. Add more retailers to monitor?\n2. Include additional metrics?\n3. Customize the dashboard layout?\n4. Set up email notifications?",
  "extensions": [
    {
      "name": "Computer Controller",
      "command": "computercontroller",
      "is_builtin": true,
      "environmentVariables": [
        {
          "name": "dashboard_path",
          "description": "Path where the dashboard HTML should be saved",
          "required": false
        }
      ]
    },
    {
      "name": "Tavily Web Search",
      "command": "npx -y tavily-mcp",
      "is_builtin": false,
      "link": "https://github.com/tavily-ai/tavily-mcp",
      "environmentVariables": [
        {
          "name": "num_retailers",
          "description": "Number of top retailers to monitor",
          "required": false
        },
        {
          "name": "update_frequency",
          "description": "How often to update the dashboard in days",
          "required": false
        },
        {
          "name": "search_type",
          "description": "Tavily Web Search type (comprehensive or news)",
          "required": false
        }
      ]
    }
  ]
}
