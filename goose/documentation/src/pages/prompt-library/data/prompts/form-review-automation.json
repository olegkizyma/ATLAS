{
  "id": "operations-form-review-automation",
  "title": "Assign Reviewers to Conference Proposals",
  "description": "Automatically match incoming conference proposals with relevant track reviewers",
  "category": "business",
  "job": "operations",
  "example_prompt": "I need help building an automated monitoring system that will:\n1. Check an Airtable base every 10 minutes for new form submissions\n2. Match each submission with reviewer information stored in a Google Sheet\n3. Send me a notification with the submission details and assigned reviewer(s)\n4. Auto-dismiss the notification after 5 seconds\n\nCan you help me create this system, starting with setting up the necessary connections to Airtable and Google Sheets?",
  "example_result": "I'll help you create an automated monitoring system. Here's the implementation:\n\n1. First, let's create the monitoring script:\n\n```ruby\nrequire 'airrecords'\nrequire 'google_drive'\nrequire 'terminal-notifier'\n\n# Configure Airtable\nAirrecords.api_key = ENV['AIRTABLE_API_KEY']\nclass Submission < Airrecords::Table\n  self.base_key = 'your_base_id'\n  self.table_name = 'Submissions'\n\n  def self.new_submissions\n    all(filter: \"{Status} = 'New'\")\n  end\nend\n\n# Configure Google Drive\nsession = GoogleDrive::Session.from_config(\"config.json\")\nreviewers_sheet = session.spreadsheet_by_key(\"your_sheet_id\").worksheets[0]\n\n# Load reviewer data\ndef load_reviewers\n  reviewers = {}\n  reviewers_sheet.rows.each_with_index do |row, i|\n    next if i == 0 # Skip header\n    reviewers[row[1]] = {\n      name: row[0],\n      expertise: row[1].split(','),\n      current_load: row[2].to_i\n    }\n  end\n  reviewers\nend\n\n# Match submission with reviewers\ndef match_reviewers(submission, reviewers)\n  topic = submission['Topic']\n  matched_reviewers = reviewers.select do |_, r|\n    r[:expertise].include?(topic) && r[:current_load] < 3\n  end\n  matched_reviewers.sort_by { |_, r| r[:current_load] }.first(2)\nend\n\n# Main monitoring loop\nloop do\n  begin\n    reviewers = load_reviewers\n    new_submissions = Submission.new_submissions\n\n    new_submissions.each do |submission|\n      matched = match_reviewers(submission, reviewers)\n      \n      if matched.any?\n        # Update submission status\n        submission['Status'] = 'Assigned'\n        submission['Reviewers'] = matched.map { |_, r| r[:name] }.join(', ')\n        submission.save\n\n        # Send notification\n        message = \"New submission: #{submission['Title']}\\n\"\n        message += \"Assigned to: #{submission['Reviewers']}\"\n        \n        TerminalNotifier.notify(\n          message,\n          title: 'New Conference Proposal',\n          execute: 'open https://airtable.com/your_base_url',\n          timeout: 5\n        )\n      end\n    end\n\n  rescue => e\n    TerminalNotifier.notify(\n      \"Error: #{e.message}\",\n      title: 'Monitoring System Error'\n    )\n  end\n\n  sleep 600 # Wait 10 minutes\nend\n```\n\n2. Create a configuration file (config.json):\n\n```json\n{\n  \"client_id\": \"your_google_client_id\",\n  \"client_secret\": \"your_google_client_secret\",\n  \"scope\": [\n    \"https://www.googleapis.com/auth/drive\",\n    \"https://spreadsheets.google.com/feeds/\"\n  ],\n  \"refresh_token\": \"your_refresh_token\"\n}\n```\n\n3. Set up the launch agent (com.conference.monitor.plist):\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.conference.monitor</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/usr/bin/ruby</string>\n        <string>/path/to/monitor.rb</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>StandardErrorPath</key>\n    <string>/tmp/conference.monitor.err</string>\n    <key>StandardOutPath</key>\n    <string>/tmp/conference.monitor.out</string>\n    <key>EnvironmentVariables</key>\n    <dict>\n        <key>AIRTABLE_API_KEY</key>\n        <string>your_airtable_api_key</string>\n    </dict>\n</dict>\n</plist>\n```\n\nImplementation Notes:\n\n1. Data Structure\n   - Airtable: Submissions table with Title, Topic, Status, Reviewers fields\n   - Google Sheet: Reviewers with Name, Expertise (comma-separated), Current Load\n\n2. Matching Logic\n   - Matches based on topic expertise\n   - Considers reviewer workload (max 3 assignments)\n   - Assigns 2 reviewers per submission\n\n3. Error Handling\n   - Catches and notifies on API errors\n   - Continues running after errors\n   - Logs to standard files\n\n4. Security\n   - Credentials stored in environment/config\n   - API keys not hardcoded\n   - Limited scope for Google access\n\n5. Monitoring\n   - Runs every 10 minutes\n   - Auto-restarts if crashed\n   - Clickable notifications to view details\n\nTo install:\n1. Save the script as monitor.rb\n2. Install required gems: `gem install airrecords google_drive terminal-notifier`\n3. Copy plist to ~/Library/LaunchAgents/\n4. Load with: `launchctl load ~/Library/LaunchAgents/com.conference.monitor.plist`",
  "extensions": [
    {
      "name": "Computer Controller",
      "command": "computercontroller",
      "is_builtin": true,
      "environmentVariables": [

      ]
    },
    {
      "name": "Google Drive",
      "command": "npx -y @modelcontextprotocol/server-gdrive",
      "is_builtin": false,
      "environmentVariables": [
        {
          "name": "GDRIVE_OAUTH_PATH",
          "description": "/Users/<username>/.config/gcp-oauth.keys.json / ",
          "required": true
        },
        {
          "name": "GDRIVE_CREDENTIALS_PATH",
          "description": "/Users/<username>/.config/.gdrive-server-credentials.json /",
          "required": true
        }
      ]
    }
  ]
}
