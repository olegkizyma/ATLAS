{
  "id": "data-name-column-split",
  "title": "Clean Spreadsheet Data",
  "description": "Automatically organize messy data by splitting and reformatting columns",
  "category": "productivity",
  "job": "data-analytics",
  "example_prompt": "I'll help you split the names in Column C into separate First Name and Last Name columns. Let me analyze and modify your spreadsheet:\n\n1. First, I'll check the current structure of your spreadsheet\n2. Then I'll create a script to:\n   - Read the full names from Column C\n   - Split each name into first and last components\n   - Keep the first name in Column C\n   - Add the last names in Column D\n3. Finally, I'll save the changes back to your file\n\nPlease provide the path to your Excel file and I'll help you split the names.",
  "example_result": "I've analyzed your spreadsheet and will help split the names. Here's what I found and what I'll do:\n\n1. Current Structure Analysis:\n```\nSheet: Customer Data\nColumn C (Full Name): Contains 458 rows of data\nSample values:\n- John Smith\n- Mary Jane Wilson\n- Robert J. Anderson\n- Sarah Jean-Baptiste\n- O'Connor, Patrick\n```\n\n2. Data Cleaning Script:\n\n```python\nimport pandas as pd\n\ndef clean_and_split_names(df):\n    # Copy original data\n    df['Original Name'] = df['Full Name']\n    \n    # Handle reversed names (Last, First)\n    df['Full Name'] = df['Full Name'].apply(lambda x: \n        ' '.join(reversed(x.split(', '))) if ',' in x else x)\n    \n    # Split names into components\n    def split_name(name):\n        parts = name.split()\n        if len(parts) == 1:\n            return [parts[0], '']\n        elif len(parts) == 2:\n            return parts\n        else:\n            # Handle middle names/initials\n            return [parts[0], ' '.join(parts[1:])]\n    \n    # Apply splitting\n    df[['First Name', 'Last Name']] = pd.DataFrame(\n        df['Full Name'].apply(split_name).tolist(), \n        index=df.index\n    )\n    \n    return df\n\n# Read Excel file\ndf = pd.read_excel('customer_data.xlsx')\n\n# Process names\ndf = clean_and_split_names(df)\n\n# Save changes\ndf.to_excel('customer_data_updated.xlsx', index=False)\n```\n\n3. Results Summary:\n```\nProcessed 458 names:\n- Successfully split: 445\n- Special cases handled: 13\n  - Hyphenated surnames: 4\n  - Multiple surnames: 6\n  - Single names: 2\n  - Reversed format: 1\n```\n\n4. Sample Results:\n```\nBefore | After\n-------|-----------------------------------------------\nFull Name | First Name | Last Name | Original Name\n----------|------------|-----------|---------------\nJohn Smith | John | Smith | John Smith\nMary Jane Wilson | Mary | Jane Wilson | Mary Jane Wilson\nRobert J. Anderson | Robert | J. Anderson | Robert J. Anderson\nSarah Jean-Baptiste | Sarah | Jean-Baptiste | Sarah Jean-Baptiste\nO'Connor, Patrick | Patrick | O'Connor | O'Connor, Patrick\n```\n\n5. Data Quality Checks:\n```\n✓ No empty cells created\n✓ Special characters preserved\n✓ Original data backed up\n✓ Formatting maintained\n✓ Column headers properly set\n```\n\n6. File Updates:\n```\n1. Added new columns:\n   - Column C: First Name\n   - Column D: Last Name\n   - Column E: Original Name (backup)\n\n2. Updated column headers\n3. Applied consistent formatting\n4. Added data validation\n```\n\nWould you like me to:\n1. Show more sample rows?\n2. Handle any special cases differently?\n3. Add additional data cleaning rules?\n4. Create a backup before saving?",
  "extensions": [
    {
      "name": "Computer Controller",
      "command": "computercontroller",
      "is_builtin": true,
      "environmentVariables": [

      ]
    },
    {
      "name": "Google Drive",
      "command": "npx -y @modelcontextprotocol/server-gdrive",
      "is_builtin": false,
      "environmentVariables": [
        {
          "name": "GDRIVE_OAUTH_PATH",
          "description": "/Users/<username>/.config/gcp-oauth.keys.json / ",
          "required": true
        },
        {
          "name": "GDRIVE_CREDENTIALS_PATH",
          "description": "/Users/<username>/.config/.gdrive-server-credentials.json /",
          "required": true
        }
      ]
    }
  ]
}
