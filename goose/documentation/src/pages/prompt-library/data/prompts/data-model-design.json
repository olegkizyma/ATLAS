{
  "id": "developer-data-model-design",
  "title": "Design and Validate Data Model",
  "description": "Transform requirements into a concrete data model implementation with validation",
  "category": "technical",
  "job": "data-analytics",
  "example_prompt": "I need help designing and prototyping a data model:\n1. Here's my verbal description of the data model requirements: We're building a task management system for a software development team. We need to track:\n- Projects with multiple tasks\n- Task assignments to team members\n- Task dependencies\n- Time estimates and actual time spent\n- Task status changes and history\n- Comments and attachments on tasks\n- Sprint/milestone assignments\n\n2. Can you help me transform this into a concrete implementation?\n\n3. Let's validate this against the following use cases:\n- Team lead creates a new project and adds initial tasks\n- Developer updates task status and logs time\n- QA adds a blocking issue that depends on another task\n- Manager generates sprint velocity report\n- Team member adds comments and attachments to tasks\n- System needs to track task history for auditing\n- Tasks need to be easily searchable by various criteria\n\n4. We'll need to be able to iterate on this design based on our findings",
  "example_result": "I've designed a data model based on your requirements. Here's the implementation:\n\n```sql\n-- Core tables\nCREATE TABLE projects (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    role VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE tasks (\n    id SERIAL PRIMARY KEY,\n    project_id INTEGER REFERENCES projects(id),\n    title VARCHAR(200) NOT NULL,\n    description TEXT,\n    status VARCHAR(50) NOT NULL,\n    priority VARCHAR(20),\n    estimated_hours DECIMAL(6,2),\n    actual_hours DECIMAL(6,2),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Relationships and metadata\nCREATE TABLE task_assignments (\n    id SERIAL PRIMARY KEY,\n    task_id INTEGER REFERENCES tasks(id),\n    user_id INTEGER REFERENCES users(id),\n    assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE task_dependencies (\n    id SERIAL PRIMARY KEY,\n    dependent_task_id INTEGER REFERENCES tasks(id),\n    prerequisite_task_id INTEGER REFERENCES tasks(id),\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE sprints (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    start_date DATE NOT NULL,\n    end_date DATE NOT NULL,\n    project_id INTEGER REFERENCES projects(id)\n);\n\nCREATE TABLE sprint_tasks (\n    sprint_id INTEGER REFERENCES sprints(id),\n    task_id INTEGER REFERENCES tasks(id),\n    PRIMARY KEY (sprint_id, task_id)\n);\n\n-- Activity tracking\nCREATE TABLE task_history (\n    id SERIAL PRIMARY KEY,\n    task_id INTEGER REFERENCES tasks(id),\n    user_id INTEGER REFERENCES users(id),\n    field_name VARCHAR(50) NOT NULL,\n    old_value TEXT,\n    new_value TEXT,\n    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE time_logs (\n    id SERIAL PRIMARY KEY,\n    task_id INTEGER REFERENCES tasks(id),\n    user_id INTEGER REFERENCES users(id),\n    hours_spent DECIMAL(6,2) NOT NULL,\n    description TEXT,\n    logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE comments (\n    id SERIAL PRIMARY KEY,\n    task_id INTEGER REFERENCES tasks(id),\n    user_id INTEGER REFERENCES users(id),\n    content TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE attachments (\n    id SERIAL PRIMARY KEY,\n    task_id INTEGER REFERENCES tasks(id),\n    user_id INTEGER REFERENCES users(id),\n    file_name VARCHAR(255) NOT NULL,\n    file_path VARCHAR(512) NOT NULL,\n    file_size INTEGER NOT NULL,\n    mime_type VARCHAR(100) NOT NULL,\n    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\nValidation against use cases:\n\n1. Team Lead Creates Project:\n```sql\n-- Create project\nINSERT INTO projects (name, description) VALUES ('Mobile App v2', 'Version 2 of mobile app');\n\n-- Add initial tasks\nINSERT INTO tasks (project_id, title, status) \nVALUES (1, 'Setup CI/CD pipeline', 'TODO');\n```\n\n2. Developer Updates Task:\n```sql\n-- Update task status\nUPDATE tasks SET status = 'IN_PROGRESS' WHERE id = 1;\n\n-- Log time\nINSERT INTO time_logs (task_id, user_id, hours_spent, description)\nVALUES (1, 1, 2.5, 'Initial pipeline setup');\n```\n\n3. QA Adds Blocking Issue:\n```sql\n-- Create blocking issue\nINSERT INTO tasks (project_id, title, status)\nVALUES (1, 'Fix authentication bug', 'BLOCKED');\n\n-- Add dependency\nINSERT INTO task_dependencies (dependent_task_id, prerequisite_task_id)\nVALUES (2, 1);\n```\n\n4. Sprint Velocity Query:\n```sql\nSELECT \n    s.name as sprint_name,\n    COUNT(t.id) as total_tasks,\n    SUM(t.actual_hours) as total_hours,\n    AVG(t.actual_hours) as avg_hours_per_task\nFROM sprints s\nJOIN sprint_tasks st ON s.id = st.sprint_id\nJOIN tasks t ON st.task_id = t.id\nWHERE s.project_id = 1\nGROUP BY s.id, s.name;\n```\n\n5. Comments and Attachments:\n```sql\n-- Add comment\nINSERT INTO comments (task_id, user_id, content)\nVALUES (1, 2, 'Pipeline config updated in PR #123');\n\n-- Add attachment\nINSERT INTO attachments (task_id, user_id, file_name, file_path)\nVALUES (1, 2, 'pipeline-config.yml', '/uploads/123/pipeline-config.yml');\n```\n\n6. Task History Tracking:\n```sql\n-- Automatically tracked via trigger\nCREATE TRIGGER track_task_changes\nAFTER UPDATE ON tasks\nFOR EACH ROW\nEXECUTE FUNCTION log_task_change();\n```\n\n7. Task Search Indexes:\n```sql\n-- Create indexes for common search patterns\nCREATE INDEX idx_task_status ON tasks(status);\nCREATE INDEX idx_task_project ON tasks(project_id);\nCREATE INDEX idx_task_assignee ON task_assignments(user_id);\nCREATE INDEX idx_task_sprint ON sprint_tasks(sprint_id);\n```\n\nThis model supports all required functionality while maintaining data integrity and performance. The design is normalized to prevent data anomalies while including appropriate indexes for efficient querying.",
  "extensions": [
    {
      "name": "Developer",
      "command": "developer",
      "is_builtin": true,
      "environmentVariables": [

      ]
    },
    {
      "name": "Computer Controller",
      "command": "computercontroller",
      "is_builtin": true,
      "environmentVariables": [

      ]
    }
  ]
}
