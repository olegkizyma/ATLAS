#!/usr/bin/env python3
"""
üõ†Ô∏è –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è Atlas Core –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
"""

import asyncio
import aiohttp
import json
import time

async def test_atlas_stream():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É Atlas Core"""
    url = 'http://localhost:8080/api/chat/stream'
    
    async with aiohttp.ClientSession() as session:
        print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas Core stream...")
        
        payload = {
            'message': '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?'
        }
        
        start_time = time.time()
        
        try:
            async with session.post(url, json=payload) as response:
                print(f"üì° Status: {response.status}")
                print(f"üì° Headers: {dict(response.headers)}")
                
                if response.status != 200:
                    text = await response.text()
                    print(f"‚ùå Error response: {text}")
                    return False
                    
                # –ß–∏—Ç–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É
                full_response = ""
                events_count = 0
                
                async for line in response.content:
                    line_str = line.decode('utf-8').strip()
                    
                    if not line_str or line_str.startswith(':'):
                        continue
                        
                    if line_str.startswith('data:'):
                        events_count += 1
                        json_str = line_str[5:].strip()
                        
                        try:
                            obj = json.loads(json_str)
                            
                            # Goose format
                            if obj.get('type') == 'token':
                                full_response += obj.get('token', '')
                            elif obj.get('type') == 'done':
                                print("‚úÖ Stream completed (Goose format)")
                            
                            # Atlas Core format  
                            elif obj.get('event') == 'final':
                                full_response += obj.get('atlas_response', obj.get('response', ''))
                                print("‚úÖ Stream completed (Atlas Core format)")
                                
                        except json.JSONDecodeError:
                            # Plain text token
                            full_response += json_str
                            
                end_time = time.time()
                
                print(f"üìä Events received: {events_count}")
                print(f"‚è±Ô∏è Duration: {end_time - start_time:.2f}s")
                print(f"üí¨ Response length: {len(full_response)} chars")
                print(f"üìù Response preview: {full_response[:200]}...")
                
                return len(full_response) > 0
                
        except Exception as e:
            print(f"‚ùå Exception: {e}")
            return False

async def test_input_blocking_sequence():
    """–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –∫—ñ–ª—å–∫–æ—Ö –∑–∞–ø–∏—Ç—ñ–≤"""
    print("\n" + "="*50)
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
    print("="*50)
    
    messages = [
        "–¢–µ—Å—Ç 1",
        "–¢–µ—Å—Ç 2", 
        "–¢–µ—Å—Ç 3"
    ]
    
    for i, msg in enumerate(messages, 1):
        print(f"\nüì§ –ó–∞–ø–∏—Ç {i}: {msg}")
        success = await test_atlas_stream()
        
        if success:
            print(f"‚úÖ –ó–∞–ø–∏—Ç {i} —É—Å–ø—ñ—à–Ω–∏–π")
        else:
            print(f"‚ùå –ó–∞–ø–∏—Ç {i} –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π")
            
        # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        await asyncio.sleep(2)

async def main():
    print("üöÄ Atlas Core Stream Test")
    print("-" * 30)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8080/api/status') as response:
                if response.status == 200:
                    status = await response.json()
                    print(f"‚úÖ Server status: {status}")
                else:
                    print(f"‚ö†Ô∏è Server status: {response.status}")
    except Exception as e:
        print(f"‚ùå Server unavailable: {e}")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ—Å—Ç
    await test_input_blocking_sequence()
    
    print("\n" + "="*50)
    print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("="*50)

if __name__ == "__main__":
    asyncio.run(main())
