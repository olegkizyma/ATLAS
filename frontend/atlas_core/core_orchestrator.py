"""
Core Orchestrator - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ Atlas Core
–ö–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É –≤—Å—ñ—Ö —Ç—Ä—å–æ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:
1. Atlas LLM1 - –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ–π —ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
2. Goose - –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ Session Manager  
3. –ì—Ä—ñ—à–∞ LLM3 - –±–µ–∑–ø–µ–∫–∞ —ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
"""

import json
import asyncio
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
from pathlib import Path

from .atlas_llm import AtlasLLM
from .grisha_security import GrishaSecurity
from .session_manager import SessionManager


class CoreOrchestrator:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏ Atlas Core"""
    
    def __init__(self, goose_path: str = "/Users/dev/Documents/GitHub/ATLAS/goose"):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.atlas_llm = AtlasLLM()
        self.grisha_security = GrishaSecurity()
        self.session_manager = SessionManager(goose_path)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "security_blocks": 0,
            "chat_responses": 0,
            "task_executions": 0,
            "session_continuations": 0,
            "start_time": datetime.now().isoformat()
        }
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
        self.config = {
            "enable_security": True,
            "enable_logging": True,
            "max_response_length": 10000,
            "default_timeout": 300
        }

    async def process_user_message(self, user_message: str, user_context: Dict = None) -> Dict:
        """
        –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º —Ç–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º–∏ –∑–≤—ñ—Ç–∞–º–∏
        –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Å—ñ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ Atlas Core
        """
        start_time = datetime.now()
        self.stats["total_requests"] += 1
        
        try:
            # === –ö–†–û–ö 1: ATLAS LLM1 - –†–û–ó–£–ú–ù–ê –û–ë–†–û–ë–ö–ê –ó –ê–í–¢–û–î–û–ü–û–í–ù–ï–ù–ù–Ø–ú ===
            print(f"üß† Atlas LLM1: –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º...")
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑—É–º–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏
            atlas_processing = self.atlas_llm.process_user_message(user_message, user_context, [])
            
            response_data = {
                "timestamp": start_time.isoformat(),
                "user_message": user_message,
                "atlas_processing": atlas_processing,
                "processing_steps": []
            }
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑—É–º–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ Atlas
            step1 = {
                "step": 1,
                "component": "Atlas LLM1",
                "action": "smart_processing",
                "result": {
                    "response_type": atlas_processing.get("response_type"),
                    "auto_enriched": atlas_processing.get("auto_enriched", False),
                    "clarification_handled": atlas_processing.get("clarification_handled", False)
                },
                "timestamp": datetime.now().isoformat()
            }
            response_data["processing_steps"].append(step1)
            
            # –Ø–∫—â–æ Atlas –æ–±—Ä–æ–±–∏–≤ —è–∫ —á–∞—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if atlas_processing.get("response_type") == "direct":
                self.stats["chat_responses"] += 1
                self.stats["successful_requests"] += 1
                
                response_data.update({
                    "response_type": "chat",
                    "atlas_response": atlas_processing.get("response"),
                    "success": True,
                    "processing_time": (datetime.now() - start_time).total_seconds(),
                    "atlas_core": True
                })
                
                return response_data
            
            # === –ö–†–û–ö 2: –ì–†–Ü–®–ê LLM3 - –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ï–ó–ü–ï–ö–ò ===
            if self.config["enable_security"]:
                print(f"ÔøΩÔ∏è –ì—Ä—ñ—à–∞ LLM3: –ü–µ—Ä–µ–≤—ñ—Ä—è—é –±–µ–∑–ø–µ–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è...")
                
                working_message = atlas_processing.get("working_message", user_message)
                detailed_instruction = atlas_processing.get("detailed_instruction", working_message)
                
                security_check = self.grisha_security.analyze_security_risk(
                    detailed_instruction,
                    atlas_processing.get("intent_analysis", {}), 
                    user_context
                )
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏
                step2 = {
                    "step": 2,
                    "component": "–ì—Ä—ñ—à–∞ LLM3",
                    "action": "security_check",
                    "checked_content": detailed_instruction,
                    "result": security_check,
                    "timestamp": datetime.now().isoformat()
                }
                response_data["processing_steps"].append(step2)
                
                # –Ø–∫—â–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
                if security_check.get("risk_level") == "HIGH" and security_check.get("block_execution"):
                    self.stats["security_blocks"] += 1
                    self.stats["failed_requests"] += 1
                    
                    response_data.update({
                        "response_type": "security_block",
                        "security_analysis": security_check,
                        "blocked": True,
                        "success": False,
                        "error": "Command blocked by security system",
                        "processing_time": (datetime.now() - start_time).total_seconds()
                    })
                    
                    return response_data
                
                response_data["security_analysis"] = security_check
            
            # === –ö–†–û–ö 3: GOOSE - –í–ò–ö–û–ù–ê–ù–ù–Ø –ó–ê–í–î–ê–ù–ù–Ø ===
            print(f"ÔøΩ Goose: –í–∏–∫–æ–Ω—É—é –∑–∞–≤–¥–∞–Ω–Ω—è...")
            
            # –ì—Ä—ñ—à–∞ –ø–æ—á–∏–Ω–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            session_strategy = atlas_processing.get("session_action", {})
            session_name = session_strategy.get("session_name", f"smart_session_{int(datetime.now().timestamp())}")
            
            monitor_start = self.grisha_security.monitor_task_progress(
                atlas_processing.get("working_message", user_message), session_name, "start"
            )
            print(monitor_start["monitor_message"])
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥ –ì—Ä—ñ—à—ñ
            execution_result = self.session_manager.execute_command(
                atlas_processing.get("detailed_instruction"),
                atlas_processing.get("intent_analysis", {}),
                session_strategy,
                self.grisha_security  # –ü–µ—Ä–µ–¥–∞—î–º–æ –ì—Ä–∏—à—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            )
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            step3 = {
                "step": 3,
                "component": "Goose",
                "action": "task_execution",
                "executed_instruction": atlas_processing.get("detailed_instruction"),
                "original_message": user_message,
                "working_message": atlas_processing.get("working_message"),
                "result": {
                    "success": execution_result.get("success"),
                    "execution_type": execution_result.get("execution_type"),
                    "session_name": execution_result.get("session_name")
                },
                "timestamp": datetime.now().isoformat()
            }
            response_data["processing_steps"].append(step3)
            
            # === –ö–†–û–ö 4: –û–ë–†–û–ë–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í –ó –ü–ï–†–ï–í–Ü–†–ö–û–Æ ===
            print(f"üìã –ì—Ä—ñ—à–∞: –ê–Ω–∞–ª—ñ–∑—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è...")
            
            if execution_result.get("success"):
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –±—É–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                task_completed = execution_result.get("task_completed")
                session_alive = execution_result.get("session_alive", False)
                verification_details = execution_result.get("verification_details", "")
                
                if task_completed is not None:
                    # –ë—É–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥ –ì—Ä—ñ—à—ñ
                    if task_completed:
                        print(f"‚úÖ –ì—Ä—ñ—à–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤: –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                        if session_alive:
                            print(f"‚è≥ –°–µ—Å—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
                        else:
                            print(f"üîö –°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
                        
                        compact_summary = verification_details or self.grisha_security.generate_completion_summary(
                            atlas_processing.get("working_message", user_message),
                            execution_result,
                            {"session_name": session_name, "verified": True, "session_alive": session_alive}
                        )
                    else:
                        print(f"‚ùå –ì—Ä—ñ—à–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫")
                        compact_summary = f"‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏. {verification_details}"
                else:
                    # –ó–≤–∏—á–∞–π–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ
                    print(f"üìù –ó–≤–∏—á–∞–π–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - –≥–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç...")
                    compact_summary = self.grisha_security.generate_completion_summary(
                        atlas_processing.get("working_message", user_message),
                        execution_result,
                        {"session_name": session_name, "auto_enriched": atlas_processing.get("auto_enriched", False)}
                    )
                
                monitor_complete = self.grisha_security.monitor_task_progress(
                    atlas_processing.get("working_message", user_message), session_name, "completion"
                )
                print(monitor_complete["monitor_message"])
                
                self.stats["successful_requests"] += 1
                self.stats["task_executions"] += 1
                
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
                response_data.update({
                    "response_type": "task_execution",
                    "response": compact_summary,  # –ö–û–†–û–¢–ö–ò–ô –∑–≤—ñ—Ç –≤—ñ–¥ –ì—Ä—ñ—à—ñ
                    "success": True,
                    "task_completed": task_completed,
                    "session_alive": session_alive,
                    "verification_details": verification_details,
                    "execution_type": execution_result.get("execution_type", "unknown"),
                    "session_info": {
                        "strategy": session_strategy.get("strategy"), 
                        "session_name": session_name,
                        "alive": session_alive
                    },
                    "processing_time": (datetime.now() - start_time).total_seconds(),
                    "atlas_core": True,
                    "intent": atlas_processing.get("intent_analysis", {}).get("intent"),
                    "confidence": atlas_processing.get("intent_analysis", {}).get("confidence")
                })
                
            else:
                monitor_error = self.grisha_security.monitor_task_progress(
                    atlas_processing.get("working_message", user_message), session_name, "error"
                )
                print(monitor_error["monitor_message"])
                
                self.stats["failed_requests"] += 1
                
                response_data.update({
                    "response_type": "task_execution",
                    "response": f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –ì—Ä—ñ—à–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–≤ —Å–∏—Ç—É–∞—Ü—ñ—é.",
                    "success": False,
                    "error_details": execution_result.get("error", ""),
                    "processing_time": (datetime.now() - start_time).total_seconds(),
                    "atlas_core": True
                })
            
            return response_data
            
        except Exception as e:
            self.stats["failed_requests"] += 1
            
            error_response = {
                "timestamp": start_time.isoformat(),
                "user_message": user_message,
                "response_type": "error",
                "success": False,
                "error": str(e),
                "processing_time": (datetime.now() - start_time).total_seconds(),
                "atlas_core": True
            }
            
            if self.config["enable_logging"]:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ CoreOrchestrator: {e}")
            
            return error_response

    def get_system_status(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏ Atlas Core"""
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        atlas_status = self.atlas_llm.get_status()
        grisha_status = self.grisha_security.get_status()
        session_status = self.session_manager.get_stats()
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_requests = self.stats["total_requests"]
        success_rate = (self.stats["successful_requests"] / total_requests * 100) if total_requests > 0 else 0
        
        system_status = {
            "atlas_core": {
                "version": "1.0.0",
                "status": "active",
                "uptime": self._calculate_uptime(),
                "success_rate": round(success_rate, 2)
            },
            "components": {
                "atlas_llm": atlas_status,
                "grisha_security": grisha_status, 
                "session_manager": session_status
            },
            "statistics": self.stats.copy(),
            "configuration": self.config.copy()
        }
        
        return system_status

    def get_available_sessions(self) -> List[Dict]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π Goose"""
        return self.session_manager.get_available_sessions()

    def create_new_session(self, session_name: str, initial_message: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Goose –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥ –ì—Ä—ñ—à—ñ"""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —è–∫—â–æ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è
        if initial_message and self._is_task_execution(initial_message):
            return self.session_manager.create_session_with_verification(
                session_name, initial_message, self.grisha_security
            )
        else:
            # –ó–≤–∏—á–∞–π–Ω–∞ —Å–µ—Å—ñ—è –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            return self.session_manager.create_session(session_name, initial_message)

    def _is_task_execution(self, message: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Ü–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (–ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ)"""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Atlas LLM –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        try:
            analysis = self.atlas_llm.analyze_intent(message)
            return analysis.get("type") == "task_execution"
        except Exception:
            # Fallback - —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–≤–≥–µ —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            return len(message) > 50 and any(word in message.lower() for word in [
                '–∑–∞–≤–¥–∞–Ω–Ω—è', '–≤–∏–∫–æ–Ω–∞–π', '—Å—Ç–≤–æ—Ä–∏', '–∑–∞–ø—É—Å—Ç–∏', '–≤—ñ–¥–∫—Ä–∏–π', '–∑–Ω–∞–π–¥–∏'
            ])

    def continue_session(self, session_name: str, message: str) -> Dict:
        """–ü—Ä–æ–¥–æ–≤–∂—É—î —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é"""
        return self.session_manager.send_to_session(session_name, message, resume=True)

    def cleanup_old_sessions(self, max_age_hours: int = 24) -> Dict:
        """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ —Å–µ—Å—ñ—ó"""
        return self.session_manager.cleanup_old_sessions(max_age_hours)

    def update_configuration(self, new_config: Dict) -> Dict:
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∏—Å—Ç–µ–º–∏"""
        allowed_keys = ["enable_security", "enable_logging", "max_response_length", "default_timeout"]
        updated_keys = []
        
        for key, value in new_config.items():
            if key in allowed_keys:
                self.config[key] = value
                updated_keys.append(key)
        
        return {
            "success": True,
            "updated_keys": updated_keys,
            "current_config": self.config.copy()
        }

    def _calculate_uptime(self) -> str:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —á–∞—Å —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏"""
        start_time = datetime.fromisoformat(self.stats["start_time"])
        uptime = datetime.now() - start_time
        
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        return f"{days}d {hours}h {minutes}m {seconds}s"

    def reset_statistics(self) -> Dict:
        """–°–∫–∏–¥–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏"""
        old_stats = self.stats.copy()
        
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "security_blocks": 0,
            "chat_responses": 0,
            "task_executions": 0,
            "session_continuations": 0,
            "start_time": datetime.now().isoformat()
        }
        
        return {
            "success": True,
            "old_statistics": old_stats,
            "reset_time": datetime.now().isoformat()
        }

    def health_check(self) -> Dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–¥–æ—Ä–æ–≤'—è –≤—Å—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏"""
        health_status = {
            "overall_health": "healthy",
            "components": {},
            "issues": [],
            "timestamp": datetime.now().isoformat()
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Atlas LLM
        try:
            atlas_test = self.atlas_llm.analyze_user_intent("test", {})
            health_status["components"]["atlas_llm"] = "healthy"
        except Exception as e:
            health_status["components"]["atlas_llm"] = "unhealthy"
            health_status["issues"].append(f"Atlas LLM: {str(e)}")
            health_status["overall_health"] = "degraded"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ì—Ä—ñ—à–∞
        try:
            grisha_test = self.grisha_security.analyze_security_risk("test", {}, {})
            health_status["components"]["grisha_security"] = "healthy"
        except Exception as e:
            health_status["components"]["grisha_security"] = "unhealthy"
            health_status["issues"].append(f"–ì—Ä—ñ—à–∞ Security: {str(e)}")
            health_status["overall_health"] = "degraded"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Session Manager
        try:
            session_stats = self.session_manager.get_stats()
            if session_stats.get("goose_available"):
                health_status["components"]["session_manager"] = "healthy"
            else:
                health_status["components"]["session_manager"] = "unhealthy"
                health_status["issues"].append("Session Manager: Goose binary not available")
                health_status["overall_health"] = "degraded"
        except Exception as e:
            health_status["components"]["session_manager"] = "unhealthy"
            health_status["issues"].append(f"Session Manager: {str(e)}")
            health_status["overall_health"] = "critical"
        
        # –Ø–∫—â–æ —î –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
        if len(health_status["issues"]) >= 2:
            health_status["overall_health"] = "critical"
        
        return health_status


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ atlas_minimal_live.py
atlas_core = None

def get_atlas_core(goose_path: str = "/Users/dev/Documents/GitHub/ATLAS/goose") -> CoreOrchestrator:
    """–û—Ç—Ä–∏–º—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä Atlas Core"""
    global atlas_core
    if atlas_core is None:
        atlas_core = CoreOrchestrator(goose_path)
    return atlas_core
