"""
Session Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ Goose
–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –í–∏–∑–Ω–∞—á–∞—Ç–∏ —Ç–∏–ø —Å–µ—Å—ñ—ó (–Ω–æ–≤–∞/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)
2. –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Å–µ—Å—ñ—è–º–∏
3. –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ–π
4. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –∑ Goose CLI
"""

import json
import subprocess
import os
import re
import logging
import requests
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Goose"""
    
    def __init__(self, goose_path: str = "/Users/dev/Documents/GitHub/ATLAS/goose"):
        self.goose_path = goose_path
        self.goose_binary = f"{goose_path}/target/release/goose"
        self.active_sessions = {}
        self.session_contexts = {}
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è HTTP API
        self.api_url = os.getenv("GOOSE_API_URL", "http://localhost:3000")
        self.secret_key = os.getenv("GOOSE_SECRET_KEY", "test")
        self.use_http_api = os.getenv("USE_GOOSE_HTTP_API", "true").lower() == "true"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Goose (CLI –∞–±–æ API)
        if not self.use_http_api and not Path(self.goose_binary).exists():
            raise FileNotFoundError(f"Goose binary not found at {self.goose_binary}")
        elif self.use_http_api:
            logger.info(f"üï∏Ô∏è SessionManager: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API: {self.api_url}")
        else:
            logger.info(f"üíª SessionManager: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI: {self.goose_binary}")

    def _send_api_request(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Goose HTTP API"""
        try:
            url = f"{self.api_url}{endpoint}"
            headers = {"X-Secret-Key": self.secret_key}
            
            if method == "POST":
                response = requests.post(url, json=data, headers=headers, timeout=30)
            elif method == "PUT":
                response = requests.put(url, json=data, headers=headers, timeout=30)
            else:
                response = requests.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}", "response": response.text}
                
        except requests.exceptions.RequestException as e:
            return {"success": False, "error": str(e)}

    def get_available_sessions(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π –∑ Goose"""
        try:
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request("/sessions", "GET")
                if result["success"]:
                    sessions_data = result["data"]
                    sessions = []
                    for session in sessions_data.get("sessions", []):
                        sessions.append({
                            "name": session.get("name", ""),
                            "description": session.get("description", "No description"),
                            "timestamp": session.get("timestamp", ""),
                            "active": session.get("name", "") in self.active_sessions
                        })
                    return sessions
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è sessions: {result['error']}")
                    # Fallback –¥–æ CLI
                    return self._get_sessions_cli()
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI
                return self._get_sessions_cli()
            
        except Exception as e:
            logger.error(f"Error getting sessions: {e}")
            return []

    def _get_sessions_cli(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π —á–µ—Ä–µ–∑ CLI (fallback –º–µ—Ç–æ–¥)"""
        try:
            result = subprocess.run(
                [self.goose_binary, "session", "list"],
                capture_output=True,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env(),
                timeout=30
            )
            
            if result.returncode != 0:
                return []
            
            # –ü–∞—Ä—Å–∏–º–æ –≤–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ session list
            sessions = []
            for line in result.stdout.split('\n'):
                if ' - ' in line and not line.startswith('Available sessions:'):
                    parts = line.strip().split(' - ', 2)
                    if len(parts) >= 2:
                        session_name = parts[0].strip()
                        description = parts[1].strip() if len(parts) > 1 else "No description"
                        timestamp_str = parts[2].strip() if len(parts) > 2 else ""
                        
                        sessions.append({
                            "name": session_name,
                            "description": description,
                            "timestamp": timestamp_str,
                            "active": session_name in self.active_sessions
                        })
            
            return sessions
            
        except Exception as e:
            logger.error(f"CLI Error getting sessions: {e}")
            return []

    def create_session_with_verification(self, session_name: str, initial_message: str, grisha_instance = None) -> Dict:
        """
        –°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥ –ì—Ä—ñ—à—ñ
        –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - Atlas —Ü–∏–∫–ª—ñ—á–Ω–æ –¥–∞—î –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        """
        try:
            logger.info(f"üÜï SessionManager: –°—Ç–≤–æ—Ä—é—é —Å–µ—Å—ñ—é –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é '{session_name}'")
            logger.info(f"üìù –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {initial_message}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É —Å–ø—Ä–æ–±—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            execution_result = self._execute_task_attempt(session_name, initial_message)
            
            if not execution_result["success"]:
                return execution_result
            
            # –Ø–∫—â–æ –ì—Ä—ñ—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            if grisha_instance:
                verification_cycle_result = self._run_verification_cycle(
                    session_name, initial_message, execution_result, grisha_instance
                )
                return verification_cycle_result
            else:
                # –ë–µ–∑ –ì—Ä—ñ—à—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return execution_result
                
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _execute_task_attempt(self, session_name: str, task_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            cmd = [self.goose_binary, "session", "--name", session_name]
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request("/sessions", "POST", {
                    "name": session_name,
                    "message": task_message
                })
                
                if result["success"]:
                    session_data = result["data"]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é
                    self.active_sessions[session_name] = {
                        "created": datetime.now().isoformat(),
                        "last_used": datetime.now().isoformat(),
                        "message_count": 1,
                        "task_description": task_message
                    }
                    
                    return {
                        "success": True,
                        "session_name": session_name,
                        "response": session_data.get("response", ""),
                        "stderr": session_data.get("stderr", ""),
                        "return_code": session_data.get("return_code", 0)
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {result['error']}")
                    # Fallback –¥–æ CLI
                    return self._execute_task_attempt_cli(session_name, task_message)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI
                return self._execute_task_attempt_cli(session_name, task_message)
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _execute_task_attempt_cli(self, session_name: str, task_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ CLI (fallback –º–µ—Ç–æ–¥)"""
        try:
            cmd = [self.goose_binary, "session", "--name", session_name]
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É CLI: {' '.join(cmd)}")
            
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            input_text = f"{task_message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
            
            stdout, stderr = process.communicate(input=input_text)
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
            logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
            
            if process.returncode != 0:
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: {process.returncode}")
                return {
                    "success": False,
                    "error": f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. STDERR: {stderr}",
                    "session_name": session_name,
                    "stdout": stdout
                }
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é
            self.active_sessions[session_name] = {
                "created": datetime.now().isoformat(),
                "last_used": datetime.now().isoformat(),
                "message_count": 1,
                "task_description": task_message
            }
            
            return {
                "success": True,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è CLI: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _run_verification_cycle(self, session_name: str, original_task: str, execution_result: Dict, grisha_instance) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞—î —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ –ì—Ä–∏—à–µ—é:
        1. –ì—Ä—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω—É —Å–µ—Å—ñ—é
        2. –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - Atlas –¥–∞—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è  
        3. –ü–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è –¥–æ —É—Å–ø—ñ—Ö—É –∞–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —Å–ø—Ä–æ–±
        """
        max_attempts = 3
        attempt = 1
        
        logger.info(f"üîÑ SessionManager: –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
        
        while attempt <= max_attempts:
            logger.info(f"üïµÔ∏è SessionManager: –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {attempt}/{max_attempts}")
            
            try:
                # –ì—Ä—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
                verification_result = grisha_instance.verify_task_completion(
                    original_task, 
                    session_info={"name": session_name, "attempt": attempt}
                )
                
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ: {verification_result}")
                
                # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
                if verification_result.get("task_completed", False):
                    logger.info(f"‚úÖ –ì—Ä—ñ—à–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —É—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è!")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–±–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–µ—Å—ñ—é –∞–∫—Ç–∏–≤–Ω–æ—é
                    should_keep_alive = verification_result.get("should_continue_session", False)
                    
                    if should_keep_alive:
                        logger.info(f"‚è≥ –°–µ—Å—ñ—è '{session_name}' –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é")
                        return {
                            "success": True,
                            "session_name": session_name,
                            "response": execution_result.get("response", ""),
                            "task_completed": True,
                            "session_alive": True,
                            "verification_details": verification_result.get("verification_details", "")
                        }
                    else:
                        logger.info(f"üîö –°–µ—Å—ñ—è '{session_name}' –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–∫—Ä–∏—Ç–∞")
                        return {
                            "success": True,
                            "session_name": session_name,
                            "response": execution_result.get("response", ""),
                            "task_completed": True,
                            "session_alive": False,
                            "verification_details": verification_result.get("verification_details", "")
                        }
                
                # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                else:
                    logger.warning(f"‚ùå –ì—Ä—ñ—à–∞ –≤–∏–∑–Ω–∞—á–∏–≤ —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: {verification_result.get('verification_details', '')}")
                    
                    # üÜï –ù–û–í–ê –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨: Atlas –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –ì—Ä—ñ—à—ñ
                    detailed_task = self._create_detailed_correction_task(original_task, verification_result, attempt)
                    logger.info(f"üìã Atlas —Å—Ç–≤–æ—Ä–∏–≤ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {detailed_task[:200]}...")
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ—ó
                    if session_name not in self.session_contexts:
                        self.session_contexts[session_name] = {}
                    self.session_contexts[session_name][f"correction_attempt_{attempt}"] = {
                        "detailed_task": detailed_task,
                        "grisha_feedback": verification_result.get("verification_details", ""),
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    next_action = verification_result.get("next_action")
                    
                    if next_action == "retry_task" and attempt < max_attempts:
                        logger.info(f"üîÑ Atlas: –î–∞—é –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ retry
                        retry_message = detailed_task
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É
                        retry_result = self._execute_task_retry(session_name, retry_message)
                        
                        if retry_result["success"]:
                            execution_result = retry_result
                            attempt += 1
                            continue
                        else:
                            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ: {retry_result.get('error')}")
                            break
                    
                    elif next_action == "modify_approach" and attempt < max_attempts:
                        logger.info(f"üîß Atlas: –ú–æ–¥–∏—Ñ—ñ–∫—É—é –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
                        
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
                        modified_message = detailed_task
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ –∑ –Ω–æ–≤–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
                        modified_result = self._execute_task_retry(session_name, modified_message)
                        
                        if modified_result["success"]:
                            execution_result = modified_result
                            attempt += 1
                            continue
                        else:
                            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ: {modified_result.get('error')}")
                            break
                    
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –º–æ–∂—É –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: {next_action}, —Å–ø—Ä–æ–±–∞ {attempt}/{max_attempts}")
                        break
                        
            except Exception as e:
                logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}")
                break
        
        # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ - –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±
        logger.error(f"‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–±")
        return {
            "success": False,
            "session_name": session_name,
            "response": execution_result.get("response", ""),
            "task_completed": False,
            "error": f"–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
            "verification_details": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø–µ—Ä–µ–≤–∏—â–µ–Ω–∞"
        }

    def _generate_retry_message(self, original_task: str, verification_result: Dict, attempt: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏"""
        retry_details = verification_result.get("verification_details", "")
        
        return f"""–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å–ø—Ä–æ–±–∞ –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–ª–∞ –∑–∞–≤–¥–∞–Ω–Ω—è.

–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task}

–î–µ—Ç–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {retry_details}

–°–ø—Ä–æ–±–∞ #{attempt + 1}: –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ –∞–±–æ –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏.

–î–∏—Ä–µ–∫—Ç–∏–≤–∏:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —â–æ —Å–∞–º–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø—Ä–æ–±—ñ
2. –°–ø—Ä–æ–±—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ–π—Å–Ω–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ
4. –ü—Ä–æ–¥–æ–≤–∂—É–π –¥–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à —É—Å–ø—ñ—Ö—É"""

    def _generate_modified_approach(self, original_task: str, verification_result: Dict, attempt: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        verification_details = verification_result.get("verification_details", "")
        
        return f"""–ü–æ—Ç—Ä—ñ–±–µ–Ω –Ü–ù–®–ò–ô –ø—ñ–¥—Ö—ñ–¥ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.

–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task}

–ü—Ä–∏—á–∏–Ω–∞ –∑–º—ñ–Ω–∏ –ø—ñ–¥—Ö–æ–¥—É: {verification_details}

–ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Å–ø—Ä–æ–±–∞ #{attempt + 1}: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ò–ô –º–µ—Ç–æ–¥ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.

–î–∏—Ä–µ–∫—Ç–∏–≤–∏:
1. –ù–ï –ø–æ–≤—Ç–æ—Ä—é–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—ñ–¥—Ö—ñ–¥
2. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
3. –ó–∞—Å—Ç–æ—Å—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∞–±–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
4. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –î–û–°–Ø–ì–ù–ï–ù–ù–Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –Ω–µ –Ω–∞ –º–µ—Ç–æ–¥—ñ
5. –ê–¥–∞–ø—Ç—É–π—Å—è —Ç–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π –¥–æ —É—Å–ø—ñ—Ö—É"""

    def _create_detailed_correction_task(self, original_task: str, verification_result: Dict, attempt: int) -> str:
        """
        üÜï –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–≤–æ—Ä—é—î –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –ì—Ä—ñ—à—ñ
        
        –ö–æ–ª–∏ –ì—Ä–∏—à–∞ –≤–∏—è–≤–ª—è—î, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, Atlas –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î
        –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏.
        """
        verification_details = verification_result.get("verification_details", "")
        next_action = verification_result.get("next_action_needed", "retry_task")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±–ª–µ–º—É –∑ –¥–µ—Ç–∞–ª–µ–π –ì—Ä—ñ—à—ñ
        problem_analysis = self._analyze_grisha_feedback(verification_details)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        correction_steps = self._generate_correction_steps(original_task, problem_analysis, attempt)
        
        detailed_task = f"""üîß –î–ï–¢–ê–õ–¨–ù–ï –ó–ê–í–î–ê–ù–ù–Ø –î–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø (–°–ø—Ä–æ–±–∞ #{attempt + 1})

üìã –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ï –ó–ê–í–î–ê–ù–ù–Ø: {original_task}

‚ùå –ü–†–û–ë–õ–ï–ú–ê –í–ò–Ø–í–õ–ï–ù–ê –ì–†–ò–®–ï–Æ:
{verification_details}

üîç –ê–ù–ê–õ–Ü–ó –ü–†–û–ë–õ–ï–ú–ò:
{problem_analysis}

üìù –î–ï–¢–ê–õ–¨–ù–ò–ô –ü–õ–ê–ù –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
{correction_steps}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ú–û–ì–ò:
1. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ–Ω–∞–π –í–°–Ü –∫—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
2. –ü–µ—Ä–µ–≤—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
3. –Ø–∫—â–æ –∫—Ä–æ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - —Å–ø—Ä–æ–±—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥
4. –ù–ï –∑–∞–≤–µ—Ä—à—É–π —Ä–æ–±–æ—Ç—É –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à –ø–æ–≤–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
5. –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ - –¥–æ–∫–ª–∞–¥–Ω–æ –æ–ø–∏—à–∏ —â–æ —Å—Ç–∞–ª–æ—Å—è —ñ —Å–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥

üéØ –û–ß–Ü–ö–£–í–ê–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {self._define_expected_result(original_task)}

üîÑ –ü–æ—á–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ó–ê–†–ê–ó —ñ –∑–≤—ñ—Ç—É–π –ø—Ä–æ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫!"""

        steps_count = len(correction_steps.split('\n'))
        logger.info(f"üìã Atlas —Å—Ç–≤–æ—Ä–∏–≤ –¥–µ—Ç–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {steps_count} –∫—Ä–æ–∫—ñ–≤")
        return detailed_task

    def _analyze_grisha_feedback(self, verification_details: str) -> str:
        """üß† –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–¥–±–µ–∫—É –≤—ñ–¥ –ì—Ä—ñ—à—ñ"""
        analysis = []
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–º—ñ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—É
        try:
            # –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ Gemini/GPT
            ai_analysis = self._ai_analyze_failure(verification_details)
            if ai_analysis:
                return ai_analysis
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        
        # Fallback: –±–∞–∑–æ–≤–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        return self._semantic_failure_analysis(verification_details)

    def _ai_analyze_failure(self, verification_details: str) -> str:
        """ü§ñ AI-–∞–Ω–∞–ª—ñ–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–≤–¥–∞—á—ñ —á–µ—Ä–µ–∑ LLM"""
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini —á–µ—Ä–µ–∑ —ñ—Å–Ω—É—é—á—É —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if hasattr(self, '_call_gemini_analysis'):
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —á–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ:

–î–ï–¢–ê–õ–Ü –ü–ï–†–ï–í–Ü–†–ö–ò: {verification_details}

–ù–∞–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: ...
‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ: ...
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: ..."""
                
                analysis = self._call_gemini_analysis(prompt)
                if analysis:
                    return analysis
                    
            # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None –¥–ª—è fallback
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            return None

    def _ai_generate_solution_steps(self, original_task: str, problem_analysis: str, attempt: int) -> str:
        """ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ —Ä—ñ—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ LLM"""
        try:
            if hasattr(self, '_call_gemini_solution'):
                prompt = f"""–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:

–û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ï –ó–ê–í–î–ê–ù–ù–Ø: {original_task}
–ê–ù–ê–õ–Ü–ó –ü–†–û–ë–õ–ï–ú–ò: {problem_analysis}  
–ù–û–ú–ï–† –°–ü–†–û–ë–ò: {attempt + 1}

–ó–≥–µ–Ω–µ—Ä—É–π 4-6 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
–ö–†–û–ö 1: [–Ω–∞–∑–≤–∞]
   - [–¥–µ—Ç–∞–ª—å 1]
   - [–¥–µ—Ç–∞–ª—å 2]
–ö–†–û–ö 2: [–Ω–∞–∑–≤–∞]
   - [–¥–µ—Ç–∞–ª—å 1]
   - [–¥–µ—Ç–∞–ª—å 2]
..."""
                
                steps = self._call_gemini_solution(prompt)
                if steps:
                    return steps
                    
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return None

    def _ai_define_expected_outcome(self, original_task: str) -> str:
        """ü§ñ AI –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ LLM"""
        try:
            if hasattr(self, '_call_gemini_outcome'):
                prompt = f"""–í–∏–∑–Ω–∞—á–∏ —Ç–æ—á–Ω–∏–π –æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è:

–ó–ê–í–î–ê–ù–ù–Ø: {original_task}

–ù–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:
"[–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —â–æ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—è–≥–Ω—É—Ç–∏–π]"

–ü—Ä–∏–∫–ª–∞–¥: "–ü—Ä–æ–≥—Ä–∞–º–∞ Calculator –∑–∞–ø—É—â–µ–Ω–∞ —ñ –ø–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è 2√ó333=666" """
                
                outcome = self._call_gemini_outcome(prompt)
                if outcome:
                    return outcome.strip('"')
                    
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: {e}")
            return None

    def _semantic_failure_analysis(self, verification_details: str) -> str:
        """üîç –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—É"""
        text_lower = verification_details.lower()
        analysis_points = []
        
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–±–ª–µ–º (–±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º)
        if any(term in text_lower for term in ['failed', 'error', '–ø–æ–º–∏–ª–∫–∞', '–Ω–µ –≤–¥–∞–ª–æ—Å—è']):
            analysis_points.append("‚Ä¢ –í–∏—è–≤–ª–µ–Ω–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        
        if any(term in text_lower for term in ['not running', 'not found', '–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ', '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π']):
            analysis_points.append("‚Ä¢ –¶—ñ–ª—å–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –∞–±–æ –ø—Ä–æ—Ü–µ—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ")
        
        if any(term in text_lower for term in ['display', '–ø–æ–∫–∞–∑', '–≤—ñ–¥–æ–±—Ä–∞–∂', 'result', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']):
            analysis_points.append("‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
        
        if any(term in text_lower for term in ['timeout', 'time out', '—á–∞—Å', '—Ç–∞–π–º–∞—É—Ç']):
            analysis_points.append("‚Ä¢ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó")
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –∑–∞–≥–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        if not analysis_points:
            analysis_points.append(f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {verification_details[:150]}...")
        
        return "\n".join(analysis_points)

    def _generate_correction_steps(self, original_task: str, problem_analysis: str, attempt: int) -> str:
        """üß† –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–ê –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ AI
            ai_steps = self._ai_generate_solution_steps(original_task, problem_analysis, attempt)
            if ai_steps:
                return ai_steps
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        # Fallback: –∞–¥–∞–ø—Ç–∏–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
        return self._adaptive_solution_generation(original_task, problem_analysis, attempt)

    def _ai_generate_solution_steps(self, original_task: str, problem_analysis: str, attempt: int) -> str:
        """ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫—Ä–æ–∫—ñ–≤ —Ä—ñ—à–µ–Ω–Ω—è —á–µ—Ä–µ–∑ LLM"""
        # TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Gemini/GPT –¥–ª—è —Ä–æ–∑—É–º–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫—Ä–æ–∫—ñ–≤
        # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è adaptive fallback
        return None

    def _adaptive_solution_generation(self, original_task: str, problem_analysis: str, attempt: int) -> str:
        """üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä—ñ—à–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª—ñ–∑—É"""
        
        # –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—Ä–æ–∫—ñ–≤
        steps = []
        
        # –ö–†–û–ö 1: –ê–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó (–∑–∞–≤–∂–¥–∏)
        steps.append(f"–ö–†–û–ö 1: –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó")
        steps.append(f"   - –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task}")
        clean_analysis = problem_analysis.replace('‚Ä¢ ', '').replace('\n', '; ')
        steps.append(f"   - –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏: {clean_analysis}")
        steps.append(f"   - –í–∏–∑–Ω–∞—á–∏ –¢–û–ß–ù–£ –ø—Ä–∏—á–∏–Ω—É –Ω–µ–≤–¥–∞—á—ñ")
        
        # –ö–†–û–ö 2: –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è (–Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É)
        if "—Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏" in problem_analysis.lower():
            steps.append("–ö–†–û–ö 2: –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º")
            steps.append("   - –ü–µ—Ä–µ–≤—ñ—Ä –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
            steps.append("   - –í–∏–∑–Ω–∞—á–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        elif "–Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ" in problem_analysis.lower():
            steps.append("–ö–†–û–ö 2: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤")
            steps.append("   - –í–∏–∑–Ω–∞—á–∏ —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏")
            steps.append("   - –°–ø—Ä–æ–±—É–π —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
        else:
            steps.append("–ö–†–û–ö 2: –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è")
            steps.append("   - –†–æ–∑–±–∏–π –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –º–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏")
            steps.append("   - –í–∏–∑–Ω–∞—á–∏ –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π –ø—ñ–¥—Ö—ñ–¥")
        
        # –ö–†–û–ö 3: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ –∞–¥–∞–ø—Ç–∞—Ü—ñ—î—é
        steps.append(f"–ö–†–û–ö 3: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ –∞–¥–∞–ø—Ç–∞—Ü—ñ—î—é (—Å–ø—Ä–æ–±–∞ #{attempt + 1})")
        steps.append("   - –í–∏–∫–æ–Ω—É–π –∫–æ–∂–Ω—É —á–∞—Å—Ç–∏–Ω—É –æ–∫—Ä–µ–º–æ")
        steps.append("   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É")
        steps.append("   - –Ø–∫—â–æ —â–æ—Å—å –Ω–µ –ø—Ä–∞—Ü—é—î - –Ω–µ–≥–∞–π–Ω–æ –∞–¥–∞–ø—Ç—É–π—Å—è")
        
        # –ö–†–û–ö 4: –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è  
        steps.append("–ö–†–û–ö 4: –ü–æ—Å—Ç—ñ–π–Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è")
        steps.append("   - –ü–µ—Ä–µ–≤—ñ—Ä—è–π —á–∏ –¥–æ—Å—è–≥–∞—î—Ç—å—Å—è –º–µ—Ç–∞")
        steps.append("   - –î–æ–∫—É–º–µ–Ω—Ç—É–π —â–æ –ø—Ä–∞—Ü—é—î, —â–æ –Ω—ñ")
        steps.append("   - –ü—Ä–æ–¥–æ–≤–∂—É–π –¥–æ –ø–æ–≤–Ω–æ–≥–æ —É—Å–ø—ñ—Ö—É")
        
        return "\n".join(steps)

    def _define_expected_result(self, original_task: str) -> str:
        """üéØ –Ü–ù–¢–ï–õ–ï–ö–¢–£–ê–õ–¨–ù–ï –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ AI –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            ai_result = self._ai_define_expected_outcome(original_task)
            if ai_result:
                return ai_result
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: {e}")
        
        # Fallback: —Å–µ–º–∞–Ω—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–∏
        return self._semantic_goal_extraction(original_task)

    def _ai_define_expected_outcome(self, original_task: str) -> str:
        """ü§ñ AI –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ LLM"""
        # TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ LLM –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–∏
        return None

    def _semantic_goal_extraction(self, original_task: str) -> str:
        """üîç –°–µ–º–∞–Ω—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        task_lower = original_task.lower()
        
        # –ü–æ—à—É–∫ –¥—ñ—î—Å–ª—ñ–≤ –¥—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–∏
        if any(verb in task_lower for verb in ['–≤—ñ–¥–∫—Ä–∏–π', '–∑–∞–ø—É—Å—Ç–∏', 'open', 'launch', 'start']):
            # –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—É—Å–∫
            program = self._extract_program_name(original_task)
            return f"–ü—Ä–æ–≥—Ä–∞–º–∞ {program} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —ñ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏"
        
        elif any(verb in task_lower for verb in ['–æ–±—á–∏—Å–ª–∏', '–ø–æ—Å—á–∏—Ç–∞–π', 'calculate', 'compute']):
            # –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è  
            calculation = self._extract_calculation(original_task)
            return f"–í–∏–∫–æ–Ω–∞–Ω–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: {calculation} –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"
        
        elif any(verb in task_lower for verb in ['—Å—Ç–≤–æ—Ä–∏', '–∑—Ä–æ–±–∏', 'create', 'make']):
            # –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            target = self._extract_target_object(original_task)
            return f"–£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {target}"
        
        elif any(verb in task_lower for verb in ['–∑–Ω–∞–π–¥–∏', '—à—É–∫–∞–π', 'find', 'search']):
            # –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –ø–æ—à—É–∫
            search_target = self._extract_search_target(original_task)
            return f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –Ω–∞–¥–∞–Ω–æ: {search_target}"
        
        else:
            # –ó–∞–≥–∞–ª—å–Ω–∞ –º–µ—Ç–∞
            return f"–ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task.strip()}"

    def _extract_program_name(self, task: str) -> str:
        """–í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –ü—Ä–æ—Å—Ç–∏–π regex –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–∑–≤ –ø—Ä–æ–≥—Ä–∞–º
        import re
        programs = re.findall(r'\b([A-Z][a-zA-Z]*(?:\s[A-Z][a-zA-Z]*)?)\b', task)
        if programs:
            return programs[0] if isinstance(programs[0], str) else programs[0][0]
        return "—Ü—ñ–ª—å–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É"

    def _extract_calculation(self, task: str) -> str:
        """–í–∏—Ç—è–≥—É—î –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        import re
        # –®—É–∫–∞—î–º–æ —á–∏—Å–ª–∞ —Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        numbers = re.findall(r'\b\d+\b', task)
        operations = re.findall(r'[+\-*/√ó√∑]', task)
        
        if len(numbers) >= 2:
            return f"{numbers[0]} {operations[0] if operations else '√ó'} {numbers[1]}"
        return "–æ–±—á–∏—Å–ª–µ–Ω–Ω—è"

    def _extract_target_object(self, task: str) -> str:
        """–í–∏—Ç—è–≥—É—î –æ–±'—î–∫—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        # –®—É–∫–∞—î–º–æ —ñ–º–µ–Ω–Ω–∏–∫–∏ –ø—ñ—Å–ª—è –¥—ñ—î—Å–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        task_words = task.lower().split()
        create_verbs = ['—Å—Ç–≤–æ—Ä–∏', '–∑—Ä–æ–±–∏', 'create', 'make']
        
        for i, word in enumerate(task_words):
            if word in create_verbs and i + 1 < len(task_words):
                return ' '.join(task_words[i+1:i+3])  # –Ω–∞—Å—Ç—É–ø–Ω—ñ 1-2 —Å–ª–æ–≤–∞
        return "—Ü—ñ–ª—å–æ–≤–∏–π –æ–±'—î–∫—Ç"

    def _extract_search_target(self, task: str) -> str:
        """–í–∏—Ç—è–≥—É—î –æ–±'—î–∫—Ç –ø–æ—à—É–∫—É"""
        task_words = task.lower().split()
        search_verbs = ['–∑–Ω–∞–π–¥–∏', '—à—É–∫–∞–π', 'find', 'search']
        
        for i, word in enumerate(task_words):
            if word in search_verbs and i + 1 < len(task_words):
                return ' '.join(task_words[i+1:i+3])  # –Ω–∞—Å—Ç—É–ø–Ω—ñ 1-2 —Å–ª–æ–≤–∞
        return "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É"

    def _execute_task_retry(self, session_name: str, retry_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á—ñ–π —Å–µ—Å—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            logger.info(f"üîÑ SessionManager: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
            
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request(f"/sessions/{session_name}/message", "POST", {
                    "message": retry_message,
                    "resume": True
                })
                
                if result["success"]:
                    session_data = result["data"]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
                    if session_name in self.active_sessions:
                        self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                        self.active_sessions[session_name]["message_count"] += 1
                    
                    return {
                        "success": True,
                        "session_name": session_name,
                        "response": session_data.get("response", ""),
                        "stderr": session_data.get("stderr", ""),
                        "return_code": session_data.get("return_code", 0)
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏: {result['error']}")
                    # Fallback –¥–æ CLI
                    return self._execute_task_retry_cli(session_name, retry_message)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI
                return self._execute_task_retry_cli(session_name, retry_message)
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _execute_task_retry_cli(self, session_name: str, retry_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ CLI (fallback –º–µ—Ç–æ–¥)"""
        try:
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            cmd = [self.goose_binary, "session", "--name", session_name, "--resume"]
            
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            input_text = f"{retry_message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—Ç–æ—Ä–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {repr(input_text[:200])}...")
            
            stdout, stderr = process.communicate(input=input_text)
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ (return_code: {process.returncode})")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
            if session_name in self.active_sessions:
                self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                self.active_sessions[session_name]["message_count"] += 1
            
            return {
                "success": process.returncode == 0,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ CLI: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def create_session(self, session_name: str, initial_message: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Goose –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            logger.info(f"üÜï SessionManager: –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—É —Å–µ—Å—ñ—é '{session_name}'")
            
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request("/sessions", "POST", {
                    "name": session_name,
                    "message": initial_message or ""
                })
                
                if result["success"]:
                    session_data = result["data"]
                    self.active_sessions[session_name] = {
                        "created": datetime.now().isoformat(),
                        "last_used": datetime.now().isoformat(),
                        "message_count": 1 if initial_message else 0
                    }
                    
                    return {
                        "success": True,
                        "session_name": session_name,
                        "created": True,
                        "response": session_data.get("response", "")
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {result['error']}")
                    # Fallback –¥–æ CLI
                    return self._create_session_cli(session_name, initial_message)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI
                return self._create_session_cli(session_name, initial_message)
                
        except Exception as e:
            logger.error(f"ÔøΩ –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _create_session_cli(self, session_name: str, initial_message: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ CLI (fallback –º–µ—Ç–æ–¥)"""
        try:
            if initial_message:
                logger.info(f"ÔøΩüìù –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {initial_message}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
                cmd = [self.goose_binary, "session", "--name", session_name]
                
                logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=self.goose_path,
                    env=self._get_goose_env()
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
                input_text = f"{initial_message}\nexit\n"
                logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
                
                stdout, stderr = process.communicate(input=input_text)  # –ë–µ–∑ —Ç–∞–π–º-–∞—É—Ç—É
                
                logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
                logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
                if stderr:
                    logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if process.returncode != 0:
                    logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: {process.returncode}")
                    return {
                        "success": False,
                        "error": f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. STDERR: {stderr}",
                        "session_name": session_name,
                        "stdout": stdout
                    }
                
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 1
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": stdout
                }
            else:
                # –ü—Ä–æ—Å—Ç–æ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Å–µ—Å—ñ—é
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 0
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": "Session registered"
                }
                
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó CLI: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def send_to_session(self, session_name: str, message: str, resume: bool = True) -> Dict:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            logger.info(f"üîó SessionManager: –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –¥–æ —Å–µ—Å—ñ—ó '{session_name}'")
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {message}")
            
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request(f"/sessions/{session_name}/message", "POST", {
                    "message": message,
                    "resume": resume
                })
                
                if result["success"]:
                    session_data = result["data"]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
                    if session_name in self.active_sessions:
                        self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                        self.active_sessions[session_name]["message_count"] += 1
                    
                    return {
                        "success": True,
                        "session_name": session_name,
                        "response": session_data.get("response", ""),
                        "stderr": session_data.get("stderr", ""),
                        "return_code": session_data.get("return_code", 0)
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {result['error']}")
                    # Fallback –¥–æ CLI
                    return self._send_to_session_cli(session_name, message, resume)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CLI
                return self._send_to_session_cli(session_name, message, resume)
            
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–æ —Å–µ—Å—ñ—ó: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _send_to_session_cli(self, session_name: str, message: str, resume: bool = True) -> Dict:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ CLI (fallback –º–µ—Ç–æ–¥)"""
        try:
            if resume:
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                cmd = [self.goose_binary, "session", "--name", session_name, "--resume"]
            else:
                # –ù–æ–≤–∞ —Å–µ—Å—ñ—è –∑ —ñ–º–µ–Ω–µ–º
                cmd = [self.goose_binary, "session", "--name", session_name]
            
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            input_text = f"{message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
            
            stdout, stderr = process.communicate(input=input_text)  # –ë–µ–∑ —Ç–∞–π–º-–∞—É—Ç—É - –Ω–µ—Ö–∞–π –ì—Ä—ñ—à–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
            logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
            if stderr:
                logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
            if session_name in self.active_sessions:
                self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                self.active_sessions[session_name]["message_count"] += 1
            
            return {
                "success": True,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "Timeout: Session took too long to respond",
                "session_name": session_name
            }
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–æ —Å–µ—Å—ñ—ó CLI: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def determine_session_strategy(self, intent_analysis: Dict, session_strategy: Dict) -> Dict:
        """–í–∏–∑–Ω–∞—á–∞—î —è–∫ —Å–∞–º–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É"""
        strategy = session_strategy.get("strategy", "new")
        session_name = session_strategy.get("session_name")
        
        if strategy == "continue" and session_name:
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
            return {
                "action": "resume_session",
                "session_name": session_name,
                "resume": True
            }
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
            # –Ø–∫—â–æ —ñ–º'—è —Å–µ—Å—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É/—á–∞—Å
            if not session_name:
                session_name = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
            return {
                "action": "create_session", 
                "session_name": session_name,
                "resume": False
            }

    def execute_command(self, message: str, intent_analysis: Dict, session_strategy: Dict, grisha_instance = None) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ"""
        execution_plan = self.determine_session_strategy(intent_analysis, session_strategy)
        
        if execution_plan["action"] == "resume_session":
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–µ—Å—ñ—é
            result = self.send_to_session(
                execution_plan["session_name"], 
                message, 
                resume=True
            )
            result["execution_type"] = "session_resume"
            
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥ –ì—Ä—ñ—à—ñ
            session_name = execution_plan["session_name"]
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ —è–∫—â–æ –ì—Ä—ñ—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            if grisha_instance and self._is_task_message(message):
                result = self.create_session_with_verification(session_name, message, grisha_instance)
                result["execution_type"] = "session_create_verified"
            else:
                result = self.create_session(session_name, message)
                result["execution_type"] = "session_create"
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        result["timestamp"] = datetime.now().isoformat()
        result["intent"] = intent_analysis.get("intent", "unknown")
        result["confidence"] = intent_analysis.get("confidence", 0.0)
        
        return result

    def _is_task_message(self, message: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –∑–∞–≤–¥–∞–Ω–Ω—è–º —â–æ –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
        try:
            # –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –º—ñ—Å—Ç—è—Ç—å –¥—ñ—î—Å–ª–æ–≤–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            task_indicators = [
                '–≤–∏–∫–æ–Ω–∞–π', '—Å—Ç–≤–æ—Ä–∏', '–∑–∞–ø—É—Å—Ç–∏', '–≤—ñ–¥–∫—Ä–∏–π', '–∑–Ω–∞–π–¥–∏', '—É—Å—Ç–∞–Ω–æ–≤–∏', 
                '–∑–∞–≤–∞–Ω—Ç–∞–∂', '–ø–µ—Ä–µ–≤—ñ—Ä', '–ø–µ—Ä–µ–≥–ª—è–¥', '–∞–Ω–∞–ª—ñ–∑—É–π', '–≥–µ–Ω–µ—Ä—É–π'
            ]
            
            message_lower = message.lower()
            has_indicators = any(indicator in message_lower for indicator in task_indicators)
            is_long_enough = len(message) > 20
            
            print(f"üîç SessionManager: _is_task_message - –¥–æ–≤–∂–∏–Ω–∞: {len(message)}, —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏: {has_indicators}")
            return is_long_enough and has_indicators
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ _is_task_message: {e}")
            return False

    def get_session_status(self, session_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request(f"/sessions/{session_name}/status", "GET")
                if result["success"]:
                    session_data = result["data"]
                    return {
                        "name": session_name,
                        "status": session_data.get("status", "unknown"),
                        "created": session_data.get("created"),
                        "last_used": session_data.get("last_used"),
                        "message_count": session_data.get("message_count", 0),
                        "active": session_data.get("active", False)
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Å—ñ—ó: {result['error']}")
                    # Fallback –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
                    return self._get_session_status_local(session_name)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
                return self._get_session_status_local(session_name)
            
        except Exception as e:
            logger.error(f"Error getting session status: {e}")
            return None

    def _get_session_status_local(self, session_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó (fallback –º–µ—Ç–æ–¥)"""
        if session_name in self.active_sessions:
            session_data = self.active_sessions[session_name]
            return {
                "name": session_name,
                "status": "active",
                "created": session_data.get("created"),
                "last_used": session_data.get("last_used"),
                "message_count": session_data.get("message_count", 0),
                "active": True
            }
        return None

    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó (–í–Ü–î–ö–õ–Æ–ß–ï–ù–û - —Å–µ—Å—ñ—ó –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º)"""
        # –ó–ú–Ü–ù–ê: –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π
        # –°–µ—Å—ñ—ó —Ç–µ–ø–µ—Ä –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑–∞ —è–≤–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logger.info("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ. –°–µ—Å—ñ—ó –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
        return {"removed_sessions": [], "remaining": len(self.active_sessions), "auto_cleanup_disabled": True}

    def close_session_by_user(self, session_name: str, user_context: Dict = None) -> Dict:
        """–ó–∞–∫—Ä–∏–≤–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å–µ—Å—ñ—é –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é HTTP API"""
        try:
            if self.use_http_api:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP API
                result = self._send_api_request(f"/sessions/{session_name}", "DELETE")
                if result["success"]:
                    # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                    if session_name in self.active_sessions:
                        session_data = self.active_sessions[session_name]
                        del self.active_sessions[session_name]
                    
                    if session_name in self.session_contexts:
                        del self.session_contexts[session_name]
                    
                    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ —Å–µ—Å—ñ—é '{session_name}' —á–µ—Ä–µ–∑ API")
                    return {
                        "success": True,
                        "message": f"–°–µ—Å—ñ—è '{session_name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞",
                        "closed_session": session_data if 'session_data' in locals() else {},
                        "remaining_sessions": len(self.active_sessions)
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó: {result['error']}")
                    # Fallback –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è
                    return self._close_session_local(session_name, user_context)
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
                return self._close_session_local(session_name, user_context)
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å–µ—Å—ñ—ó: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _close_session_local(self, session_name: str, user_context: Dict = None) -> Dict:
        """–ó–∞–∫—Ä–∏–≤–∞—î —Å–µ—Å—ñ—é –ª–æ–∫–∞–ª—å–Ω–æ (fallback –º–µ—Ç–æ–¥)"""
        if session_name in self.active_sessions:
            session_data = self.active_sessions[session_name]
            del self.active_sessions[session_name]
            
            # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if session_name in self.session_contexts:
                del self.session_contexts[session_name]
            
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ —Å–µ—Å—ñ—é '{session_name}' –ª–æ–∫–∞–ª—å–Ω–æ")
            return {
                "success": True,
                "message": f"–°–µ—Å—ñ—è '{session_name}' —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞",
                "closed_session": session_data,
                "remaining_sessions": len(self.active_sessions)
            }
        else:
            logger.warning(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ –∑–∞–∫—Ä–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é '{session_name}'")
            return {
                "success": False,
                "error": f"–°–µ—Å—ñ—è '{session_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                "available_sessions": list(self.active_sessions.keys())
            }

    def close_all_sessions_by_user(self, user_context: Dict = None) -> Dict:
        """–ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ —Å–µ—Å—ñ—ó –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        closed_sessions = list(self.active_sessions.keys())
        session_count = len(closed_sessions)
        
        self.active_sessions.clear()
        self.session_contexts.clear()
        
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏–≤ –≤—Å—ñ —Å–µ—Å—ñ—ó ({session_count} —Å–µ—Å—ñ–π)")
        return {
            "success": True,
            "message": f"–í—Å—ñ —Å–µ—Å—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç—ñ ({session_count} —Å–µ—Å—ñ–π)",
            "closed_sessions": closed_sessions,
            "remaining_sessions": 0
        }

    def list_active_sessions_for_user(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        sessions_info = []
        for session_name, session_data in self.active_sessions.items():
            sessions_info.append({
                "name": session_name,
                "created": session_data.get("created"),
                "last_used": session_data.get("last_used"),
                "message_count": session_data.get("message_count", 0),
                "status": "active"
            })
        
        return {
            "active_sessions": sessions_info,
            "total_count": len(sessions_info),
            "auto_cleanup_disabled": True
        }

    def _get_goose_env(self) -> Dict[str, str]:
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = f"{self.goose_path}/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def get_stats(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—ñ–π"""
        total_sessions = len(self.active_sessions)
        total_messages = sum(session.get("message_count", 0) for session in self.active_sessions.values())
        
        return {
            "total_active_sessions": total_sessions,
            "total_messages_sent": total_messages,
            "active_session_names": list(self.active_sessions.keys()),
            "goose_path": self.goose_path,
            "goose_available": Path(self.goose_binary).exists()
        }

    def get_session_correction_history(self, session_name: str) -> Dict:
        """
        üÜï –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ç—Ä–∏–º—É—î —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –¥–ª—è —Å–µ—Å—ñ—ó
        –ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Å–ø—Ä–æ–±–∏ Atlas –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—ñ–¥–±–µ–∫—É –ì—Ä—ñ—à—ñ
        """
        if session_name not in self.session_contexts:
            return {
                "session_name": session_name,
                "correction_history": [],
                "total_attempts": 0
            }
        
        context = self.session_contexts[session_name]
        corrections = []
        
        for key, data in context.items():
            if key.startswith("correction_attempt_"):
                attempt_num = key.replace("correction_attempt_", "")
                corrections.append({
                    "attempt": int(attempt_num),
                    "detailed_task": data.get("detailed_task", ""),
                    "grisha_feedback": data.get("grisha_feedback", ""),
                    "timestamp": data.get("timestamp", ""),
                    "task_length": len(data.get("detailed_task", "")),
                    "feedback_summary": data.get("grisha_feedback", "")[:100] + "..." if len(data.get("grisha_feedback", "")) > 100 else data.get("grisha_feedback", "")
                })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ø—Ä–æ–±–∏
        corrections.sort(key=lambda x: x["attempt"])
        
        return {
            "session_name": session_name,
            "correction_history": corrections,
            "total_attempts": len(corrections),
            "last_correction": corrections[-1] if corrections else None
        }

    def get_all_correction_statistics(self) -> Dict:
        """
        üÜï –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å Atlas
        –ü–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        """
        total_corrections = 0
        sessions_with_corrections = 0
        correction_details = {}
        
        for session_name, context in self.session_contexts.items():
            session_corrections = 0
            for key in context.keys():
                if key.startswith("correction_attempt_"):
                    session_corrections += 1
                    total_corrections += 1
            
            if session_corrections > 0:
                sessions_with_corrections += 1
                correction_details[session_name] = {
                    "attempts": session_corrections,
                    "last_feedback": context.get(f"correction_attempt_{session_corrections}", {}).get("grisha_feedback", "")[:50]
                }
        
        return {
            "total_correction_attempts": total_corrections,
            "sessions_with_corrections": sessions_with_corrections,
            "sessions_without_corrections": len(self.active_sessions) - sessions_with_corrections,
            "average_corrections_per_session": total_corrections / max(1, sessions_with_corrections),
            "correction_details": correction_details,
            "system_effectiveness": "Active" if total_corrections > 0 else "Standby"
        }
