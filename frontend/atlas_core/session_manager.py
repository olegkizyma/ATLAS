"""
Session Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ Goose
–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –í–∏–∑–Ω–∞—á–∞—Ç–∏ —Ç–∏–ø —Å–µ—Å—ñ—ó (–Ω–æ–≤–∞/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)
2. –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Å–µ—Å—ñ—è–º–∏
3. –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ–π
4. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –∑ Goose CLI
"""

import json
import subprocess
import os
import re
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Goose"""
    
    def __init__(self, goose_path: str = "/Users/dev/Documents/GitHub/ATLAS/goose"):
        self.goose_path = goose_path
        self.goose_binary = f"{goose_path}/target/release/goose"
        self.active_sessions = {}
        self.session_contexts = {}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Goose
        if not Path(self.goose_binary).exists():
            raise FileNotFoundError(f"Goose binary not found at {self.goose_binary}")

    def get_available_sessions(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π –∑ Goose"""
        try:
            result = subprocess.run(
                [self.goose_binary, "session", "list"],
                capture_output=True,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env(),
                timeout=30
            )
            
            if result.returncode != 0:
                return []
            
            # –ü–∞—Ä—Å–∏–º–æ –≤–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ session list
            sessions = []
            for line in result.stdout.split('\n'):
                if ' - ' in line and not line.startswith('Available sessions:'):
                    parts = line.strip().split(' - ', 2)
                    if len(parts) >= 2:
                        session_name = parts[0].strip()
                        description = parts[1].strip() if len(parts) > 1 else "No description"
                        timestamp_str = parts[2].strip() if len(parts) > 2 else ""
                        
                        sessions.append({
                            "name": session_name,
                            "description": description,
                            "timestamp": timestamp_str,
                            "active": session_name in self.active_sessions
                        })
            
            return sessions
            
        except Exception as e:
            print(f"Error getting sessions: {e}")
            return []

    def create_session(self, session_name: str, initial_message: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Goose"""
        try:
            logger.info(f"üÜï SessionManager: –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—É —Å–µ—Å—ñ—é '{session_name}'")
            
            if initial_message:
                logger.info(f"üìù –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {initial_message}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
                cmd = [self.goose_binary, "session", "--name", session_name]
                
                logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=self.goose_path,
                    env=self._get_goose_env()
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
                input_text = f"{initial_message}\nexit\n"
                logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
                
                stdout, stderr = process.communicate(input=input_text, timeout=60)
                
                logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
                logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
                if stderr:
                    logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if process.returncode != 0:
                    logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: {process.returncode}")
                    return {
                        "success": False,
                        "error": f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. STDERR: {stderr}",
                        "session_name": session_name,
                        "stdout": stdout
                    }
                
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 1
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": stdout
                }
            else:
                # –ü—Ä–æ—Å—Ç–æ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Å–µ—Å—ñ—é
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 0
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": "Session registered"
                }
                
        except subprocess.TimeoutExpired:
            logger.error(f"‚è∞ –û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç —á–∞—Å—É 60—Å")
            process.kill()
            return {
                "success": False,
                "error": "–û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ –ª—ñ–º—ñ—Ç —á–∞—Å—É 60—Å",
                "session_name": session_name
            }
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def send_to_session(self, session_name: str, message: str, resume: bool = True) -> Dict:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é"""
        try:
            logger.info(f"üîó SessionManager: –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –¥–æ —Å–µ—Å—ñ—ó '{session_name}'")
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {message}")
            
            if resume:
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                cmd = [self.goose_binary, "session", "--name", session_name, "--resume"]
            else:
                # –ù–æ–≤–∞ —Å–µ—Å—ñ—è –∑ —ñ–º–µ–Ω–µ–º
                cmd = [self.goose_binary, "session", "--name", session_name]
            
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            input_text = f"{message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
            
            stdout, stderr = process.communicate(input=input_text, timeout=300)  # 5 —Ö–≤–∏–ª–∏–Ω
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
            logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
            if stderr:
                logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
            if session_name in self.active_sessions:
                self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                self.active_sessions[session_name]["message_count"] += 1
            
            return {
                "success": True,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "Timeout: Session took too long to respond",
                "session_name": session_name
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def determine_session_strategy(self, intent_analysis: Dict, session_strategy: Dict) -> Dict:
        """–í–∏–∑–Ω–∞—á–∞—î —è–∫ —Å–∞–º–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É"""
        strategy = session_strategy.get("strategy", "new")
        session_name = session_strategy.get("session_name")
        
        if strategy == "continue" and session_name:
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
            return {
                "action": "resume_session",
                "session_name": session_name,
                "resume": True
            }
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
            # –Ø–∫—â–æ —ñ–º'—è —Å–µ—Å—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É/—á–∞—Å
            if not session_name:
                session_name = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
            return {
                "action": "create_session", 
                "session_name": session_name,
                "resume": False
            }

    def execute_command(self, message: str, intent_analysis: Dict, session_strategy: Dict) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ —Å–µ—Å—ñ—ó"""
        execution_plan = self.determine_session_strategy(intent_analysis, session_strategy)
        
        if execution_plan["action"] == "resume_session":
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–µ—Å—ñ—é
            result = self.send_to_session(
                execution_plan["session_name"], 
                message, 
                resume=True
            )
            result["execution_type"] = "session_resume"
            
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
            session_name = execution_plan["session_name"]
            result = self.create_session(session_name, message)
            result["execution_type"] = "session_create"
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        result["timestamp"] = datetime.now().isoformat()
        result["intent"] = intent_analysis.get("intent", "unknown")
        result["confidence"] = intent_analysis.get("confidence", 0.0)
        
        return result

    def get_session_status(self, session_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó"""
        if session_name in self.active_sessions:
            return self.active_sessions[session_name]
        return None

    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó"""
        current_time = datetime.now()
        to_remove = []
        
        for session_name, session_data in self.active_sessions.items():
            last_used = datetime.fromisoformat(session_data["last_used"])
            age_hours = (current_time - last_used).total_seconds() / 3600
            
            if age_hours > max_age_hours:
                to_remove.append(session_name)
        
        for session_name in to_remove:
            del self.active_sessions[session_name]
        
        return {"removed_sessions": to_remove, "remaining": len(self.active_sessions)}

    def _get_goose_env(self) -> Dict[str, str]:
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = f"{self.goose_path}/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def get_stats(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—ñ–π"""
        total_sessions = len(self.active_sessions)
        total_messages = sum(session.get("message_count", 0) for session in self.active_sessions.values())
        
        return {
            "total_active_sessions": total_sessions,
            "total_messages_sent": total_messages,
            "active_session_names": list(self.active_sessions.keys()),
            "goose_path": self.goose_path,
            "goose_available": Path(self.goose_binary).exists()
        }
