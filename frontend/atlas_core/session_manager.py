"""
Session Manager - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ Goose
–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –í–∏–∑–Ω–∞—á–∞—Ç–∏ —Ç–∏–ø —Å–µ—Å—ñ—ó (–Ω–æ–≤–∞/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)
2. –ö–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Å–µ—Å—ñ—è–º–∏
3. –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—ñ–π
4. –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏—Å—è –∑ Goose CLI
"""

import json
import subprocess
import os
import re
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)


class SessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Goose"""
    
    def __init__(self, goose_path: str = "/Users/dev/Documents/GitHub/ATLAS/goose"):
        self.goose_path = goose_path
        self.goose_binary = f"{goose_path}/target/release/goose"
        self.active_sessions = {}
        self.session_contexts = {}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Goose
        if not Path(self.goose_binary).exists():
            raise FileNotFoundError(f"Goose binary not found at {self.goose_binary}")

    def get_available_sessions(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π –∑ Goose"""
        try:
            result = subprocess.run(
                [self.goose_binary, "session", "list"],
                capture_output=True,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env(),
                timeout=30
            )
            
            if result.returncode != 0:
                return []
            
            # –ü–∞—Ä—Å–∏–º–æ –≤–∏–≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ session list
            sessions = []
            for line in result.stdout.split('\n'):
                if ' - ' in line and not line.startswith('Available sessions:'):
                    parts = line.strip().split(' - ', 2)
                    if len(parts) >= 2:
                        session_name = parts[0].strip()
                        description = parts[1].strip() if len(parts) > 1 else "No description"
                        timestamp_str = parts[2].strip() if len(parts) > 2 else ""
                        
                        sessions.append({
                            "name": session_name,
                            "description": description,
                            "timestamp": timestamp_str,
                            "active": session_name in self.active_sessions
                        })
            
            return sessions
            
        except Exception as e:
            print(f"Error getting sessions: {e}")
            return []

    def create_session_with_verification(self, session_name: str, initial_message: str, grisha_instance = None) -> Dict:
        """
        –°—Ç–≤–æ—Ä—é—î —Å–µ—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥ –ì—Ä—ñ—à—ñ
        –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - Atlas —Ü–∏–∫–ª—ñ—á–Ω–æ –¥–∞—î –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        """
        try:
            logger.info(f"üÜï SessionManager: –°—Ç–≤–æ—Ä—é—é —Å–µ—Å—ñ—é –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é '{session_name}'")
            logger.info(f"üìù –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {initial_message}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à—É —Å–ø—Ä–æ–±—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            execution_result = self._execute_task_attempt(session_name, initial_message)
            
            if not execution_result["success"]:
                return execution_result
            
            # –Ø–∫—â–æ –ì—Ä—ñ—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            if grisha_instance:
                verification_cycle_result = self._run_verification_cycle(
                    session_name, initial_message, execution_result, grisha_instance
                )
                return verification_cycle_result
            else:
                # –ë–µ–∑ –ì—Ä—ñ—à—ñ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return execution_result
                
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _execute_task_attempt(self, session_name: str, task_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose"""
        try:
            cmd = [self.goose_binary, "session", "--name", session_name]
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            input_text = f"{task_message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
            
            stdout, stderr = process.communicate(input=input_text)
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
            logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
            
            if process.returncode != 0:
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: {process.returncode}")
                return {
                    "success": False,
                    "error": f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. STDERR: {stderr}",
                    "session_name": session_name,
                    "stdout": stdout
                }
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é
            self.active_sessions[session_name] = {
                "created": datetime.now().isoformat(),
                "last_used": datetime.now().isoformat(),
                "message_count": 1,
                "task_description": task_message
            }
            
            return {
                "success": True,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def _run_verification_cycle(self, session_name: str, original_task: str, execution_result: Dict, grisha_instance) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞—î —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ –ì—Ä–∏—à–µ—é:
        1. –ì—Ä—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–ª–∞—Å–Ω—É —Å–µ—Å—ñ—é
        2. –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - Atlas –¥–∞—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è  
        3. –ü–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è –¥–æ —É—Å–ø—ñ—Ö—É –∞–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —Å–ø—Ä–æ–±
        """
        max_attempts = 3
        attempt = 1
        
        logger.info(f"üîÑ SessionManager: –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
        
        while attempt <= max_attempts:
            logger.info(f"üïµÔ∏è SessionManager: –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {attempt}/{max_attempts}")
            
            try:
                # –ì—Ä—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
                verification_result = grisha_instance.verify_task_completion(
                    original_task, 
                    session_info={"name": session_name, "attempt": attempt}
                )
                
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ: {verification_result}")
                
                # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ
                if verification_result.get("task_completed", False):
                    logger.info(f"‚úÖ –ì—Ä—ñ—à–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —É—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è!")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç—Ä–µ–±–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–µ—Å—ñ—é –∞–∫—Ç–∏–≤–Ω–æ—é
                    should_keep_alive = verification_result.get("should_continue_session", False)
                    
                    if should_keep_alive:
                        logger.info(f"‚è≥ –°–µ—Å—ñ—è '{session_name}' –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é")
                        return {
                            "success": True,
                            "session_name": session_name,
                            "response": execution_result.get("response", ""),
                            "task_completed": True,
                            "session_alive": True,
                            "verification_details": verification_result.get("verification_details", "")
                        }
                    else:
                        logger.info(f"üîö –°–µ—Å—ñ—è '{session_name}' –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–∫—Ä–∏—Ç–∞")
                        return {
                            "success": True,
                            "session_name": session_name,
                            "response": execution_result.get("response", ""),
                            "task_completed": True,
                            "session_alive": False,
                            "verification_details": verification_result.get("verification_details", "")
                        }
                
                # –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ - –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
                else:
                    logger.warning(f"‚ùå –ì—Ä—ñ—à–∞ –≤–∏–∑–Ω–∞—á–∏–≤ —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ: {verification_result.get('verification_details', '')}")
                    
                    next_action = verification_result.get("next_action")
                    
                    if next_action == "retry_task" and attempt < max_attempts:
                        logger.info(f"üîÑ Atlas: –î–∞—é –ø–æ–≤—Ç–æ—Ä–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
                        
                        # –§–æ—Ä–º—É—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
                        retry_message = self._generate_retry_message(original_task, verification_result, attempt)
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É
                        retry_result = self._execute_task_retry(session_name, retry_message)
                        
                        if retry_result["success"]:
                            execution_result = retry_result
                            attempt += 1
                            continue
                        else:
                            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ–π —Å–ø—Ä–æ–±—ñ: {retry_result.get('error')}")
                            break
                    
                    elif next_action == "modify_approach" and attempt < max_attempts:
                        logger.info(f"üîß Atlas: –ú–æ–¥–∏—Ñ—ñ–∫—É—é –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
                        
                        # –ì–µ–Ω–µ—Ä—É—î–º–æ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                        modified_message = self._generate_modified_approach(original_task, verification_result, attempt)
                        
                        # –í–∏–∫–æ–Ω—É—î–º–æ –∑ –Ω–æ–≤–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º
                        modified_result = self._execute_task_retry(session_name, modified_message)
                        
                        if modified_result["success"]:
                            execution_result = modified_result
                            attempt += 1
                            continue
                        else:
                            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–º—É –ø—ñ–¥—Ö–æ–¥—ñ: {modified_result.get('error')}")
                            break
                    
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –º–æ–∂—É –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: {next_action}, —Å–ø—Ä–æ–±–∞ {attempt}/{max_attempts}")
                        break
                        
            except Exception as e:
                logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}")
                break
        
        # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ - –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±
        logger.error(f"‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–±")
        return {
            "success": False,
            "session_name": session_name,
            "response": execution_result.get("response", ""),
            "task_completed": False,
            "error": f"–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—ñ—Å–ª—è {max_attempts} —Å–ø—Ä–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
            "verification_details": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –ø–µ—Ä–µ–≤–∏—â–µ–Ω–∞"
        }

    def _generate_retry_message(self, original_task: str, verification_result: Dict, attempt: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏"""
        retry_details = verification_result.get("verification_details", "")
        
        return f"""–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å–ø—Ä–æ–±–∞ –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∫–æ–Ω–∞–ª–∞ –∑–∞–≤–¥–∞–Ω–Ω—è.

–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task}

–î–µ—Ç–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {retry_details}

–°–ø—Ä–æ–±–∞ #{attempt + 1}: –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ –∞–±–æ –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏.

–î–∏—Ä–µ–∫—Ç–∏–≤–∏:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —â–æ —Å–∞–º–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø—Ä–æ–±—ñ
2. –°–ø—Ä–æ–±—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ–π—Å–Ω–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ
4. –ü—Ä–æ–¥–æ–≤–∂—É–π –¥–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à —É—Å–ø—ñ—Ö—É"""

    def _generate_modified_approach(self, original_task: str, verification_result: Dict, attempt: int) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        verification_details = verification_result.get("verification_details", "")
        
        return f"""–ü–æ—Ç—Ä—ñ–±–µ–Ω –Ü–ù–®–ò–ô –ø—ñ–¥—Ö—ñ–¥ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è.

–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {original_task}

–ü—Ä–∏—á–∏–Ω–∞ –∑–º—ñ–Ω–∏ –ø—ñ–¥—Ö–æ–¥—É: {verification_details}

–ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Å–ø—Ä–æ–±–∞ #{attempt + 1}: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ò–ô –º–µ—Ç–æ–¥ –∞–±–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.

–î–∏—Ä–µ–∫—Ç–∏–≤–∏:
1. –ù–ï –ø–æ–≤—Ç–æ—Ä—é–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—ñ–¥—Ö—ñ–¥
2. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
3. –ó–∞—Å—Ç–æ—Å—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –∞–±–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –º–µ—Ç–æ–¥
4. –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –î–û–°–Ø–ì–ù–ï–ù–ù–Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, –Ω–µ –Ω–∞ –º–µ—Ç–æ–¥—ñ
5. –ê–¥–∞–ø—Ç—É–π—Å—è —Ç–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π –¥–æ —É—Å–ø—ñ—Ö—É"""

    def _execute_task_retry(self, session_name: str, retry_message: str) -> Dict:
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤—Ç–æ—Ä–Ω—É —Å–ø—Ä–æ–±—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á—ñ–π —Å–µ—Å—ñ—ó"""
        try:
            logger.info(f"üîÑ SessionManager: –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –¥–ª—è —Å–µ—Å—ñ—ó '{session_name}'")
            
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            cmd = [self.goose_binary, "session", "--name", session_name, "--resume"]
            
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            input_text = f"{retry_message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–≤—Ç–æ—Ä–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {repr(input_text[:200])}...")
            
            stdout, stderr = process.communicate(input=input_text)
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ (return_code: {process.returncode})")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
            if session_name in self.active_sessions:
                self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                self.active_sessions[session_name]["message_count"] += 1
            
            return {
                "success": process.returncode == 0,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def create_session(self, session_name: str, initial_message: str = None) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Goose"""
        try:
            logger.info(f"üÜï SessionManager: –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—É —Å–µ—Å—ñ—é '{session_name}'")
            
            if initial_message:
                logger.info(f"üìù –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {initial_message}")
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
                cmd = [self.goose_binary, "session", "--name", session_name]
                
                logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=self.goose_path,
                    env=self._get_goose_env()
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
                input_text = f"{initial_message}\nexit\n"
                logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
                
                stdout, stderr = process.communicate(input=input_text)  # –ë–µ–∑ —Ç–∞–π–º-–∞—É—Ç—É
                
                logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
                logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
                if stderr:
                    logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                if process.returncode != 0:
                    logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º –ø–æ–º–∏–ª–∫–∏: {process.returncode}")
                    return {
                        "success": False,
                        "error": f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –∫–æ–¥–æ–º {process.returncode}. STDERR: {stderr}",
                        "session_name": session_name,
                        "stdout": stdout
                    }
                
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 1
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": stdout
                }
            else:
                # –ü—Ä–æ—Å—Ç–æ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Å–µ—Å—ñ—é
                self.active_sessions[session_name] = {
                    "created": datetime.now().isoformat(),
                    "last_used": datetime.now().isoformat(),
                    "message_count": 0
                }
                
                return {
                    "success": True,
                    "session_name": session_name,
                    "created": True,
                    "response": "Session registered"
                }
                
        except Exception as e:
            logger.error(f"üí• –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def send_to_session(self, session_name: str, message: str, resume: bool = True) -> Dict:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é"""
        try:
            logger.info(f"üîó SessionManager: –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –¥–æ —Å–µ—Å—ñ—ó '{session_name}'")
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {message}")
            
            if resume:
                # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—é —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                cmd = [self.goose_binary, "session", "--name", session_name, "--resume"]
            else:
                # –ù–æ–≤–∞ —Å–µ—Å—ñ—è –∑ —ñ–º–µ–Ω–µ–º
                cmd = [self.goose_binary, "session", "--name", session_name]
            
            logger.info(f"üöÄ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å
            process = subprocess.Popen(
                cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                cwd=self.goose_path,
                env=self._get_goose_env()
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            input_text = f"{message}\nexit\n"
            logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: {repr(input_text)}")
            
            stdout, stderr = process.communicate(input=input_text)  # –ë–µ–∑ —Ç–∞–π–º-–∞—É—Ç—É - –Ω–µ—Ö–∞–π –ì—Ä—ñ—à–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å
            
            logger.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (return_code: {process.returncode})")
            logger.info(f"üì§ STDOUT: {stdout[:500]}..." if len(stdout) > 500 else f"üì§ STDOUT: {stdout}")
            if stderr:
                logger.warning(f"‚ö†Ô∏è STDERR: {stderr}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ—ó
            if session_name in self.active_sessions:
                self.active_sessions[session_name]["last_used"] = datetime.now().isoformat()
                self.active_sessions[session_name]["message_count"] += 1
            
            return {
                "success": True,
                "session_name": session_name,
                "response": stdout,
                "stderr": stderr,
                "return_code": process.returncode
            }
            
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "error": "Timeout: Session took too long to respond",
                "session_name": session_name
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "session_name": session_name
            }

    def determine_session_strategy(self, intent_analysis: Dict, session_strategy: Dict) -> Dict:
        """–í–∏–∑–Ω–∞—á–∞—î —è–∫ —Å–∞–º–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É"""
        strategy = session_strategy.get("strategy", "new")
        session_name = session_strategy.get("session_name")
        
        if strategy == "continue" and session_name:
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
            return {
                "action": "resume_session",
                "session_name": session_name,
                "resume": True
            }
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
            # –Ø–∫—â–æ —ñ–º'—è —Å–µ—Å—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É/—á–∞—Å
            if not session_name:
                session_name = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
            return {
                "action": "create_session", 
                "session_name": session_name,
                "resume": False
            }

    def execute_command(self, message: str, intent_analysis: Dict, session_strategy: Dict, grisha_instance = None) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ì—Ä—ñ—à—ñ"""
        execution_plan = self.determine_session_strategy(intent_analysis, session_strategy)
        
        if execution_plan["action"] == "resume_session":
            # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–µ—Å—ñ—é
            result = self.send_to_session(
                execution_plan["session_name"], 
                message, 
                resume=True
            )
            result["execution_type"] = "session_resume"
            
        else:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥ –ì—Ä—ñ—à—ñ
            session_name = execution_plan["session_name"]
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ —è–∫—â–æ –ì—Ä—ñ—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç–∞ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            if grisha_instance and self._is_task_message(message):
                result = self.create_session_with_verification(session_name, message, grisha_instance)
                result["execution_type"] = "session_create_verified"
            else:
                result = self.create_session(session_name, message)
                result["execution_type"] = "session_create"
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        result["timestamp"] = datetime.now().isoformat()
        result["intent"] = intent_analysis.get("intent", "unknown")
        result["confidence"] = intent_analysis.get("confidence", 0.0)
        
        return result

    def _is_task_message(self, message: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –∑–∞–≤–¥–∞–Ω–Ω—è–º —â–æ –ø–æ—Ç—Ä–µ–±—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
        try:
            # –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –º—ñ—Å—Ç—è—Ç—å –¥—ñ—î—Å–ª–æ–≤–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
            task_indicators = [
                '–≤–∏–∫–æ–Ω–∞–π', '—Å—Ç–≤–æ—Ä–∏', '–∑–∞–ø—É—Å—Ç–∏', '–≤—ñ–¥–∫—Ä–∏–π', '–∑–Ω–∞–π–¥–∏', '—É—Å—Ç–∞–Ω–æ–≤–∏', 
                '–∑–∞–≤–∞–Ω—Ç–∞–∂', '–ø–µ—Ä–µ–≤—ñ—Ä', '–ø–µ—Ä–µ–≥–ª—è–¥', '–∞–Ω–∞–ª—ñ–∑—É–π', '–≥–µ–Ω–µ—Ä—É–π'
            ]
            
            message_lower = message.lower()
            has_indicators = any(indicator in message_lower for indicator in task_indicators)
            is_long_enough = len(message) > 20
            
            print(f"üîç SessionManager: _is_task_message - –¥–æ–≤–∂–∏–Ω–∞: {len(message)}, —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏: {has_indicators}")
            return is_long_enough and has_indicators
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ _is_task_message: {e}")
            return False

    def get_session_status(self, session_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó"""
        if session_name in self.active_sessions:
            return self.active_sessions[session_name]
        return None

    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó"""
        current_time = datetime.now()
        to_remove = []
        
        for session_name, session_data in self.active_sessions.items():
            last_used = datetime.fromisoformat(session_data["last_used"])
            age_hours = (current_time - last_used).total_seconds() / 3600
            
            if age_hours > max_age_hours:
                to_remove.append(session_name)
        
        for session_name in to_remove:
            del self.active_sessions[session_name]
        
        return {"removed_sessions": to_remove, "remaining": len(self.active_sessions)}

    def _get_goose_env(self) -> Dict[str, str]:
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = f"{self.goose_path}/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def get_stats(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—ñ–π"""
        total_sessions = len(self.active_sessions)
        total_messages = sum(session.get("message_count", 0) for session in self.active_sessions.values())
        
        return {
            "total_active_sessions": total_sessions,
            "total_messages_sent": total_messages,
            "active_session_names": list(self.active_sessions.keys()),
            "goose_path": self.goose_path,
            "goose_available": Path(self.goose_binary).exists()
        }
