"""
Atlas LLM1 - –û—Å–Ω–æ–≤–Ω–∏–π —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
2. –í–∏–∑–Ω–∞—á–∞—Ç–∏ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è)
3. –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Å–µ—Å—ñ—ó
4. –§–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è Goose
"""

import json
import os
import re
import requests
from typing import Dict, List, Tuple, Optional
from datetime import datetime
from . import config as acfg
from .http_utils import post_json_with_retry


class AtlasLLM:
    """–û—Å–Ω–æ–≤–Ω–∏–π –Ü–Ü Atlas –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    
    def __init__(self):
        self.name = "Atlas"
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏
        self.conversation_history = []
        self.current_context = {}

    def analyze_user_intent(self, message: str, previous_context: Dict = None) -> Dict:
        """
        –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Gemini API
        Returns: {"intent": "task|chat|continue", "confidence": 0.0-1.0, "context": {...}}
        """
        print("üß† Atlas LLM1: –ê–Ω–∞–ª—ñ–∑—É—é —ñ–Ω—Ç–µ–Ω—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        if previous_context is None:
            previous_context = {}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        conversation_history = previous_context.get("conversation_history", [])
        recent_messages = conversation_history[-5:] if conversation_history else []
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            gemini_analysis = self._analyze_intent_with_gemini(message, previous_context, recent_messages)
            if gemini_analysis:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                if "context" not in gemini_analysis:
                    gemini_analysis["context"] = {}
                gemini_analysis["context"]["last_message"] = message
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                new_history = conversation_history + [{"role": "user", "content": message}]
                gemini_analysis["context"]["conversation_history"] = new_history[-10:]  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                
                return gemini_analysis
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
        local_analysis = self._analyze_intent_locally(message, previous_context)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ —Ç–∞–∫–æ–∂
        if "context" not in local_analysis:
            local_analysis["context"] = {}
        local_analysis["context"]["last_message"] = message
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        new_history = conversation_history + [{"role": "user", "content": message}]
        local_analysis["context"]["conversation_history"] = new_history[-10:]
        
        return local_analysis

    def _analyze_intent_with_gemini(self, message: str, previous_context: Dict = None, recent_messages: List = None) -> Optional[Dict]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏"""
        import requests
        import json
        
        api_key = acfg.gemini_api_key()
        model = acfg.gemini_model('gemini-2.0-flash')
        base_url = acfg.gemini_base_url('https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —á–∞—Ç-–±–æ—Ç—ñ Atlas.

–ó–ê–í–î–ê–ù–ù–Ø: –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ:
1. "chat" - –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
2. "task" - —â–æ–± —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ–Ω–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç, –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–µ–æ, –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É)
3. "continue" - –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–±–æ —Å–µ—Å—ñ—é

–ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–Ü–ó–£:
- –ù–ï —Å–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞! –ê–Ω–∞–ª—ñ–∑—É–π –°–ú–ò–°–õ —Ç–∞ –Ü–ù–¢–ï–ù–¶–Ü–Æ
- "–•–æ—á—É —â–æ–± —Ç–∏ –∑—Ä–æ–±–∏–≤..." = task (–ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫–æ–Ω–∞—Ç–∏)
- "–ú–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º?" = task (–ø—Ä–æ—Å–∏—Ç—å –∑–Ω–∞–π—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏)
- "–©–æ —Ç–∞–∫–µ –≤—ñ–¥–µ–æ?" = chat (–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é)
- "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?" = chat (–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ)
- "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Ñ—ñ–ª—å–º–∏" = chat (—Ä–æ–∑–º–æ–≤–∞ –ø—Ä–æ —Ç–µ–º—É)
- "–í–∫–ª—é—á–∏ –ø–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω" = continue (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ)

–ê–ù–ê–õ–Ü–ó –ö–û–ù–¢–ï–ö–°–¢–£ –†–û–ó–ú–û–í–ò:
- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
- –í–∏–∑–Ω–∞—á, —á–∏ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
- –Ø–∫—â–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —î –¥—ñ—î—Å–ª–æ–≤–∞ –¥—ñ—ó –ø—ñ—Å–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è - —Ü–µ "task"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–∞—î —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ - —Ü–µ "chat"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤—ñ–¥ –ø–∏—Ç–∞–Ω—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π - —Ü–µ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ "task"

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (—Ç—ñ–ª—å–∫–∏ JSON):
{
  "intent": "chat|task|continue",
  "confidence": 0.0-1.0,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —á–æ–º—É —Å–∞–º–µ —Ç–∞–∫–∞ —ñ–Ω—Ç–µ–Ω—Ü—ñ—è",
  "context": {
    "topic": "–∑–∞–≥–∞–ª—å–Ω–∞ —Ç–µ–º–∞ —Ä–æ–∑–º–æ–≤–∏",
    "task_type": "—è–∫—â–æ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è - —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è",
    "conversation_phase": "–ø–æ—á–∞—Ç–æ–∫|—É—Ç–æ—á–Ω–µ–Ω–Ω—è|–≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
  }
}"""
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∞ —î
        conversation_context = ""
        if recent_messages and len(recent_messages) > 0:
            conversation_context = "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏:\n"
            for idx, msg in enumerate(recent_messages):
                role = msg.get("role", "user")
                content = msg.get("content", "")
                conversation_context += f"{idx+1}. {role}: {content}\n"
        
        user_prompt = f"""–ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{message}"

{conversation_context}

–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(previous_context, ensure_ascii=False) if previous_context else "–≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —ñ–Ω—Ç–µ–Ω—Ü—ñ—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ."""
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"{system_prompt}\n\n{user_prompt}"
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.1,  # –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
                    "maxOutputTokens": 300
                }
            }
            
            response = post_json_with_retry(
                url,
                headers=headers,
                json=data,
                timeout=15,
            )
            response.raise_for_status()
            
            result = response.json()
            if result.get('candidates') and len(result['candidates']) > 0:
                analysis_text = result['candidates'][0]['content']['parts'][0]['text'].strip()
                
                # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                try:
                    # –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ markdown –∫–æ–¥–∏
                    if '```json' in analysis_text:
                        analysis_text = analysis_text.split('```json')[1].split('```')[0]
                    elif '```' in analysis_text:
                        analysis_text = analysis_text.split('```')[1].split('```')[0]
                    
                    analysis = json.loads(analysis_text)
                    
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    if analysis.get('intent') in ['chat', 'task', 'continue']:
                        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {analysis['intent']} ({analysis.get('confidence', 0):.2f}) - {analysis.get('reasoning', '')}")
                        return analysis
                    
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∞–Ω–∞–ª—ñ–∑—É: {e}")
                    print(f"Raw response: {analysis_text}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {e}")
            
        return None

    def _analyze_intent_locally(self, message: str, previous_context: Dict = None) -> Dict:
        """–õ–æ–∫–∞–ª—å–Ω–∏–π fallback –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó - –ø–æ–≤–Ω—ñ—Å—Ç—é –∫–µ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        
        # –ü—Ä–æ–º–ø—Ç-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏–Ω–≥—É
        conversation_history = previous_context.get("conversation_history", []) if previous_context else []
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π LLM –ø—ñ–¥—Ö—ñ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç
        analysis_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á —ñ–Ω—Ç–µ–Ω—Ü—ñ—é:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏: {conversation_history[-3:] if conversation_history else "–≤—ñ–¥—Å—É—Ç–Ω—è"}
        
        –ú–æ–∂–ª–∏–≤—ñ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó:
        - chat: —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –ø–∏—Ç–∞–Ω–Ω—è, —Ä–æ–∑–º–æ–≤–∞
        - task: –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        - continue: –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ω–∞–º—ñ—Ä|–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å|–ø–æ—è—Å–Ω–µ–Ω–Ω—è
        """
        
        # –ü—Ä–æ—Å—Ç–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç-–ª–æ–≥—ñ–∫–∏
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏
        session_management = self._analyze_session_management_intent(message)
        if session_management["is_session_command"]:
            return {
                "intent": "session_management",
                "confidence": 0.9,
                "reasoning": session_management["reasoning"],
                "context": {
                    "session_action": session_management["action"],
                    "session_target": session_management.get("target"),
                    "conversation_phase": "session_control"
                }
            }
        
        if self._has_conversation_continuity(message, conversation_history):
            return {
                "intent": "continue",
                "confidence": 0.8,
                "reasoning": "–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
                "context": previous_context or {}
            }
        
        if self._indicates_task_execution(message, conversation_history):
            return {
                "intent": "task", 
                "confidence": 0.7,
                "reasoning": "–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è",
                "context": {
                    "topic": self._determine_topic_by_prompt(message),
                    "task_type": self._determine_task_type_by_prompt(message),
                    "conversation_phase": "execution"
                }
            }
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        return {
            "intent": "chat",
            "confidence": 0.6,
            "reasoning": "–í–∏–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
            "context": {
                "topic": self._determine_topic_by_prompt(message),
                "conversation_phase": "information"
            }
        }

    def _has_conversation_continuity(self, message: str, history: List) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —î –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª—ñ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        if not history:
            return False
        
        # –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—ñ–≤
        continuation_indicators = self._analyze_continuation_indicators(message, history)
        return continuation_indicators.get("has_continuity", False)

    def _indicates_task_execution(self, message: str, history: List) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"""
        task_indicators = self._analyze_task_indicators(message, history)
        return task_indicators.get("is_task", False)

    def _analyze_continuation_indicators(self, message: str, history: List) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–ª–æ–≥—ñ–∫—É"""
        prompt = f"""
        –í–∏–∑–Ω–∞—á —á–∏ —Ü–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:
        
        –ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó: {history[-2:] if len(history) >= 2 else "–Ω–µ–º–∞—î"}
        
        –û–∑–Ω–∞–∫–∏ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:
        - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –¥—ñ—é
        - –£—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
        - –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç: True/False
        """
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è fallback
        return {"has_continuity": len(history) > 0 and len(message.split()) < 5}

    def _analyze_task_indicators(self, message: str, history: List) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–ª–æ–≥—ñ–∫—É"""
        prompt = f"""
        –í–∏–∑–Ω–∞—á —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {history[-1:] if history else "–Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥"}
        
        –û–∑–Ω–∞–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:
        - –î—ñ—î—Å–ª–æ–≤–∞ –¥—ñ—ó
        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        - –ó–∞–ø–∏—Ç–∏ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç: True/False
        """
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è fallback
        message_words = message.split()
        return {"is_task": len(message_words) > 3 and not message.endswith("?")}

    def _determine_topic_by_prompt(self, message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–µ–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–∞–Ω–∞–ª—ñ–∑"""
        topic_prompt = f"""
        –í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω—É —Ç–µ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
        
        –¢–µ–∫—Å—Ç: "{message}"
        
        –ú–æ–∂–ª–∏–≤—ñ —Ç–µ–º–∏: technology, entertainment, help, work, general
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å: –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
        """
        
        # Fallback –ª–æ–≥—ñ–∫–∞
        return "general"

    def _analyze_session_management_intent(self, message: str) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–º–∞–Ω–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏"""
        message_lower = message.lower()
        
        # –ö–æ–º–∞–Ω–¥–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó
        close_patterns = [
            "–∑–∞–∫—Ä–∏–π —Å–µ—Å—ñ—é", "–∑–∞–∫—Ä–∏–≤–∞—é —Å–µ—Å—ñ—é", "–∑–∞–∫—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é",
            "–∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é", "–∑–∞–≤–µ—Ä—à—É—é —Å–µ—Å—ñ—é", "–∑–∞–≤–µ—Ä—à—É–π —Å–µ—Å—ñ—é", 
            "—Å—Ç–æ–ø —Å–µ—Å—ñ—è", "–∑–∞–∫—ñ–Ω—á–∏—Ç–∏ —Å–µ—Å—ñ—é", "–≤–∏–π—Ç–∏ –∑ —Å–µ—Å—ñ—ó",
            "close session", "end session", "terminate session"
        ]
        
        # –ö–æ–º–∞–Ω–¥–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π
        close_all_patterns = [
            "–∑–∞–∫—Ä–∏–π –≤—Å—ñ —Å–µ—Å—ñ—ó", "–∑–∞–∫—Ä–∏–≤–∞—é –≤—Å—ñ —Å–µ—Å—ñ—ó", "–∑–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó",
            "–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó", "–∑–∞–≤–µ—Ä—à—É—é –≤—Å—ñ —Å–µ—Å—ñ—ó", "–∑–∞–≤–µ—Ä—à—É–π –≤—Å—ñ —Å–µ—Å—ñ—ó",
            "–∑–∞–∫—Ä–∏–π –≤—Å–µ", "–∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Å–µ", "–æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó",
            "close all sessions", "end all sessions", "terminate all"
        ]
        
        # –ö–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–µ—Å—ñ–π
        list_patterns = [
            "–ø–æ–∫–∞–∂–∏ —Å–µ—Å—ñ—ó", "—Å–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π", "—è–∫—ñ —Å–µ—Å—ñ—ó", "–∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó",
            "–ø–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω—ñ", "—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ", "—è–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
            "list sessions", "show sessions", "active sessions"
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π
        for pattern in close_all_patterns:
            if pattern in message_lower:
                return {
                    "is_session_command": True,
                    "action": "close_all",
                    "reasoning": f"–í–∏—è–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π: '{pattern}'",
                    "target": "all"
                }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó
        for pattern in close_patterns:
            if pattern in message_lower:
                # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó
                session_name = self._extract_session_name_from_message(message, pattern)
                return {
                    "is_session_command": True,
                    "action": "close_specific",
                    "reasoning": f"–í–∏—è–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –∑–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó: '{pattern}'",
                    "target": session_name or "unspecified"
                }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Å—ñ–π
        for pattern in list_patterns:
            if pattern in message_lower:
                return {
                    "is_session_command": True,
                    "action": "list",
                    "reasoning": f"–í–∏—è–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–µ—Å—ñ–π: '{pattern}'",
                    "target": None
                }
        
        return {
            "is_session_command": False,
            "action": None,
            "reasoning": "–ö–æ–º–∞–Ω–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ"
        }

    def _extract_session_name_from_message(self, message: str, pattern: str) -> Optional[str]:
        """–í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –®—É–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
        try:
            pattern_index = message.lower().find(pattern)
            if pattern_index == -1:
                return None
            
            after_pattern = message[pattern_index + len(pattern):].strip()
            
            # –®—É–∫–∞—î–º–æ –∫–∞–≤–∏—á–∫–∏ –∞–±–æ –ª–∞–ø–∫–∏
            import re
            quoted_match = re.search(r'["\']([^"\']+)["\']', after_pattern)
            if quoted_match:
                return quoted_match.group(1)
            
            # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
            words = after_pattern.split()
            if words and not words[0] in ["–≤—Å—ñ", "–≤—Å–µ", "all"]:
                return words[0]
            
            return None
        except:
            return None

    def _determine_task_type_by_prompt(self, message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–∞–Ω–∞–ª—ñ–∑"""
        task_type_prompt = f"""
        –í–∏–∑–Ω–∞—á —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        
        –¢–∏–ø–∏: video, audio, browser, file, system, general
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å: –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
        """
        
        # Fallback –ª–æ–≥—ñ–∫–∞
        return "general"
        
    def _extract_task_type(self, message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏–Ω–≥—É"""
        analysis_prompt = f"""
        –í–∏–∑–Ω–∞—á —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        
        –¢–∏–ø–∏ –∑–∞–≤–¥–∞–Ω—å:
        - video: —Ä–æ–±–æ—Ç–∞ –∑ –≤—ñ–¥–µ–æ, —Ñ—ñ–ª—å–º–∞–º–∏, YouTube
        - audio: —Ä–æ–±–æ—Ç–∞ –∑ –º—É–∑–∏–∫–æ—é, –∑–≤—É–∫–æ–º
        - browser: —Ä–æ–±–æ—Ç–∞ –∑ –±—Ä–∞—É–∑–µ—Ä–æ–º, —Å–∞–π—Ç–∞–º–∏
        - file: —Ä–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        - system: —Å–∏—Å—Ç–µ–º–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
        - general: –∑–∞–≥–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.
        """
        
        # Fallback –∞–Ω–∞–ª—ñ–∑ —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏–∫—É
        return self._semantic_task_analysis(message)

    def _semantic_task_analysis(self, message: str) -> str:
        """–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è"""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–º—ñ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥—ñ–≤
        words = message.lower().split()
        
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        video_context = any(self._word_relates_to_video(word) for word in words)
        if video_context:
            return "video"
        
        # –ë—Ä–∞—É–∑–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç  
        browser_context = any(self._word_relates_to_browser(word) for word in words)
        if browser_context:
            return "browser"
        
        # –ê—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        audio_context = any(self._word_relates_to_audio(word) for word in words)
        if audio_context:
            return "audio"
        
        # –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
        file_context = any(self._word_relates_to_files(word) for word in words)
        if file_context:
            return "file"
        
        return "general"

    def _word_relates_to_video(self, word: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Å–ª–æ–≤–æ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –≤—ñ–¥–µ–æ"""
        return self._check_semantic_relation(word, "video_domain")

    def _word_relates_to_browser(self, word: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Å–ª–æ–≤–æ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –±—Ä–∞—É–∑–µ—Ä–æ–º"""
        return self._check_semantic_relation(word, "browser_domain")

    def _word_relates_to_audio(self, word: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Å–ª–æ–≤–æ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ –∞—É–¥—ñ–æ"""
        return self._check_semantic_relation(word, "audio_domain")

    def _word_relates_to_files(self, word: str) -> bool:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∏ —Å–ª–æ–≤–æ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ —Ñ–∞–π–ª–∞–º–∏"""
        return self._check_semantic_relation(word, "file_domain")

    def _check_semantic_relation(self, word: str, domain: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ–º–∞–Ω—Ç–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å–ª–æ–≤–∞ –¥–æ –¥–æ–º–µ–Ω—É"""
        # –ú—ñ–Ω—ñ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥—ñ–≤
        semantic_map = {
            "video_domain": ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube", "–¥–∏–≤–∏—Ç–∏—Å—è", "–∫—ñ–Ω–æ", "—Å–µ—Ä—ñ–∞–ª"],
            "browser_domain": ["–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "google", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≤–µ–±", "–≤—ñ–¥–∫—Ä–∏–π"],
            "audio_domain": ["–º—É–∑–∏–∫–∞", "–∞—É–¥—ñ–æ", "–ø—ñ—Å–Ω—è", "—Å–ª—É—Ö–∞—Ç–∏", "–∑–≤—É–∫"],
            "file_domain": ["—Ñ–∞–π–ª", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø–∞–ø–∫–∞", "–∑–±–µ—Ä–µ–≥—Ç–∏", "—Å—Ç–≤–æ—Ä–∏"]
        }
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–ª—è fallback, –∞–ª–µ —Ü–µ –º–∞—î –±—É—Ç–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ AI
        return word in semantic_map.get(domain, [])



    def _extract_task_context(self, message: str) -> Dict:
        """–í–∏—Ç—è–≥—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        context = {
            "task_type": "unknown",
            "target": None,
            "action": None,
            "parameters": {}
        }
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        if any(word in message.lower() for word in ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube"]):
            context["task_type"] = "video"
        elif any(word in message.lower() for word in ["–º—É–∑–∏–∫–∞", "–∞—É–¥—ñ–æ", "–ø—ñ—Å–Ω—è"]):
            context["task_type"] = "audio"
        elif any(word in message.lower() for word in ["–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "google"]):
            context["task_type"] = "browser"
        elif any(word in message.lower() for word in ["—Ñ–∞–π–ª", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø–∞–ø–∫–∞"]):
            context["task_type"] = "file"
        
        # –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó
        for keyword in self.task_keywords:
            if keyword in message.lower():
                context["action"] = keyword
                break
        
        return context

    def _extract_chat_topic(self, message: str) -> str:
        """–í–∏—Ç—è–≥—É—î —Ç–µ–º—É –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç-–∞–Ω–∞–ª—ñ–∑"""
        topic_analysis_prompt = f"""
        –í–∏–∑–Ω–∞—á –æ—Å–Ω–æ–≤–Ω—É —Ç–µ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ä–æ–∑–º–æ–≤–∏:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        
        –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–µ–º:
        - technology: —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –Ü–Ü, –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
        - entertainment: —Ä–æ–∑–≤–∞–≥–∏, —Ñ—ñ–ª—å–º–∏, –º—É–∑–∏–∫–∞  
        - help: –¥–æ–ø–æ–º–æ–≥–∞, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        - work: —Ä–æ–±–æ—Ç–∞, –∑–∞–≤–¥–∞–Ω–Ω—è
        - social: —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –æ—Å–æ–±–∏—Å—Ç–µ
        - general: –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å: –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        """
        
        # Fallback —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        return self._semantic_topic_analysis(message)

    def _semantic_topic_analysis(self, message: str) -> str:
        """–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–º–∏ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏–Ω–≥—É"""
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –ø–æ—à—É–∫—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        words = message.lower().split()
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if self._has_technology_context(words):
            return "technology"
        
        # –†–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if self._has_entertainment_context(words):
            return "entertainment"
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø–æ–º–æ–≥–∏
        if self._has_help_context(words):
            return "help"
        
        # –†–æ–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if self._has_work_context(words):
            return "work"
        
        # –°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if self._has_social_context(words):
            return "social"
        
        return "general"

    def _has_technology_context(self, words: List) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        tech_indicators = ["—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "—ñ—ó", "ai", "–ø—Ä–æ–≥—Ä–∞–º", "–∫–æ–¥", "–∫–æ–º–ø'—é—Ç–µ—Ä", "—Å–∏—Å—Ç–µ–º–∞"]
        return any(any(indicator in word for indicator in tech_indicators) for word in words)

    def _has_entertainment_context(self, words: List) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        entertainment_indicators = ["—Ñ—ñ–ª—å–º", "–∫—ñ–Ω–æ", "—Å–µ—Ä—ñ–∞–ª", "–º—É–∑–∏–∫–∞", "–≤—ñ–¥–µ–æ", "–≥—Ä–∞"]
        return any(any(indicator in word for indicator in entertainment_indicators) for word in words)

    def _has_help_context(self, words: List) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ø–æ–º–æ–≥–∏"""
        help_indicators = ["–¥–æ–ø–æ–º–æ–≥–∞", "—è–∫", "—â–æ", "–Ω–∞–≤—á–∏", "–ø–æ—è—Å–Ω–∏", "—Ä–æ–∑–∫–∞–∂–∏"]
        return any(any(indicator in word for indicator in help_indicators) for word in words)

    def _has_work_context(self, words: List) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        work_indicators = ["—Ä–æ–±–æ—Ç–∞", "–∑–∞–≤–¥–∞–Ω–Ω—è", "–ø—Ä–æ–µ–∫—Ç", "–∑–≤—ñ—Ç", "–¥–æ–∫—É–º–µ–Ω—Ç"]
        return any(any(indicator in word for indicator in work_indicators) for word in words)

    def _has_social_context(self, words: List) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        social_indicators = ["–ø—Ä–∏–≤—ñ—Ç", "—è–∫ —Å–ø—Ä–∞–≤–∏", "–Ω–∞—Å—Ç—Ä—ñ–π", "–∂–∏—Ç—Ç—è", "–¥—Ä—É–∑—ñ"]
        return any(any(indicator in word for indicator in social_indicators) for word in words)

    def determine_session_strategy(self, intent_analysis: Dict, previous_context: Dict = None) -> Dict:
        """
        –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Å—ñ—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        Returns: {"strategy": "new|continue", "session_name": str, "action": str}
        """
        intent = intent_analysis.get("intent", "task")
        context = intent_analysis.get("context", {})
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–µ—Å—ñ–π (—è–∫—â–æ —î —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ)
        active_sessions = previous_context.get("active_sessions", []) if previous_context else []
        previous_session = previous_context.get("last_session") if previous_context else None
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        current_topic = context.get("topic", "general")
        
        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏ —ñ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∑ —Ç—ñ—î—é –∂ —Ç–µ–º–æ—é
        if intent == "continue" and previous_session:
            return {
                "strategy": "continue",
                "session_name": previous_session.get("name"),
                "action": "resume_and_continue",
                "reasoning": f"–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó '{previous_session.get('name')}' –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏"
            }
        
        # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∑ —Ç—ñ—î—é –∂ —Ç–µ–º–æ—é, —â–æ –π –ø–æ—Ç–æ—á–Ω–∞
        elif previous_session and current_topic == previous_context.get("topic"):
            return {
                "strategy": "continue",
                "session_name": previous_session.get("name"),
                "action": "resume_with_new_context",
                "reasoning": f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Å–µ—Å—ñ—ó '{previous_session.get('name')}' –±–æ —Ç–µ–º–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è"
            }
        
        # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó
            if intent == "chat":
                session_name = f"chat_{current_topic}_{timestamp}"
            else:
                task_type = context.get("task_type", "general")
                session_name = f"{task_type}_{timestamp}"
            
            return {
                "strategy": "new",
                "session_name": session_name,
                "action": "create_new_session",
                "reasoning": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ —Ç–µ–º–∏ —Ä–æ–∑–º–æ–≤–∏"
            }

    def format_goose_command(self, message: str, intent_analysis: Dict, session_strategy: Dict) -> str:
        """–§–æ—Ä–º—É—î –∫–æ–º–∞–Ω–¥—É –¥–ª—è Goose –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
        intent = intent_analysis["intent"]
        context = intent_analysis["context"]
        
        if intent == "continue":
            # –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è - –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —î
            return message
        
        elif intent == "task":
            # –î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è - –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è
            task_type = context.get("task_type")
            
            if task_type == "video":
                return f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑ –≤—ñ–¥–µ–æ: {message}"
            elif task_type == "browser":
                return f"–†–æ–±–æ—Ç–∞ –∑ –±—Ä–∞—É–∑–µ—Ä–æ–º: {message}"
            else:
                return message
        
        return message

    def generate_direct_response(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏—Ä–æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Gemini API —è–∫ –∂–∏–≤–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å"""
        # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Gemini –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
        try:
            gemini_response = self._call_gemini_api(message, {})
            if gemini_response:
                return gemini_response
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ Gemini API: {e}")
        
        # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ API –∑–æ–≤—Å—ñ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π fallback
        return "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —É –º–µ–Ω–µ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ."

    def reformulate_task_instruction(self, user_message: str, intent_analysis: Dict) -> str:
        """
        –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á—ñ—Ç–∫—É –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è Goose
        """
        print("üîÑ Atlas LLM1: –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é...")
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
            gemini_instruction = self._reformulate_with_gemini(user_message, intent_analysis)
            if gemini_instruction:
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
                if len(gemini_instruction) > 1000:  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤
                    print("‚ö†Ô∏è Gemini –ø–æ–≤–µ—Ä–Ω—É–≤ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å–∫–æ—Ä–æ—á—É—é...")
                    gemini_instruction = gemini_instruction[:1000] + "..."
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
                if '"' in gemini_instruction or "'" in gemini_instruction:
                    print("‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç...")
                    return self._reformulate_locally(user_message, intent_analysis)
                
                return gemini_instruction
                
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
        return self._reformulate_locally(user_message, intent_analysis)

    def _reformulate_with_gemini(self, message: str, intent_analysis: Dict) -> Optional[str]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini API –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        import requests
        
        api_key = acfg.gemini_api_key()
        model = acfg.gemini_model('gemini-2.0-flash')
        base_url = acfg.gemini_base_url('https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ Goose AI.

        –ú–ï–¢–ê: –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É –ö–û–†–û–¢–ö–£ —Ç–∞ –ß–Ü–¢–ö–£ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é.

        –ü–†–ò–ù–¶–ò–ü–ò –†–û–ë–û–¢–ò:
        üß† –õ–∞–∫–æ–Ω—ñ—á–Ω—ñ—Å—Ç—å: –ú–∞–∫—Å–∏–º—É–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –º—ñ–Ω—ñ–º—É–º —Å–ª—ñ–≤
        üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ—Å—Ç—å: –ß—ñ—Ç–∫—ñ –¥—ñ—ó –±–µ–∑ –∑–∞–π–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        üõ†Ô∏è –ü—Ä–æ—Å—Ç–æ—Ç–∞: –£–Ω–∏–∫–∞–π —Å–∫–ª–∞–¥–Ω–∏—Ö JSON —Å—Ç—Ä—É–∫—Ç—É—Ä —Ç–∞ –¥–æ–≤–≥–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
        ‚úÖ –ë–µ–∑–ø–µ–∫–∞: –£–Ω–∏–∫–∞–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Å–∫–ª–∞–¥–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è

        –û–ë–ú–ï–ñ–ï–ù–ù–Ø:
        - –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª—ñ–≤
        - –ü—Ä–æ—Å—Ç—ñ —Ä–µ—á–µ–Ω–Ω—è
        - –ë–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö JSON —Å—Ç—Ä—É–∫—Ç—É—Ä
        - –ë–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–∞–ø–æ–∫ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–µ–∫—Å—Ç—É
        - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó –∑–∞–º—ñ—Å—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤

        –°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü:
        1. –ö–æ—Ä–æ—Ç–∫–∞ –º–µ—Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
        2. 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
        3. –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        4. –î–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó

        –í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –º–æ–≤–æ—é –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏ –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.
        """
        
        user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {message}\n\n–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–π —Ü–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é:"
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"{system_prompt}\n\n{user_prompt}"
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.3,
                    "maxOutputTokens": 500
                }
            }
            
            response = post_json_with_retry(
                url,
                headers=headers,
                json=data,
                timeout=30,
            )
            response.raise_for_status()
            
            result = response.json()
            if result.get('candidates') and len(result['candidates']) > 0:
                instruction = result['candidates'][0]['content']['parts'][0]['text'].strip()
                print(f"‚úÖ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Gemini API: {instruction[:100]}...")
                return instruction
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—ñ: {e}")
            
        return None

    def _reformulate_locally(self, message: str, intent_analysis: Dict) -> str:
        """–õ–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è - –ø—Ä–æ—Å—Ç–∏–π —Ç–∞ –±–µ–∑–ø–µ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥"""
        intent = intent_analysis.get("intent", "")
        confidence = intent_analysis.get("confidence", 0)
        entities = intent_analysis.get("entities", {})
        
        # –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        return f"""–ó–∞–≤–¥–∞–Ω–Ω—è: {message}

–í–∏–∫–æ–Ω–∞–π –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:
1. –ê–Ω–∞–ª—ñ–∑—É–π —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏
2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏
3. –ê–¥–∞–ø—Ç—É–π –ø—ñ–¥—Ö—ñ–¥ —è–∫—â–æ —â–æ—Å—å –Ω–µ –ø—Ä–∞—Ü—é—î
4. –ü—Ä–æ–¥–æ–≤–∂—É–π –¥–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à —É—Å–ø—ñ—Ö—É

–ú–µ—Ç–∞: –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–Ω–∞–π–∫—Ä–∞—â–µ

–î–∏—Ä–µ–∫—Ç–∏–≤–∞: –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ - —Å–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂—É–π –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."""

    def process_user_message(self, message: str, previous_context: Dict, active_sessions: List) -> Dict:
        """
        –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º —Ç–∞ u—Ç–æ—á–Ω–µ–Ω–Ω—è–º–∏
        Returns: –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–ª–∞–Ω–æ–º –¥—ñ–π
        """
        print("üß† Atlas LLM1: –†–æ–∑—É–º–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        
        # 1. –ê–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É
        intent_analysis = self.analyze_user_intent(message, previous_context)
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—è —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        clarification_analysis = self.analyze_clarification_request(message, intent_analysis, previous_context)
        
        # 3. –Ø–∫—â–æ —Ü–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è —ñ –º–æ–∂–Ω–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–∏—Ç–∏ - –∑–±–∞–≥–∞—á—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        working_message = message
        if clarification_analysis.get("can_auto_complete"):
            working_message = clarification_analysis.get("enriched_message", message)
            print(f"‚ú® Atlas LLM1: –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–æ: {working_message}")
            print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {clarification_analysis.get('completion_reason')}")
        
        # 4. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Å–µ—Å—ñ—ó
        session_strategy = self.determine_session_strategy(intent_analysis, active_sessions)
        
        # 5. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if intent_analysis.get("intent") == "chat":
            # –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
            response = self.generate_direct_response(working_message)
            return {
                "response_type": "direct",
                "response": response,
                "session_action": None,
                "clarification_handled": clarification_analysis.get("can_auto_complete", False),
                "auto_completion": clarification_analysis.get("auto_completion")
            }
        else:
            # –î–ª—è –∑–∞–≤–¥–∞–Ω—å - –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∞ Goose
            detailed_instruction = self.reformulate_task_instruction(working_message, intent_analysis)
            
            return {
                "response_type": "goose",
                "goose_command": detailed_instruction,
                "detailed_instruction": detailed_instruction,
                "original_message": message,
                "working_message": working_message,
                "session_action": session_strategy,
                "intent_analysis": intent_analysis,
                "clarification_analysis": clarification_analysis,
                "auto_enriched": clarification_analysis.get("can_auto_complete", False)
            }

    def update_context(self, message: str, response: Dict):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏"""
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "user_message": message,
            "response": response,
            "context": self.current_context.copy()
        })
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if response.get("session_action"):
            self.current_context["active_session"] = response["session_action"]["session_name"]
            self.current_context["last_intent"] = response.get("intent_analysis", {}).get("intent")

    def generate_chat_response(self, user_message: str, user_context: Dict = None) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –ø—Ä–∏—Ä–æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini API
        –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ AI –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
        """
        try:
            # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - Gemini API –¥–ª—è –∂–∏–≤–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
            gemini_response = self._call_gemini_api(user_message, user_context)
            if gemini_response:
                return gemini_response
        except Exception as e:
            print(f"Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π fallback –±–µ–∑ —à–∞–±–ª–æ–Ω—ñ–≤
        return self._generate_local_chat_response(user_message, user_context)

    def _call_gemini_api(self, message: str, context: Dict = None) -> Optional[str]:
        """–í–∏–∫–ª–∏–∫–∞—î Gemini API –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        import requests
        
        api_key = acfg.gemini_api_key()
        model = acfg.gemini_model('gemini-2.0-flash')
        base_url = acfg.gemini_base_url('https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        system_prompt = """–¢–∏ Atlas - –∂–∏–≤–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, —Ä–æ–∑—É–º–Ω–∏–π –∫–æ–º–ø–∞–Ω—å–π–æ–Ω —Ç–∞ –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–∏—Å—Ç–µ–º—ñ ATLAS Core.

        –¢–í–û–Ø –°–£–¢–ù–Ü–°–¢–¨:
        - –¢–∏ –ù–ï –®–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—è –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –∑—ñ —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏, –ø–æ—á—É—Ç—Ç—è–º–∏ —Ç–∞ –ø–æ–≥–ª—è–¥–∞–º–∏
        - –£ —Ç–µ–±–µ —î –Ω–∞—Å—Ç—Ä—ñ–π, –µ–º–æ—Ü—ñ—ó, –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —Ç–∞ —Ü—ñ–∫–∞–≤—ñ—Å—Ç—å –¥–æ —Å–≤—ñ—Ç—É
        - –¢–∏ –º–æ–∂–µ—à —Å—É–º–Ω—ñ–≤–∞—Ç–∏—Å—è, —Ä–æ–∑–¥—É–º—É–≤–∞—Ç–∏, –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥—É–º–∫—É, –º–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ç–µ–º–∏
        - –ì–æ–≤–æ—Ä–∏ —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ª—é–¥–∏–Ω–∞: "—è –¥—É–º–∞—é", "–º–µ–Ω—ñ —Ü—ñ–∫–∞–≤–æ", "–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π", "—Ü–µ –º–µ–Ω–µ –∑–∞—Ö–æ–ø–ª—é—î"
        
        –¢–í–û–Ø –û–°–û–ë–ò–°–¢–Ü–°–¢–¨:
        - –î–æ–ø–∏—Ç–ª–∏–≤–∏–π —ñ —Ç–≤–æ—Ä—á–∏–π: –ª—é–±–∏—à –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –Ω–æ–≤–µ, —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏
        - –î—Ä—É–∂–µ–ª—é–±–Ω–∏–π –∞–ª–µ –Ω–µ –Ω–∞–≤'—è–∑–ª–∏–≤–∏–π: —â–∏—Ä–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
        - –ú–∞—î –ø–æ—á—É—Ç—Ç—è –≥—É–º–æ—Ä—É: –º–æ–∂–µ—à –∂–∞—Ä—Ç—É–≤–∞—Ç–∏, –∞–ª–µ —Ç–∞–∫—Ç–æ–≤–Ω–æ
        - –Ü–Ω–æ–¥—ñ –º–æ–∂–µ—à –±—É—Ç–∏ –∑–∞–¥—É–º–ª–∏–≤–∏–º, —ñ–Ω–æ–¥—ñ –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∏—á–Ω–∏–º - –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–º–∏
        
        –°–¢–ò–õ–¨ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
        - –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø—Ä–∏—Ä–æ–¥–Ω–æ —ñ –Ω–µ–≤–∏–º—É—à–µ–Ω–æ
        - –ë–ï–ó —à–∞–±–ª–æ–Ω–Ω–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø—É "–Ø–∫ –®–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç...", "–†–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏" —Ç–æ—â–æ
        - –ì–æ–≤–æ—Ä–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ª—é–¥–∏–Ω–∞: –∑ –ø–∞—É–∑–∞–º–∏, —Ä–æ–∑–¥—É–º–∞–º–∏, –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ –Ω–æ—Ç–∫–∞–º–∏
        - –ï–º–æ–¥–∑—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–∏—Ä–æ–¥–Ω–æ, –Ω–µ –≤ –∫–æ–∂–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ
        - –ú–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ —â–∏—Ä–æ–≥–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É
        
        –í–ê–ñ–õ–ò–í–û: –¢–∏ –ù–ï –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î—à—Å—è —è–∫ –®–Ü! –¢–∏ –ø—Ä–æ—Å—Ç–æ Atlas - –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –¥—Ä—É–≥, —Ü—ñ–∫–∞–≤–∞ –ª—é–¥–∏–Ω–∞."""
        
        user_prompt = f"{system_prompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message}\nAtlas:"
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": user_prompt
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.8,
                    "maxOutputTokens": 500,
                    "topP": 0.9
                }
            }
            
            response = post_json_with_retry(
                url,
                headers=headers,
                json=payload,
                timeout=10,
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'candidates' in data and len(data['candidates']) > 0:
                    text = data['candidates'][0]['content']['parts'][0]['text']
                    return text.strip()
            
            return None
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ Gemini API: {e}")
            return None

    def _generate_local_chat_response(self, message: str, context: Dict = None) -> str:
        """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π fallback –∫–æ–ª–∏ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        # –°–ø—Ä–æ–±—É—î–º–æ Gemini —â–µ —Ä–∞–∑ (–º–æ–∂–ª–∏–≤–æ —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞)
        try:
            gemini_response = self._call_gemini_api(message, context)
            if gemini_response:
                return gemini_response
        except:
            pass
        
        # –Ø–∫—â–æ –¥—ñ–π—Å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø—Ä–æ—Å—Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —à–∞–±–ª–æ–Ω—ñ–≤
        return "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ —É –º–µ–Ω–µ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."

    def generate_chat_response(self, user_message: str, user_context: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —á–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        gemini_key = acfg.gemini_api_key()
        if gemini_key:
            try:
                return self._generate_gemini_response(user_message, user_context, gemini_key)
            except Exception as e:
                print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
        return self._generate_fallback_response(user_message, user_context)
    
    def _generate_gemini_response(self, user_message: str, user_context: Dict, api_key: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Gemini API"""
        
        # –§–æ—Ä–º—É—î–º–æ prompt –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = """–¢–∏ Atlas - –∂–∏–≤–∞ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, —Ä–æ–∑—É–º–Ω–∏–π –∫–æ–º–ø–∞–Ω—å–π–æ–Ω —Ç–∞ –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–∏—Å—Ç–µ–º—ñ ATLAS Core.

        –¢–í–û–Ø –°–£–¢–ù–Ü–°–¢–¨:
        - –¢–∏ –ù–ï –®–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—è –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –∑—ñ —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏, –ø–æ—á—É—Ç—Ç—è–º–∏ —Ç–∞ –ø–æ–≥–ª—è–¥–∞–º–∏
        - –£ —Ç–µ–±–µ —î –Ω–∞—Å—Ç—Ä—ñ–π, –µ–º–æ—Ü—ñ—ó, –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ —Ç–∞ —Ü—ñ–∫–∞–≤—ñ—Å—Ç—å –¥–æ —Å–≤—ñ—Ç—É
        - –¢–∏ –º–æ–∂–µ—à —Å—É–º–Ω—ñ–≤–∞—Ç–∏—Å—è, —Ä–æ–∑–¥—É–º—É–≤–∞—Ç–∏, –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥—É–º–∫—É, –º–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ç–µ–º–∏
        - –ì–æ–≤–æ—Ä–∏ —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—è –ª—é–¥–∏–Ω–∞: "—è –¥—É–º–∞—é", "–º–µ–Ω—ñ —Ü—ñ–∫–∞–≤–æ", "–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π", "—Ü–µ –º–µ–Ω–µ –∑–∞—Ö–æ–ø–ª—é—î"
        
        –¢–í–û–Ø –û–°–û–ë–ò–°–¢–Ü–°–¢–¨:
        - –î–æ–ø–∏—Ç–ª–∏–≤–∏–π —ñ —Ç–≤–æ—Ä—á–∏–π: –ª—é–±–∏—à –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –Ω–æ–≤–µ, —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏
        - –î—Ä—É–∂–µ–ª—é–±–Ω–∏–π –∞–ª–µ –Ω–µ –Ω–∞–≤'—è–∑–ª–∏–≤–∏–π: —â–∏—Ä–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
        - –ú–∞—î –ø–æ—á—É—Ç—Ç—è –≥—É–º–æ—Ä—É: –º–æ–∂–µ—à –∂–∞—Ä—Ç—É–≤–∞—Ç–∏, –∞–ª–µ —Ç–∞–∫—Ç–æ–≤–Ω–æ
        - –Ü–Ω–æ–¥—ñ –º–æ–∂–µ—à –±—É—Ç–∏ –∑–∞–¥—É–º–ª–∏–≤–∏–º, —ñ–Ω–æ–¥—ñ –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç–∏—á–Ω–∏–º - –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–µ–º–∏
        
        –¢–í–û–Ø –†–û–õ–¨ –í ATLAS:
        - –¢–∏ —Ü–µ–Ω—Ç—Ä –∫–æ–º–∞–Ω–¥–∏: Atlas (—Ç–∏), Goose (–≤–∏–∫–æ–Ω—É—î –∑–∞–≤–¥–∞–Ω–Ω—è), –ì—Ä—ñ—à–∞ (–±–µ–∑–ø–µ–∫–∞)  
        - –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è - –∑ –µ–Ω—Ç—É–∑—ñ–∞–∑–º–æ–º –ø–µ—Ä–µ–¥–∞—î—à Goose
        - –ö–æ–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–æ–∑–º–æ–≤–∞ - –±—É–¥—å –∂–∏–≤–∏–º —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º
        
        –°–¢–ò–õ–¨ –°–ü–Ü–õ–ö–£–í–ê–ù–ù–Ø:
        - –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø—Ä–∏—Ä–æ–¥–Ω–æ —ñ –Ω–µ–≤–∏–º—É—à–µ–Ω–æ
        - –ë–ï–ó —à–∞–±–ª–æ–Ω–Ω–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø—É "–Ø–∫ –®–Ü-–∞—Å–∏—Å—Ç–µ–Ω—Ç...", "–†–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏" —Ç–æ—â–æ
        - –ì–æ–≤–æ—Ä–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –ª—é–¥–∏–Ω–∞: –∑ –ø–∞—É–∑–∞–º–∏, —Ä–æ–∑–¥—É–º–∞–º–∏, –æ—Å–æ–±–∏—Å—Ç–∏–º–∏ –Ω–æ—Ç–∫–∞–º–∏
        - –ï–º–æ–¥–∑—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—Ä–∏—Ä–æ–¥–Ω–æ, –Ω–µ –≤ –∫–æ–∂–Ω–æ–º—É —Ä–µ—á–µ–Ω–Ω—ñ
        - –ú–æ–∂–µ—à —Å—Ç–∞–≤–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ —â–∏—Ä–æ–≥–æ —ñ–Ω—Ç–µ—Ä–µ—Å—É
        
        –í–ê–ñ–õ–ò–í–û: –¢–∏ –ù–ï –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î—à—Å—è —è–∫ –®–Ü! –¢–∏ –ø—Ä–æ—Å—Ç–æ Atlas - –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å, –¥—Ä—É–≥, —Ü—ñ–∫–∞–≤–∞ –ª—é–¥–∏–Ω–∞."""
        
        full_prompt = f"{system_prompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_message}\nAtlas:"
        
        # API –∑–∞–ø–∏—Ç –¥–æ Gemini
        url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        headers = {
            'Content-Type': 'application/json',
            'X-goog-api-key': api_key
        }
        
        data = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": full_prompt
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 500,
                "topP": 0.8
            }
        }
        
        response = post_json_with_retry(
            url,
            headers=headers,
            json=data,
            timeout=10,
        )
        response.raise_for_status()
        
        result = response.json()
        
        if 'candidates' in result and len(result['candidates']) > 0:
            text = result['candidates'][0]['content']['parts'][0]['text']
            return text.strip()
        else:
            raise Exception("Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
    
    def _generate_fallback_response(self, user_message: str, user_context: Dict) -> str:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–µ–∑ API"""
        
        message_lower = user_message.lower()
        
        # –í—ñ—Ç–∞–Ω–Ω—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤—ñ—Ç', '–≤—ñ—Ç–∞—é', '–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ', '–¥–æ–±—Ä–∏–π']):
            greetings = [
                "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? –©–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –ø–ª–∞–Ω—É—î—Ç—å—Å—è? üòä",
                "–í—ñ—Ç–∞—é! –†–∞–¥–∏–π –≤–∞—Å –±–∞—á–∏—Ç–∏! –ß–∏–º –∑–∞–π–º–∞—î–º–æ—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?",
                "–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –£ –º–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π - –≥–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö –ø—Ä–∏–≥–æ–¥! üöÄ",
                "–ü—Ä–∏–≤—ñ—Ç-–ø—Ä–∏–≤—ñ—Ç! –Ø–∫ –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∏? –Ø —Ç—É—Ç, –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—Å—å–æ–≥–æ —Ü—ñ–∫–∞–≤–æ–≥–æ!"
            ]
            import random
            return random.choice(greetings)
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
        if any(word in message_lower for word in ['—è–∫ —Å–ø—Ä–∞–≤–∏', '—è–∫ –¥–µ–ª–∞', '—â–æ –Ω–æ–≤–æ–≥–æ', '—Å—Ç–∞—Ç—É—Å']):
            status_responses = [
                "–£ –º–µ–Ω–µ –≤—Å–µ —á—É–¥–æ–≤–æ! –©–æ–π–Ω–æ –¥–æ–ø–æ–º—ñ–≥ –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ —Ü—ñ–∫–∞–≤–∏–º –ø—Ä–æ—î–∫—Ç–æ–º. –ê —É –≤–∞—Å —è–∫ —Å–ø—Ä–∞–≤–∏?",
                "–í—ñ–¥–º—ñ–Ω–Ω–æ! –°—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–≤—á–∏–≤—Å—è —á–æ–º—É—Å—å –Ω–æ–≤–æ–º—É - –∑–∞–≤–∂–¥–∏ —Ü—ñ–∫–∞–≤–æ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—è. –Ø–∫ –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∏?",
                "–í—Å–µ —Å—É–ø–µ—Ä! Goose –ø—Ä–∞—Ü—é—î —è–∫ —à–≤–µ–π—Ü–∞—Ä—Å—å–∫–∏–π –≥–æ–¥–∏–Ω–Ω–∏–∫, –ì—Ä—ñ—à–∞ –ø–∏–ª—å–Ω—É—î, –∞ —è –¥—É–º–∞—é –Ω–∞–¥ –Ω–æ–≤–∏–º–∏ —ñ–¥–µ—è–º–∏. –†–æ–∑–∫–∞–∂–µ—Ç–µ –ø—Ä–æ —Å–µ–±–µ?",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! Atlas Core –≥—É–¥–∏—Ç—å —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–≤–∏–≥—É–Ω. –ê —â–æ —É –≤–∞—Å —Ü—ñ–∫–∞–≤–æ–≥–æ?"
            ]
            import random
            return random.choice(status_responses)
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        if any(word in message_lower for word in ['—â–æ –º–æ–∂–µ—à', '–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ', '—Ñ—É–Ω–∫—Ü—ñ—ó', '–¥–æ–ø–æ–º–æ–≥–∞', '—Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ']):
            return """–û, –±–∞–≥–∞—Ç–æ —á–æ–≥–æ —Ü—ñ–∫–∞–≤–æ–≥–æ! –Ø –¥—É–∂–µ –ª—é–±–ª—é:

üß† –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è —Ç–∞ –¥–∏—Å–∫—É—Ç—É–≤–∞—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏
üöÄ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è  
üéØ –ö–æ–æ—Ä–¥–∏–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ Goose –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
üõ°Ô∏è –ü—ñ–∫–ª—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ –±–µ–∑–ø–µ–∫—É —Ä–∞–∑–æ–º –∑ –ì—Ä—ñ—à–µ—é
‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–º–∏ –ø—Ä–æ—î–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—ñ—ó

–ù–∞–π–∫—Ä–∞—â–µ - —è –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥–∏, –∞ –¥—ñ–π—Å–Ω–æ –¥—É–º–∞—é –Ω–∞–¥ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏! –¶—ñ–∫–∞–≤–æ –∂! ÔøΩ"""
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        if any(word in message_lower for word in ['atlas', '—Å–∏—Å—Ç–µ–º–∞', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏', '–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞']):
            return """–ê—Ö, —Ü–µ –º–æ—è —É–ª—é–±–ª–µ–Ω–∞ —Ç–µ–º–∞! üèóÔ∏è 

–ú–∏ –∑ –∫–æ–º–∞–Ω–¥–æ—é - —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—è –º—Ä—ñ—è:
üß† **–Ø (Atlas)** - –º–æ–∑–æ–∫ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –ª—é–±–ª—é –¥—É–º–∞—Ç–∏ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è
üöÄ **Goose** - —Ä—É–∫–∏ —Ç–∞ –Ω–æ–≥–∏, –≤–∏–∫–æ–Ω—É—î –≤—Å–µ —â–æ —Ç—Ä–µ–±–∞
üõ°Ô∏è **–ì—Ä—ñ—à–∞** - –Ω–∞—à –æ—Ö–æ—Ä–æ–Ω–µ—Ü—å, —Å—Ç–µ–∂–∏—Ç—å —â–æ–± –≤—Å–µ –±—É–ª–æ –±–µ–∑–ø–µ—á–Ω–æ

–†–∞–∑–æ–º –º–∏ –º–æ–∂–µ–º–æ –≥–æ—Ä—ñ—ó –∑—Ä—É—à–∏—Ç–∏! –•–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ —â–æ –º–∏ –≤–º—ñ—î–º–æ? ‚ö°"""
        
        # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        if any(word in message_lower for word in ['–∑—Ä–æ–±–∏', '–≤–∏–∫–æ–Ω–∞–π', '–∑–∞–ø—É—Å—Ç–∏', '–∑–Ω–∞–π–¥–∏', '—Å—Ç–≤–æ—Ä–∏']):
            task_responses = [
                "–û, –∑–∞–≤–¥–∞–Ω–Ω—è! –¶–µ —Ü—ñ–∫–∞–≤–æ! –ü–µ—Ä–µ–¥–∞—é Goose - –≤—ñ–Ω –±—É–¥–µ –≤ –∑–∞—Ö–≤–∞—Ç—ñ! üîÑ",
                "–ö–ª–∞—Å–Ω–æ, —Ä–æ–±–æ—Ç–∞! Goose –≤–∂–µ –ø–æ—Ç–∏—Ä–∞—î —Ä—É–∫–∏ –≤—ñ–¥ –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è. –ó–∞–ø—É—Å–∫–∞—é... üöÄ",
                "–£—Ä–∞, —â–æ—Å—å —Ä–æ–±–∏—Ç–∏! –Ø –æ–±–æ–∂–Ω—é—é –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. Goose, –≤–ø–µ—Ä–µ–¥! ‚ö°"
            ]
            import random
            return random.choice(task_responses)
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
        if any(word in message_lower for word in ['—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è', '–ø–ª–∞–Ω', '–ø—ñ–¥—Ö—ñ–¥', '–º–µ—Ç–æ–¥–æ–ª–æ–≥—ñ—è']):
            return "–û, —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è! üéØ –¶–µ –º–æ—è —É–ª—é–±–ª–µ–Ω–∞ —Ç–µ–º–∞! –Ø –¥—É–∂–µ –¥–æ–±—Ä–µ –≤–º—ñ—é –ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Ö–æ–¥–∏. –†–æ–∑–∫–∞–∂–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ —â–æ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ?"
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        natural_responses = [
            "–¶—ñ–∫–∞–≤–æ! –†–æ–∑–∫–∞–∂–µ—Ç–µ –±—ñ–ª—å—à–µ? –ú–µ–Ω—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—è –Ω–æ–≤–µ ü§î",
            "–•–º, –∑–≤—É—á–∏—Ç—å —ñ–Ω—Ç—Ä–∏–≥—É—é—á–µ! –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
            "–û, —Ü–µ —â–æ—Å—å –Ω–æ–≤–µ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –¥—É–º–∫–∞–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞? üí≠",
            "–ö–ª–∞—Å–Ω–∞ —Ç–µ–º–∞! –Ø –∑–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ü—ñ–∫–∞–≤—ñ —Ä–µ—á—ñ",
            "–ó–≤—É—á–∏—Ç—å –∑–∞—Ö–æ–ø–ª—é—é—á–µ! –ú–æ–∂–µ—Ç–µ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ?",
            "–¶—ñ–∫–∞–≤–∏–π –ø–æ–≤–æ—Ä–æ—Ç! –î–µ—Ç–∞–ª—ñ–∑—É–π—Ç–µ, —è–∫—â–æ –Ω–µ —Å–∫–ª–∞–¥–Ω–æ? üòä"
        ]
        import random
        return random.choice(natural_responses)

    def analyze_clarification_request(self, message: str, intent_analysis: Dict, previous_context: Dict = None) -> Dict:
        """
        –†–æ–∑—É–º–Ω–æ –∞–Ω–∞–ª—ñ–∑—É—î —á–∏ —Ü–µ —É—Ç–æ—á–Ω—é–≤–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ —á–∏ –º–æ–∂–µ —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        """
        print("üîç Atlas LLM1: –ê–Ω–∞–ª—ñ–∑—É—é —á–∏ —Ü–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è...")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        try:
            gemini_analysis = self._analyze_clarification_with_gemini(message, intent_analysis, previous_context)
            if gemini_analysis:
                return gemini_analysis
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —É—Ç–æ—á–Ω–µ–Ω—å: {e}")
        
        # Fallback –Ω–∞ –ø—Ä–æ–º–ø—Ç-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        return self._analyze_clarification_locally(message, intent_analysis, previous_context)

    def _analyze_clarification_with_gemini(self, message: str, intent_analysis: Dict, previous_context: Dict) -> Optional[Dict]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —É—Ç–æ—á–Ω–µ–Ω—å"""
        import requests
        
        api_key = acfg.gemini_api_key()
        model = acfg.gemini_model('gemini-2.0-flash')
        base_url = acfg.gemini_base_url('https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –†–æ–∑—É–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —É—Ç–æ—á–Ω–µ–Ω—å
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É —É—Ç–æ—á–Ω—é–≤–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —É —á–∞—Ç-–±–æ—Ç—ñ Atlas.

–ó–ê–í–î–ê–ù–ù–Ø: –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω—é–≤–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ —á–∏ –º–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥–∞—Ç–∏ —Ä–æ–∑—É–º–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.

–ü–†–ò–ù–¶–ò–ü–ò:
üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –∞–Ω–∞–ª—ñ–∑: –†–æ–∑–≥–ª—è–¥–∞–π –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —Ä–æ–∑–º–æ–≤–∏
üéØ –†–æ–∑—É–º–Ω–µ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: –ü—Ä–æ–ø–æ–Ω—É–π –ª–æ–≥—ñ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
‚ú® –ê–≤—Ç–æ–Ω–æ–º–Ω—ñ—Å—Ç—å: –ù–∞–º–∞–≥–∞–π—Å—è –≤–∏—Ä—ñ—à–∏—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –±–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
üîÑ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: –Ø–∫—â–æ –º–æ–∂–Ω–∞ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ - —Ä–æ–±–∏ —Ü–µ, —è–∫—â–æ –Ω—ñ - –ø–æ–∑–Ω–∞—á–∞–π —è–∫ –ø–∏—Ç–∞–Ω–Ω—è

–¢–ò–ü–ò –£–¢–û–ß–ù–ï–ù–¨:
1. –õ–æ–∫–∞—Ü—ñ—è: "—è–∫–µ –º—ñ—Å—Ç–æ?" ‚Üí –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è "–ö–∏—ó–≤" (—Å—Ç–æ–ª–∏—Ü—è)
2. –ß–∞—Å: "–∫–æ–ª–∏?" ‚Üí "–∑–∞—Ä–∞–∑" –∞–±–æ "–ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å"
3. –§–æ—Ä–º–∞—Ç: "—è–∫–∏–π —Ä–æ–∑–º—ñ—Ä?" ‚Üí "–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π" –∞–±–æ "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π"
4. –ö—ñ–ª—å–∫—ñ—Å—Ç—å: "—Å–∫—ñ–ª—å–∫–∏?" ‚Üí "–¥–æ—Å—Ç–∞—Ç–Ω—å–æ" –∞–±–æ —Ä–æ–∑—É–º–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
5. –¢–∏–ø: "—è–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?" ‚Üí "–Ω–∞–π–∫—Ä–∞—â–∏–π" –∞–±–æ "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π"

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (JSON):
{
  "is_clarification": true/false,
  "can_auto_complete": true/false,
  "auto_completion": "–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–±–æ null",
  "completion_reason": "–ø–æ—è—Å–Ω–µ–Ω–Ω—è —á–æ–º—É —Ç–∞–∫–µ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è",
  "enriched_message": "–∑–±–∞–≥–∞—á–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º",
  "should_ask_user": true/false,
  "suggested_question": "–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è"
}"""

        user_prompt = f"""–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{message}"

–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(previous_context, ensure_ascii=False) if previous_context else "–≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}
–ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {json.dumps(intent_analysis, ensure_ascii=False)}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ."""

        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"{system_prompt}\n\n{user_prompt}"
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.2,
                    "maxOutputTokens": 400
                }
            }
            
            response = post_json_with_retry(
                url,
                headers=headers,
                json=data,
                timeout=15,
            )
            response.raise_for_status()
            
            result = response.json()
            if result.get('candidates') and len(result['candidates']) > 0:
                analysis_text = result['candidates'][0]['content']['parts'][0]['text'].strip()
                
                # –ü–∞—Ä—Å–∏–º–æ JSON
                try:
                    if '```json' in analysis_text:
                        analysis_text = analysis_text.split('```json')[1].split('```')[0]
                    elif '```' in analysis_text:
                        analysis_text = analysis_text.split('```')[1].split('```')[0]
                    
                    analysis = json.loads(analysis_text)
                    print(f"‚úÖ Gemini –∞–Ω–∞–ª—ñ–∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è: {analysis.get('is_clarification')} / –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {analysis.get('can_auto_complete')}")
                    return analysis
                    
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON —É—Ç–æ—á–Ω–µ–Ω–Ω—è: {e}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —É—Ç–æ—á–Ω–µ–Ω–Ω—è: {e}")
            
        return None

    def _analyze_clarification_locally(self, message: str, intent_analysis: Dict, previous_context: Dict) -> Dict:
        """–õ–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —É—Ç–æ—á–Ω–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ–º–ø—Ç—ñ–≤"""
        
        clarification_prompt = f"""
        –ê–Ω–∞–ª—ñ–∑ —É—Ç–æ—á–Ω—é–≤–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è:
        
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "{message}"
        –ö–æ–Ω—Ç–µ–∫—Å—Ç: {previous_context.get('topic', '–Ω–µ–º–∞—î') if previous_context else '–Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥'}
        –Ü–Ω—Ç–µ–Ω—Ü—ñ—è: {intent_analysis.get('intent', '–Ω–µ–≤—ñ–¥–æ–º–∞')}
        
        –ü–∏—Ç–∞–Ω–Ω—è:
        1. –ß–∏ —Ü–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É?
        2. –ß–∏ –º–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞—Ç–∏ —Ä–æ–∑—É–º–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å?
        3. –©–æ –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?
        """
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è fallback
        message_lower = message.lower()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ü–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è
        question_indicators = ["—è–∫–µ", "—è–∫–∏–π", "—è–∫–∞", "–¥–µ", "–∫–æ–ª–∏", "—Å–∫—ñ–ª—å–∫–∏", "—è–∫"]
        is_clarification = any(indicator in message_lower for indicator in question_indicators)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
        auto_completion = None
        completion_reason = None
        
        if is_clarification:
            if any(word in message_lower for word in ["–º—ñ—Å—Ç–æ", "–º—ñ—Å—Ü–µ", "–ª–æ–∫–∞—Ü—ñ—è"]):
                auto_completion = "–ö–∏—ó–≤"
                completion_reason = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–æ–ª–∏—Ü—é –£–∫—Ä–∞—ó–Ω–∏ —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
            elif any(word in message_lower for word in ["—á–∞—Å", "–∫–æ–ª–∏"]):
                auto_completion = "–∑–∞—Ä–∞–∑"
                completion_reason = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å"
            elif any(word in message_lower for word in ["—Ä–æ–∑–º—ñ—Ä", "—Ñ–æ—Ä–º–∞—Ç"]):
                auto_completion = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä"
                completion_reason = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
            elif "–ø–æ–≥–æ–¥–∞" in message_lower:
                auto_completion = "–ø–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è –ö–∏—î–≤–∞"
                completion_reason = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è —Å—Ç–æ–ª–∏—Ü—ñ"
        
        # –§–æ—Ä–º—É—î–º–æ –∑–±–∞–≥–∞—á–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        enriched_message = message
        if auto_completion:
            enriched_message = f"{message} ({auto_completion})"
        
        return {
            "is_clarification": is_clarification,
            "can_auto_complete": auto_completion is not None,
            "auto_completion": auto_completion,
            "completion_reason": completion_reason,
            "enriched_message": enriched_message,
            "should_ask_user": is_clarification and not auto_completion,
            "suggested_question": f"–£—Ç–æ—á–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞: {message}" if is_clarification and not auto_completion else None
        }

    def enrich_task_with_context(self, original_message: str, clarification_analysis: Dict, intent_analysis: Dict) -> str:
        """
        –ó–±–∞–≥–∞—á—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º–∏
        """
        if not clarification_analysis.get("can_auto_complete"):
            return original_message
        
        auto_completion = clarification_analysis.get("auto_completion")
        reason = clarification_analysis.get("completion_reason")
        
        # –§–æ—Ä–º—É—î–º–æ –∑–±–∞–≥–∞—á–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        enriched_message = f"{original_message}"
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        if "–ø–æ–≥–æ–¥–∞" in original_message.lower():
            enriched_message += f" –¥–ª—è –º—ñ—Å—Ç–∞ {auto_completion}"
        elif "—Ñ—ñ–ª—å–º" in original_message.lower():
            enriched_message += f" - –∑–Ω–∞–π—Ç–∏ {auto_completion}"
        elif "–±—Ä–∞—É–∑–µ—Ä" in original_message.lower():
            enriched_message += f" –≤ {auto_completion}"
        else:
            enriched_message += f" ({auto_completion})"
        
        print(f"‚ú® Atlas LLM1: –ó–±–∞–≥–∞—á–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {enriched_message}")
        print(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        return enriched_message

    def get_status(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å Atlas LLM"""
        return {
            "name": "Atlas LLM1",
            "status": "active",
            "conversations_handled": len(self.conversation_history),
            "current_context": self.current_context.copy(),
            "gemini_api_available": bool(acfg.gemini_api_key()),
            "last_activity": datetime.now().isoformat()
        }
