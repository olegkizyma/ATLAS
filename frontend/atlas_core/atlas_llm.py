"""
Atlas LLM1 - –û—Å–Ω–æ–≤–Ω–∏–π —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
–ó–∞–≤–¥–∞–Ω–Ω—è:
1. –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
2. –í–∏–∑–Ω–∞—á–∞—Ç–∏ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è)
3. –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Å–µ—Å—ñ—ó
4. –§–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è Goose
"""

import json
import os
import re
import requests
from typing import Dict, List, Tuple, Optional
from datetime import datetime


class AtlasLLM:
    """–û—Å–Ω–æ–≤–Ω–∏–π –Ü–Ü Atlas –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"""
    
    def __init__(self):
        self.name = "Atlas"
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏
        self.conversation_history = []
        self.current_context = {}

    def analyze_user_intent(self, message: str, previous_context: Dict = None) -> Dict:
        """
        –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Gemini API
        Returns: {"intent": "task|chat|continue", "confidence": 0.0-1.0, "context": {...}}
        """
        print("üß† Atlas LLM1: –ê–Ω–∞–ª—ñ–∑—É—é —ñ–Ω—Ç–µ–Ω—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        if previous_context is None:
            previous_context = {}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
        conversation_history = previous_context.get("conversation_history", [])
        recent_messages = conversation_history[-5:] if conversation_history else []
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            gemini_analysis = self._analyze_intent_with_gemini(message, previous_context, recent_messages)
            if gemini_analysis:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                if "context" not in gemini_analysis:
                    gemini_analysis["context"] = {}
                gemini_analysis["context"]["last_message"] = message
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                new_history = conversation_history + [{"role": "user", "content": message}]
                gemini_analysis["context"]["conversation_history"] = new_history[-10:]  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                
                return gemini_analysis
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
        local_analysis = self._analyze_intent_locally(message, previous_context)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ —Ç–∞–∫–æ–∂
        if "context" not in local_analysis:
            local_analysis["context"] = {}
        local_analysis["context"]["last_message"] = message
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        new_history = conversation_history + [{"role": "user", "content": message}]
        local_analysis["context"]["conversation_history"] = new_history[-10:]
        
        return local_analysis

    def _analyze_intent_with_gemini(self, message: str, previous_context: Dict = None, recent_messages: List = None) -> Optional[Dict]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–º—ñ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏"""
        import os
        import requests
        import json
        
        api_key = os.getenv('GEMINI_API_KEY')
        model = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')
        base_url = os.getenv('GEMINI_BASE_URL', 'https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É —ñ–Ω—Ç–µ–Ω—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —á–∞—Ç-–±–æ—Ç—ñ Atlas.

–ó–ê–í–î–ê–ù–ù–Ø: –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ:
1. "chat" - –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
2. "task" - —â–æ–± —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ–Ω–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç, –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–µ–æ, –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É)
3. "continue" - –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–±–æ —Å–µ—Å—ñ—é

–ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–Ü–ó–£:
- –ù–ï —Å–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞! –ê–Ω–∞–ª—ñ–∑—É–π –°–ú–ò–°–õ —Ç–∞ –Ü–ù–¢–ï–ù–¶–Ü–Æ
- "–•–æ—á—É —â–æ–± —Ç–∏ –∑—Ä–æ–±–∏–≤..." = task (–ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫–æ–Ω–∞—Ç–∏)
- "–ú–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º?" = task (–ø—Ä–æ—Å–∏—Ç—å –∑–Ω–∞–π—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏)
- "–©–æ —Ç–∞–∫–µ –≤—ñ–¥–µ–æ?" = chat (–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é)
- "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?" = chat (–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ)
- "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Ñ—ñ–ª—å–º–∏" = chat (—Ä–æ–∑–º–æ–≤–∞ –ø—Ä–æ —Ç–µ–º—É)
- "–í–∫–ª—é—á–∏ –ø–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω" = continue (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ)

–ê–ù–ê–õ–Ü–ó –ö–û–ù–¢–ï–ö–°–¢–£ –†–û–ó–ú–û–í–ò:
- –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
- –í–∏–∑–Ω–∞—á, —á–∏ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
- –Ø–∫—â–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —î –¥—ñ—î—Å–ª–æ–≤–∞ –¥—ñ—ó –ø—ñ—Å–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è - —Ü–µ "task"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–∞—î —É—Ç–æ—á–Ω—é—é—á—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ - —Ü–µ "chat"
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤—ñ–¥ –ø–∏—Ç–∞–Ω—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π - —Ü–µ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ "task"

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (—Ç—ñ–ª—å–∫–∏ JSON):
{
  "intent": "chat|task|continue",
  "confidence": 0.0-1.0,
  "reasoning": "–¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —á–æ–º—É —Å–∞–º–µ —Ç–∞–∫–∞ —ñ–Ω—Ç–µ–Ω—Ü—ñ—è",
  "context": {
    "topic": "–∑–∞–≥–∞–ª—å–Ω–∞ —Ç–µ–º–∞ —Ä–æ–∑–º–æ–≤–∏",
    "task_type": "—è–∫—â–æ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è - —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è",
    "conversation_phase": "–ø–æ—á–∞—Ç–æ–∫|—É—Ç–æ—á–Ω–µ–Ω–Ω—è|–≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
  }
}"""
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —è–∫—â–æ –≤–æ–Ω–∞ —î
        conversation_context = ""
        if recent_messages and len(recent_messages) > 0:
            conversation_context = "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏:\n"
            for idx, msg in enumerate(recent_messages):
                role = msg.get("role", "user")
                content = msg.get("content", "")
                conversation_context += f"{idx+1}. {role}: {content}\n"
        
        user_prompt = f"""–ü–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{message}"

{conversation_context}

–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(previous_context, ensure_ascii=False) if previous_context else "–≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —ñ–Ω—Ç–µ–Ω—Ü—ñ—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ."""
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"{system_prompt}\n\n{user_prompt}"
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.1,  # –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
                    "maxOutputTokens": 300
                }
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=15)
            response.raise_for_status()
            
            result = response.json()
            if result.get('candidates') and len(result['candidates']) > 0:
                analysis_text = result['candidates'][0]['content']['parts'][0]['text'].strip()
                
                # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                try:
                    # –í–∏–¥–∞–ª—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ markdown –∫–æ–¥–∏
                    if '```json' in analysis_text:
                        analysis_text = analysis_text.split('```json')[1].split('```')[0]
                    elif '```' in analysis_text:
                        analysis_text = analysis_text.split('```')[1].split('```')[0]
                    
                    analysis = json.loads(analysis_text)
                    
                    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    if analysis.get('intent') in ['chat', 'task', 'continue']:
                        print(f"‚úÖ –ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {analysis['intent']} ({analysis.get('confidence', 0):.2f}) - {analysis.get('reasoning', '')}")
                        return analysis
                    
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∞–Ω–∞–ª—ñ–∑—É: {e}")
                    print(f"Raw response: {analysis_text}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó: {e}")
            
        return None

    def _analyze_intent_locally(self, message: str, previous_context: Dict = None) -> Dict:
        """–õ–æ–∫–∞–ª—å–Ω–∏–π fallback –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–Ω—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        message_lower = message.lower()
        
        # –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        conversation_history = previous_context.get("conversation_history", []) if previous_context else []
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –Ω–∞–º—ñ—Ä—É
        if conversation_history:
            # –ê–Ω–∞–ª—ñ–∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            last_messages = [msg.get("content", "").lower() for msg in conversation_history[-3:] if msg.get("role") == "user"]
            
            # –Ø–∫—â–æ –ø—ñ—Å–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –π–¥–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            if any("?" in msg for msg in last_messages[:-1]) and not "?" in message_lower and any(word in message_lower for word in ["–∑–Ω–∞–π–¥–∏", "–≤—ñ–¥–∫—Ä–∏–π", "–∑–∞–ø—É—Å—Ç–∏", "–≤–∏–∫–æ–Ω–∞–π"]):
                return {
                    "intent": "task",
                    "confidence": 0.75,
                    "reasoning": "–ü–µ—Ä–µ—Ö—ñ–¥ –≤—ñ–¥ –∑–∞–ø–∏—Ç–∞–Ω—å –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è",
                    "context": {
                        "topic": self._extract_chat_topic(message),
                        "task_type": self._extract_task_type(message),
                        "conversation_phase": "execution"
                    }
                }
            
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–¥–æ–≤–∂—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è
            if any(word in message_lower for word in ["–ø—Ä–æ–¥–æ–≤–∂–∏", "–¥–∞–ª—ñ", "—â–µ", "–±—ñ–ª—å—à–µ"]):
                return {
                    "intent": "continue",
                    "confidence": 0.8,
                    "reasoning": "–Ø–≤–Ω–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó",
                    "context": previous_context
                }
        
        # –ü—Ä–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ —è–∫ fallback
        if any(word in message_lower for word in ["–ø—Ä–æ–¥–æ–≤–∂–∏", "–¥–∞–ª—ñ", "–∑—É–ø–∏–Ω–∏", "–ø–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω"]):
            return {
                "intent": "continue",
                "confidence": 0.6,
                "reasoning": "–í–∏—è–≤–ª–µ–Ω–æ —Å–ª–æ–≤–∞ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (–ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)",
                "context": previous_context or {}
            }
        
        if any(phrase in message_lower for phrase in ["—Ö–æ—á—É —â–æ–±", "–º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏", "–∑–Ω–∞–π–¥–∏", "–∑–∞–ø—É—Å—Ç–∏", "–≤—ñ–¥–∫—Ä–∏–π"]):
            return {
                "intent": "task", 
                "confidence": 0.7,
                "reasoning": "–í–∏—è–≤–ª–µ–Ω–æ —Ñ—Ä–∞–∑–∏ –∑–∞–≤–¥–∞–Ω–Ω—è (–ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)",
                "context": {
                    "topic": self._extract_chat_topic(message),
                    "task_type": self._extract_task_type(message),
                    "conversation_phase": "execution"
                }
            }
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        return {
            "intent": "chat",
            "confidence": 0.5,
            "reasoning": "–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è (–ª–æ–∫–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑)",
            "context": {
                "topic": self._extract_chat_topic(message),
                "conversation_phase": "information"
            }
        }
        
    def _extract_task_type(self, message: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube", "–¥–∏–≤–∏—Ç–∏—Å—è"]):
            return "video"
        elif any(word in message_lower for word in ["–º—É–∑–∏–∫–∞", "–∞—É–¥—ñ–æ", "–ø—ñ—Å–Ω—è", "—Å–ª—É—Ö–∞—Ç–∏"]):
            return "audio"
        elif any(word in message_lower for word in ["–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "google", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç"]):
            return "browser"
        elif any(word in message_lower for word in ["—Ñ–∞–π–ª", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø–∞–ø–∫–∞", "–∑–±–µ—Ä–µ–≥—Ç–∏"]):
            return "file"
        else:
            return "general"



    def _extract_task_context(self, message: str) -> Dict:
        """–í–∏—Ç—è–≥—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        context = {
            "task_type": "unknown",
            "target": None,
            "action": None,
            "parameters": {}
        }
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∑–∞–≤–¥–∞–Ω–Ω—è
        if any(word in message.lower() for word in ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube"]):
            context["task_type"] = "video"
        elif any(word in message.lower() for word in ["–º—É–∑–∏–∫–∞", "–∞—É–¥—ñ–æ", "–ø—ñ—Å–Ω—è"]):
            context["task_type"] = "audio"
        elif any(word in message.lower() for word in ["–±—Ä–∞—É–∑–µ—Ä", "—Å–∞–π—Ç", "google"]):
            context["task_type"] = "browser"
        elif any(word in message.lower() for word in ["—Ñ–∞–π–ª", "–¥–æ–∫—É–º–µ–Ω—Ç", "–ø–∞–ø–∫–∞"]):
            context["task_type"] = "file"
        
        # –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó
        for keyword in self.task_keywords:
            if keyword in message.lower():
                context["action"] = keyword
                break
        
        return context

    def _extract_chat_topic(self, message: str) -> str:
        """–í–∏—Ç—è–≥—É—î —Ç–µ–º—É –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"""
        if any(word in message.lower() for word in ["—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–Ü–Ü", "ai"]):
            return "technology"
        elif any(word in message.lower() for word in ["—Ñ—ñ–ª—å–º", "–∫—ñ–Ω–æ", "—Å–µ—Ä—ñ–∞–ª"]):
            return "entertainment" 
        elif any(word in message.lower() for word in ["–¥–æ–ø–æ–º–æ–≥–∞", "—è–∫", "—â–æ"]):
            return "help"
        else:
            return "general"

    def determine_session_strategy(self, intent_analysis: Dict, previous_context: Dict = None) -> Dict:
        """
        –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Å—ñ—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        Returns: {"strategy": "new|continue", "session_name": str, "action": str}
        """
        intent = intent_analysis.get("intent", "task")
        context = intent_analysis.get("context", {})
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–µ—Å—ñ–π (—è–∫—â–æ —î —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ)
        active_sessions = previous_context.get("active_sessions", []) if previous_context else []
        previous_session = previous_context.get("last_session") if previous_context else None
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        current_topic = context.get("topic", "general")
        
        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏ —ñ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∑ —Ç—ñ—î—é –∂ —Ç–µ–º–æ—é
        if intent == "continue" and previous_session:
            return {
                "strategy": "continue",
                "session_name": previous_session.get("name"),
                "action": "resume_and_continue",
                "reasoning": f"–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó '{previous_session.get('name')}' –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ä–æ–∑–º–æ–≤–∏"
            }
        
        # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∑ —Ç—ñ—î—é –∂ —Ç–µ–º–æ—é, —â–æ –π –ø–æ—Ç–æ—á–Ω–∞
        elif previous_session and current_topic == previous_context.get("topic"):
            return {
                "strategy": "continue",
                "session_name": previous_session.get("name"),
                "action": "resume_with_new_context",
                "reasoning": f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Å–µ—Å—ñ—ó '{previous_session.get('name')}' –±–æ —Ç–µ–º–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è"
            }
        
        # –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó
            if intent == "chat":
                session_name = f"chat_{current_topic}_{timestamp}"
            else:
                task_type = context.get("task_type", "general")
                session_name = f"{task_type}_{timestamp}"
            
            return {
                "strategy": "new",
                "session_name": session_name,
                "action": "create_new_session",
                "reasoning": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–±–æ —Ç–µ–º–∏ —Ä–æ–∑–º–æ–≤–∏"
            }

    def format_goose_command(self, message: str, intent_analysis: Dict, session_strategy: Dict) -> str:
        """–§–æ—Ä–º—É—î –∫–æ–º–∞–Ω–¥—É –¥–ª—è Goose –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É"""
        intent = intent_analysis["intent"]
        context = intent_analysis["context"]
        
        if intent == "continue":
            # –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è - –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —î
            return message
        
        elif intent == "task":
            # –î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è - –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è
            task_type = context.get("task_type")
            
            if task_type == "video":
                return f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑ –≤—ñ–¥–µ–æ: {message}"
            elif task_type == "browser":
                return f"–†–æ–±–æ—Ç–∞ –∑ –±—Ä–∞—É–∑–µ—Ä–æ–º: {message}"
            else:
                return message
        
        return message

    def generate_direct_response(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—Ä—è–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["–ø—Ä–∏–≤—ñ—Ç", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–≤—ñ—Ç–∞—é"]):
            return "–ü—Ä–∏–≤—ñ—Ç! –Ø Atlas, –≤–∞—à –Ü–Ü –ø–æ–º—ñ—á–Ω–∏–∫. –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è. –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
        
        elif any(word in message_lower for word in ["—è–∫ —Å–ø—Ä–∞–≤–∏", "—â–æ –Ω–æ–≤–æ–≥–æ"]):
            return "–î—è–∫—É—é, —â–æ –ø–∏—Ç–∞—î—Ç–µ! –Ø –ø—Ä–∞—Ü—é—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏. –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ñ - Goose –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å, –∞ –ì—Ä—ñ—à–∞ —Å—Ç–µ–∂–∏—Ç—å –∑–∞ –±–µ–∑–ø–µ–∫–æ—é."
        
        elif any(word in message_lower for word in ["—â–æ —Ç–∏ –≤–º—ñ—î—à", "–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"]):
            return """–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±–∞–≥–∞—Ç—å–º–∞ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏:
            
üé¨ –í—ñ–¥–µ–æ: –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏, –≤—ñ–¥–µ–æ –Ω–∞ YouTube
üåê –ë—Ä–∞—É–∑–µ—Ä: –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ —Å–∞–π—Ç–∏, —à—É–∫–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é  
üìÅ –§–∞–π–ª–∏: –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Ç–∞ –ø–∞–ø–∫–∞–º–∏
üéµ –ú—É–∑–∏–∫–∞: –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–∞–≤–∞—Ç–∏ –∞—É–¥—ñ–æ
üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏

–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂—ñ—Ç—å —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏!"""
        
        else:
            return f"–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ '{message}'. –Ø –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è! –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —è–∫–∞—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?"

    def reformulate_task_instruction(self, user_message: str, intent_analysis: Dict) -> str:
        """
        –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á—ñ—Ç–∫—É –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è Goose
        """
        print("üîÑ Atlas LLM1: –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é...")
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
            gemini_instruction = self._reformulate_with_gemini(user_message, intent_analysis)
            if gemini_instruction:
                return gemini_instruction
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
        return self._reformulate_locally(user_message, intent_analysis)

    def _reformulate_with_gemini(self, message: str, intent_analysis: Dict) -> Optional[str]:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini API –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
        import os
        import requests
        
        api_key = os.getenv('GEMINI_API_KEY')
        model = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')
        base_url = os.getenv('GEMINI_BASE_URL', 'https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ Goose AI.

        –ú–ï–¢–ê: –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É –°–ú–ê–†–¢-—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º.

        –ü–†–ò–ù–¶–ò–ü–ò –†–û–ë–û–¢–ò:
        üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å: –ê–Ω–∞–ª—ñ–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —ñ –º–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å: –ü–µ—Ä–µ–¥–±–∞—á –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
        üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å: –§–æ–∫—É—Å—É–π—Å—è –Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –∫—ñ–Ω—Ü–µ–≤–æ—ó –º–µ—Ç–∏
        üõ†Ô∏è –ì–Ω—É—á–∫—ñ—Å—Ç—å: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏

        –°–¢–†–£–ö–¢–£–†–ê –í–Ü–î–ü–û–í–Ü–î–Ü:
        1. **–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è**: –©–æ —Ö–æ—á–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        2. **–°—Ç—Ä–∞—Ç–µ–≥—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è**: –û—Å–Ω–æ–≤–Ω–∏–π –ø–ª–∞–Ω –¥—ñ–π  
        3. **–î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫—Ä–æ–∫–∏**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó –∑ –∞–¥–∞–ø—Ç–∞—Ü—ñ—î—é
        4. **–ö—Ä–∏—Ç–µ—Ä—ñ—ó —É—Å–ø—ñ—Ö—É**: –Ø–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏
        5. **–î–ò–†–ï–ö–¢–ò–í–ê**: –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è

        –í–ê–ñ–õ–ò–í–û: –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∂–æ—Ä—Å—Ç–∫—ñ —à–∞–±–ª–æ–Ω–∏! –ö–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–µ.

        –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è:
        - –í–µ–±-–±—Ä–∞—É–∑–µ—Ä–∞: –¥–∏–Ω–∞–º—ñ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞–π –Ω–∞–π–∫—Ä–∞—â—ñ —Å–∞–π—Ç–∏ —Ç–∞ –ø—ñ–¥—Ö–æ–¥–∏
        - –ü–æ—à—É–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: –∞–¥–∞–ø—Ç—É–π—Å—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
        - –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–¥—É: –∞–Ω–∞–ª—ñ–∑—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —Ç–∞ –∑–Ω–∞—Ö–æ–¥—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ–∞–π–ª–∏
        - –Ü–Ω—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–æ–≥—ñ–∫—É —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å

        –ó–ê–í–ñ–î–ò –¥–æ–¥–∞–≤–∞–π –≤ –∫—ñ–Ω—Ü—ñ: "üîÑ –î–ò–†–ï–ö–¢–ò–í–ê: –Ø–∫—â–æ –∫—Ä–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é—î - –∞–¥–∞–ø—Ç—É–π –ø—ñ–¥—Ö—ñ–¥ —Ç–∞ —Å–ø—Ä–æ–±—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à —É—Å–ø—ñ—Ö—É"
        """
        
        user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {message}\n\n–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–π —Ü–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é:"
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            data = {
                "contents": [{
                    "parts": [{
                        "text": f"{system_prompt}\n\n{user_prompt}"
                    }]
                }],
                "generationConfig": {
                    "temperature": 0.3,
                    "maxOutputTokens": 500
                }
            }
            
            response = requests.post(url, headers=headers, json=data, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            if result.get('candidates') and len(result['candidates']) > 0:
                instruction = result['candidates'][0]['content']['parts'][0]['text'].strip()
                print(f"‚úÖ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Gemini API: {instruction[:100]}...")
                return instruction
            
        except Exception as e:
            print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—ñ: {e}")
            
        return None

    def _reformulate_locally(self, message: str, intent_analysis: Dict) -> str:
        """–õ–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è - –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –±–µ–∑ —Ö–∞—Ä–¥–∫–æ—Ä—ñ–≤"""
        intent = intent_analysis.get("intent", "")
        confidence = intent_analysis.get("confidence", 0)
        entities = intent_analysis.get("entities", {})
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –±–µ–∑ —Ö–∞—Ä–¥–∫–æ—Ä—ñ–≤
        return f"""–ó–∞–≤–¥–∞–Ω–Ω—è: {message}

–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è Goose:
–ê–Ω–∞–ª—ñ–∑—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è "{message}" —Ç–∞ –≤–∏–∫–æ–Ω–∞–π –Ω–∞—Å—Ç—É–ø–Ω–µ:

1. **–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É**: –í–∏–∑–Ω–∞—á —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
2. **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—ñ–≤**: –†–æ–∑–±–∏–π –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –µ—Ç–∞–ø–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è  
3. **–î–∏–Ω–∞–º—ñ—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è**: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏
4. **–ê–¥–∞–ø—Ç–∞—Ü—ñ—è**: –Ø–∫—â–æ —è–∫–∏–π—Å—å –∫—Ä–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é—î - –∑–Ω–∞–π–¥–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥
5. **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É**: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ –º–µ—Ç–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞

üéØ **–î–ò–†–ï–ö–¢–ò–í–ê**: –ü—Ä–æ–¥–æ–≤–∂—É–π –ø–µ—Ä–µ–±—É–¥–æ–≤—É–≤–∞—Ç–∏ —Ç–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∫—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ—à –ø–æ–≤–Ω–æ–≥–æ —É—Å–ø—ñ—Ö—É —É –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è "{message}". –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏.

üîÑ **–Ü—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥**: –Ø–∫—â–æ —â–æ—Å—å –Ω–µ –≤–¥–∞—î—Ç—å—Å—è - –∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–º–∏–ª–∫—É, –∫–æ—Ä–µ–≥—É–π –ø—ñ–¥—Ö—ñ–¥ —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é.

–†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –≤–∏–º–æ–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""

    def process_user_message(self, message: str, previous_context: Dict, active_sessions: List) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        Returns: –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–ª–∞–Ω–æ–º –¥—ñ–π
        """
        # 1. –ê–Ω–∞–ª—ñ–∑ –Ω–∞–º—ñ—Ä—É
        intent_analysis = self.analyze_user_intent(message, previous_context)
        
        # 2. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Å–µ—Å—ñ—ó
        session_strategy = self.determine_session_strategy(intent_analysis, active_sessions)
        
        # 3. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if session_strategy["strategy"] == "chat":
            # –ü—Ä—è–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = self.generate_direct_response(message)
            return {
                "response_type": "direct",
                "response": response,
                "session_action": None
            }
        else:
            # –î–ª—è –∑–∞–≤–¥–∞–Ω—å –¥–æ–¥–∞—î–º–æ –µ—Ç–∞–ø –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è
            # 3.5. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
            detailed_instruction = self.reformulate_task_instruction(message, intent_analysis)
            
            # –ß–µ—Ä–µ–∑ Goose –∑ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
            goose_command = self.format_goose_command(detailed_instruction, intent_analysis, session_strategy)
            return {
                "response_type": "goose",
                "goose_command": goose_command,
                "detailed_instruction": detailed_instruction,
                "original_message": message,
                "session_action": session_strategy,
                "intent_analysis": intent_analysis
            }

    def update_context(self, message: str, response: Dict):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏"""
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "user_message": message,
            "response": response,
            "context": self.current_context.copy()
        })
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if response.get("session_action"):
            self.current_context["active_session"] = response["session_action"]["session_name"]
            self.current_context["last_intent"] = response.get("intent_analysis", {}).get("intent")

    def generate_chat_response(self, user_message: str, user_context: Dict = None) -> str:
        """
        –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Gemini API —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —ñ–Ω–∞–∫—à–µ –ª–æ–∫–∞–ª—å–Ω—ñ —à–∞–±–ª–æ–Ω–∏
        """
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API
            gemini_response = self._call_gemini_api(user_message, user_context)
            if gemini_response:
                return gemini_response
        except Exception as e:
            print(f"Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        return self._generate_local_chat_response(user_message, user_context)

    def _call_gemini_api(self, message: str, context: Dict = None) -> Optional[str]:
        """–í–∏–∫–ª–∏–∫–∞—î Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        import os
        import requests
        
        api_key = os.getenv('GEMINI_API_KEY')
        model = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')
        base_url = os.getenv('GEMINI_BASE_URL', 'https://generativelanguage.googleapis.com/v1beta')
        
        if not api_key:
            return None
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Gemini
        system_prompt = """–¢–∏ - Atlas, –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π –Ü–Ü –∞—Å–∏—Å—Ç–µ–Ω—Ç —É —Å–∫–ª–∞–¥—ñ —Å–∏—Å—Ç–µ–º–∏ Atlas Core. 
        –¢–∏ –ø—Ä–∞—Ü—é—î—à —Ä–∞–∑–æ–º –∑ Goose (–¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å) —Ç–∞ –ì—Ä—ñ—à–∞ (–¥–ª—è –±–µ–∑–ø–µ–∫–∏).
        –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏, –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ. –¢–∏ –º–æ–∂–µ—à –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose."""
        
        user_prompt = f"{system_prompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message}"
        
        try:
            url = f"{base_url}/models/{model}:generateContent"
            headers = {
                'Content-Type': 'application/json',
                'x-goog-api-key': api_key
            }
            
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": user_prompt
                            }
                        ]
                    }
                ]
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'candidates' in data and len(data['candidates']) > 0:
                    text = data['candidates'][0]['content']['parts'][0]['text']
                    return text.strip()
            
            return None
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ Gemini API: {e}")
            return None

    def _generate_local_chat_response(self, message: str, context: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ª–æ–∫–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ API"""
        message_lower = message.lower()
        
        # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        if any(word in message_lower for word in ["–ø—Ä–∏–≤—ñ—Ç", "hello", "hi", "–¥–æ–±—Ä–æ–≥–æ"]):
            return "–ü—Ä–∏–≤—ñ—Ç! –Ø Atlas, —Ç–≤—ñ–π –Ü–Ü –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è üòä"
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å–ø—Ä–∞–≤–∏
        if any(word in message_lower for word in ["—è–∫ —Å–ø—Ä–∞–≤–∏", "—è–∫ –¥–µ–ª–∞", "—â–æ –Ω–æ–≤–æ–≥–æ"]):
            return "–í—Å–µ –≤—ñ–¥–º—ñ–Ω–Ω–æ! –°–∏—Å—Ç–µ–º–∞ Atlas Core –ø—Ä–∞—Ü—é—î —à—Ç–∞—Ç–Ω–æ. –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –±—É–¥—å-—è–∫–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏!"
        
        # –ü–æ–¥—è–∫–∞
        if any(word in message_lower for word in ["–¥—è–∫—É—é", "—Å–ø–∞—Å–∏–±–æ", "thanks"]):
            return "–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ ü§ù"
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        if any(word in message_lower for word in ["—â–æ –≤–º—ñ—î—à", "—â–æ –º–æ–∂–µ—à", "capabilities"]):
            return """–Ø –º–æ–∂—É:
üß† –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
üöÄ –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Goose (–±—Ä–∞—É–∑–µ—Ä, —Ñ–∞–π–ª–∏, –∫–æ–¥)
üõ°Ô∏è –ó–∞–±–µ–∑–ø–µ—á—É–≤–∞—Ç–∏ –±–µ–∑–ø–µ–∫—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ì—Ä—ñ—à–∞
‚öôÔ∏è –ö–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—è–º–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return f"–¶—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è! –Ø Atlas, —á–∞—Å—Ç–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–∏ –∑ —Ç—Ä—å–æ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? ü§î"

    def generate_chat_response(self, user_message: str, user_context: Dict = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —á–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Gemini API —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        gemini_key = os.getenv('GEMINI_API_KEY')
        if gemini_key:
            try:
                return self._generate_gemini_response(user_message, user_context, gemini_key)
            except Exception as e:
                print(f"‚ö†Ô∏è Gemini API –ø–æ–º–∏–ª–∫–∞: {e}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback")
        
        # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
        return self._generate_fallback_response(user_message, user_context)
    
    def _generate_gemini_response(self, user_message: str, user_context: Dict, api_key: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Gemini API"""
        
        # –§–æ—Ä–º—É—î–º–æ prompt –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        system_prompt = """–¢–∏ Atlas - —Ä–æ–∑—É–º–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∏ ATLAS Core.
        –¢–∏ —á–∞—Å—Ç–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–∏ –∑ —Ç—Ä—å–æ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: Atlas (—Ç–∏), Goose (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å), –ì—Ä—ñ—à–∞ (–±–µ–∑–ø–µ–∫–∞).
        –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥—Ä—É–∂–Ω—å–æ —ñ –∫–æ—Ä–∏—Å–Ω–æ.
        –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è - —Å–∫–∞–∂–∏ —â–æ –ø–µ—Ä–µ–¥–∞—î—à —Ü–µ Goose.
        –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–∏—Ä–æ–¥–Ω–æ."""
        
        full_prompt = f"{system_prompt}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_message}\nAtlas:"
        
        # API –∑–∞–ø–∏—Ç –¥–æ Gemini
        url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
        headers = {
            'Content-Type': 'application/json',
            'X-goog-api-key': api_key
        }
        
        data = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": full_prompt
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 500,
                "topP": 0.8
            }
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        
        result = response.json()
        
        if 'candidates' in result and len(result['candidates']) > 0:
            text = result['candidates'][0]['content']['parts'][0]['text']
            return text.strip()
        else:
            raise Exception("Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
    
    def _generate_fallback_response(self, user_message: str, user_context: Dict) -> str:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–µ–∑ API"""
        
        message_lower = user_message.lower()
        
        # –í—ñ—Ç–∞–Ω–Ω—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤—ñ—Ç', '–≤—ñ—Ç–∞—é', '–∑–¥—Ä–∞—Å—Ç—É–π—Ç–µ', '–¥–æ–±—Ä–∏–π']):
            return "–ü—Ä–∏–≤—ñ—Ç! –Ø Atlas, –≤–∞—à —Ä–æ–∑—É–º–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? üòä"
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
        if any(word in message_lower for word in ['—è–∫ —Å–ø—Ä–∞–≤–∏', '—è–∫ –¥–µ–ª–∞', '—â–æ –Ω–æ–≤–æ–≥–æ', '—Å—Ç–∞—Ç—É—Å']):
            return "–í—Å–µ —á—É–¥–æ–≤–æ! Atlas Core –ø—Ä–∞—Ü—é—î –≤ –ø–æ–≤–Ω–æ–º—É —Å–∫–ª–∞–¥—ñ: —è (Atlas), Goose (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å) —Ç–∞ –ì—Ä—ñ—à–∞ (–±–µ–∑–ø–µ–∫–∞). –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏! üöÄ"
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        if any(word in message_lower for word in ['—â–æ –º–æ–∂–µ—à', '–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ', '—Ñ—É–Ω–∫—Ü—ñ—ó', '–¥–æ–ø–æ–º–æ–≥–∞']):
            return """üß† –Ø –º–æ–∂—É:
‚Ä¢ –°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∏ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ –Ω–∞–º—ñ—Ä
‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è Goose –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏ –ì—Ä—ñ—à–∞
‚Ä¢ –ö–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—è–º–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ! üí¨"""
        
        # –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        if any(word in message_lower for word in ['atlas', '—Å–∏—Å—Ç–µ–º–∞', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏', '–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞']):
            return """üèóÔ∏è Atlas Core —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç—Ä—å–æ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤:

üß† **Atlas (—è)** - –ì–æ–ª–æ–≤–Ω–∏–π –Ü–Ü –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É
üöÄ **Goose** - –í–∏–∫–æ–Ω–∞–≤—á–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –¥–ª—è –∑–∞–≤–¥–∞–Ω—å
üõ°Ô∏è **–ì—Ä—ñ—à–∞** - –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é

–†–∞–∑–æ–º –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ç—É–∂–Ω—É —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å! ‚ö°"""
        
        # –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        if any(word in message_lower for word in ['–∑—Ä–æ–±–∏', '–≤–∏–∫–æ–Ω–∞–π', '–∑–∞–ø—É—Å—Ç–∏', '–∑–Ω–∞–π–¥–∏', '—Å—Ç–≤–æ—Ä–∏']):
            return "–†–æ–∑—É–º—ñ—é, —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è! –ü–µ—Ä–µ–¥–∞—é Goose –¥–ª—è –æ–±—Ä–æ–±–∫–∏... üîÑ"
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return "–¶—ñ–∫–∞–≤–æ! –Ø–∫—â–æ —É –≤–∞—Å —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è - —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ Goose. –Ø–∫—â–æ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è - —è –∑–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π! üòä"

    def get_status(self) -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å Atlas LLM"""
        return {
            "name": "Atlas LLM1",
            "status": "active",
            "conversations_handled": len(self.conversation_history),
            "current_context": self.current_context.copy(),
            "gemini_api_available": bool(os.getenv('GEMINI_API_KEY')),
            "last_activity": datetime.now().isoformat()
        }
