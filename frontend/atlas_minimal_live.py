#!/usr/bin/env python3
"""
Atlas Minimal Frontend Server - With Live Logs
–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ö–∞–∫–µ—Ä—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Atlas –∑ –∂–∏–≤–∏–º–∏ –ª–æ–≥–∞–º–∏
"""

import json
import logging
import time
import subprocess
import threading
import queue
import re
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
import urllib.parse
import requests
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LiveLogStreamer:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –∂–∏–≤–∏—Ö –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""
    
    def __init__(self):
        self.log_queue = queue.Queue()
        self.is_running = False
        # –ß–∏—Ç–∞—î–º–æ URL –∑ env –∞–±–æ fallback –Ω–∞ localhost
        self.atlas_core_url = os.getenv("ATLAS_CORE_URL", "http://localhost:3000")  # Goose —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
        
        # –°—Ç–∞–Ω –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
        self.system_status = {
            "processes": {},
            "services": {},
            "network": {},
            "resources": {},
            "timestamp": None
        }
        
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –ª–æ–≥—ñ–≤"""
        self.is_running = True
        threading.Thread(target=self._system_monitor, daemon=True).start()
        threading.Thread(target=self._atlas_monitor, daemon=True).start()
        print("üü¢ Live log streaming started")
        
    def stop_streaming(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"""
        self.is_running = False
        print("üî¥ Live log streaming stopped")
        
    def get_logs(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª–æ–≥—ñ–≤"""
        logs = []
        while not self.log_queue.empty():
            try:
                logs.append(self.log_queue.get_nowait())
            except queue.Empty:
                break
        return logs
    
    def get_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        return self.system_status.copy()
        
    def update_system_status(self, category, key, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        self.system_status[category][key] = value
        self.system_status["timestamp"] = datetime.now().isoformat()
        
    def _add_log(self, message, level="info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É –¥–æ —á–µ—Ä–≥–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        if self.log_queue.qsize() < 200:  # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —á–µ—Ä–≥–∏
            self.log_queue.put({
                "message": log_entry,
                "level": level,
                "timestamp": timestamp
            })
            
    def _system_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        while self.is_running:
            try:
                # –ü—Ä–æ—Ü–µ—Å–∏ Atlas
                result = subprocess.run(
                    ["ps", "aux"], 
                    capture_output=True, 
                    text=True
                )
                
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    
                    # –ü–æ—à—É–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤ Atlas
                    atlas_processes = []
                    goose_processes = []
                    mcp_processes = []
                    python_processes = []
                    
                    for line in lines:
                        if line.strip() and 'grep' not in line:
                            if 'atlas' in line.lower():
                                atlas_processes.append(self._parse_process_line(line))
                            elif 'goose' in line.lower():
                                goose_processes.append(self._parse_process_line(line))
                            elif 'mcp' in line.lower():
                                mcp_processes.append(self._parse_process_line(line))
                            elif 'python' in line and ('atlas' in line or 'mcp' in line):
                                python_processes.append(self._parse_process_line(line))
                    
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤
                    self.update_system_status("processes", "atlas", {
                        "count": len(atlas_processes),
                        "details": atlas_processes
                    })
                    self.update_system_status("processes", "goose", {
                        "count": len(goose_processes), 
                        "details": goose_processes
                    })
                    self.update_system_status("processes", "mcp", {
                        "count": len(mcp_processes),
                        "details": mcp_processes
                    })
                    self.update_system_status("processes", "python", {
                        "count": len(python_processes),
                        "details": python_processes
                    })
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                    total_processes = len(atlas_processes) + len(goose_processes) + len(mcp_processes)
                    if total_processes > 0:
                        self._add_log(f"[SYSTEM] {total_processes} Atlas-related processes active")
                
                # –ú–µ—Ä–µ–∂–µ–≤—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  
                try:
                    result = subprocess.run(
                        ["lsof", "-i", ":3000", "-i", ":8080"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        lines = result.stdout.split('\n')[1:]  # Skip header
                        active_connections = []
                        for line in lines:
                            if line.strip():
                                active_connections.append(self._parse_network_line(line))
                        
                        self.update_system_status("network", "connections", {
                            "count": len(active_connections),
                            "details": active_connections
                        })
                        
                        if active_connections:
                            self._add_log(f"[NET] {len(active_connections)} active connections on Atlas ports")
                except Exception as e:
                    self._add_log(f"[NET] Network check failed: {str(e)[:30]}...", "warning")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
                try:
                    # CPU —Ç–∞ Memory
                    result = subprocess.run(
                        ["top", "-l", "1", "-n", "0"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        cpu_info = self._parse_cpu_info(result.stdout)
                        self.update_system_status("resources", "cpu", cpu_info)
                        
                        # Disk space
                        result = subprocess.run(
                            ["df", "-h", "/"], 
                            capture_output=True, 
                            text=True
                        )
                        if result.returncode == 0:
                            disk_info = self._parse_disk_info(result.stdout)
                            self.update_system_status("resources", "disk", disk_info)
                            
                except Exception as e:
                    self._add_log(f"[RESOURCES] Resource check failed: {str(e)[:30]}...", "warning")
                    
                time.sleep(3)
                
            except Exception as e:
                self._add_log(f"[ERROR] System monitor: {str(e)[:30]}...", "error")
                time.sleep(5)
            
    def _atlas_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Atlas Core"""
        while self.is_running:
            try:
                response = requests.get(f"{self.atlas_core_url}/", timeout=3)
                if response.status_code == 200:
                    self._add_log("[ATLAS] Core online")
                    self.update_system_status("services", "atlas_core", {
                        "status": "online",
                        "status_code": 200,
                        "last_check": datetime.now().isoformat()
                    })
                else:
                    self._add_log(f"[ATLAS] Core status: {response.status_code}", "warning")
                    self.update_system_status("services", "atlas_core", {
                        "status": "warning", 
                        "status_code": response.status_code,
                        "last_check": datetime.now().isoformat()
                    })
                    
            except requests.exceptions.ConnectionError:
                self._add_log("[ATLAS] Core offline", "warning")
                self.update_system_status("services", "atlas_core", {
                    "status": "offline",
                    "error": "Connection refused",
                    "last_check": datetime.now().isoformat()
                })
            except Exception as e:
                self._add_log(f"[ATLAS] Error: {str(e)[:40]}...", "error")
                self.update_system_status("services", "atlas_core", {
                    "status": "error",
                    "error": str(e)[:100],
                    "last_check": datetime.now().isoformat()
                })
                
            time.sleep(6)
    
    def _parse_process_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑ ps aux"""
        try:
            parts = line.split()
            if len(parts) >= 11:
                return {
                    "user": parts[0],
                    "pid": parts[1],
                    "cpu": parts[2],
                    "mem": parts[3],
                    "command": " ".join(parts[10:])[:50] + "..." if len(" ".join(parts[10:])) > 50 else " ".join(parts[10:])
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_network_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ lsof"""
        try:
            parts = line.split()
            if len(parts) >= 9:
                return {
                    "command": parts[0],
                    "pid": parts[1],
                    "user": parts[2],
                    "type": parts[4],
                    "node": parts[7],
                    "name": parts[8] if len(parts) > 8 else ""
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_cpu_info(self, top_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ CPU –∑ top"""
        try:
            lines = top_output.split('\n')
            for line in lines:
                if 'CPU usage' in line:
                    # –ü—Ä–∏–∫–ª–∞–¥: CPU usage: 12.34% user, 5.67% sys, 82.01% idle
                    parts = line.split(':')[1] if ':' in line else line
                    return {"usage_line": parts.strip()[:100]}
            return {"usage_line": "CPU info not found"}
        except:
            return {"usage_line": "CPU parsing failed"}
    
    def _parse_disk_info(self, df_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∏—Å–∫ –∑ df"""
        try:
            lines = df_output.split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    return {
                        "filesystem": parts[0],
                        "size": parts[1],
                        "used": parts[2],
                        "available": parts[3],
                        "usage_percent": parts[4]
                    }
            return {"info": "Disk parsing failed"}
        except:
            return {"info": "Disk info unavailable"}

class AtlasMinimalHandler(SimpleHTTPRequestHandler):
    live_streamer = None
    
    def __init__(self, *args, **kwargs):
        self.atlas_core_url = "http://localhost:3000"
        super().__init__(*args, **kwargs)

    @classmethod
    def set_live_streamer(cls, streamer):
        cls.live_streamer = streamer

    def end_headers(self):
        """–î–æ–¥–∞—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        try:
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header('Access-Control-Allow-Headers', 'Content-Type')
            super().end_headers()
        except (BrokenPipeError, ConnectionResetError):
            # –ö–ª—ñ—î–Ω—Ç –∑–∞–∫—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass

    def safe_write(self, data):
        """–ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø–∏—Å –¥–∞–Ω–∏—Ö –∑ –æ–±—Ä–æ–±–∫–æ—é —Ä–æ–∑—Ä–∏–≤—ñ–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        try:
            if isinstance(data, str):
                self.wfile.write(data.encode('utf-8'))
            else:
                self.wfile.write(data)
        except (BrokenPipeError, ConnectionResetError):
            # –ö–ª—ñ—î–Ω—Ç –∑–∞–∫—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass

    def do_OPTIONS(self):
        """–û–±—Ä–æ–±–∫–∞ preflight CORS –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def _clean_ansi_codes(self, text):
        """–í–∏–¥–∞–ª—è—î ANSI escape –∫–æ–¥–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
        ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
        return ansi_escape.sub('', text)
    
    def _parse_log_line(self, line):
        """–ü–∞—Ä—Å–∏—Ç—å –ª–æ–≥ –ª—ñ–Ω—ñ—é, –≤–∏—Ç—è–≥—É—é—á–∏ —Ç—ñ–ª—å–∫–∏ —Ä—ñ–≤–µ–Ω—å —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –í–∏–¥–∞–ª—è—î–º–æ ANSI –∫–æ–¥–∏
        clean_line = self._clean_ansi_codes(line)
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ª–æ–≥—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
        # [2025-08-27T21:39:23.655482] [DEBUG] goose: 2025-08-27T18:32:28.162604Z  INFO goose::scheduler_factory: Creating legacy scheduler
        # –†–µ–∑—É–ª—å—Ç–∞—Ç: INFO goose::scheduler_factory: Creating legacy scheduler
        
        # –ü–µ—Ä—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å–∫–ª–∞–¥–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –ø–æ–¥–≤—ñ–π–Ω–æ—é –¥–∞—Ç–æ—é —ñ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º "goose:"
        pattern1 = r'\[[\d\-T:.]+\]\s+\[(\w+)\]\s+\w+:\s*[\d\-T:.Z]+\s+(\w+)\s+(.+)'
        match = re.search(pattern1, clean_line)
        if match:
            level = match.group(2)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥—Ä—É–≥–∏–π —Ä—ñ–≤–µ–Ω—å (INFO, DEBUG, —Ç–æ—â–æ)
            message = match.group(3)
            return f"{level} {message}"
        
        # –î—Ä—É–≥–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Ñ–æ—Ä–º–∞—Ç [DEBUG] goose: INFO message
        pattern2 = r'\[[\d\-T:.]+\]\s+\[(\w+)\]\s+\w+:\s+(\w+)\s+(.+)'
        match = re.search(pattern2, clean_line)
        if match:
            level = match.group(2)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥—Ä—É–≥–∏–π —Ä—ñ–≤–µ–Ω—å
            message = match.group(3)
            return f"{level} {message}"
        
        # –¢—Ä–µ—Ç—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - –∑–≤–∏—á–∞–π–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –æ–¥–Ω—ñ—î—é –¥–∞—Ç–æ—é
        pattern3 = r'\[[\d\-T:.]+\]\s+\[(\w+)\]\s+(.+)'
        match = re.search(pattern3, clean_line)
        if match:
            level = match.group(1)
            message = match.group(2)
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ message
            if message.startswith('goose: '):
                # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å "goose: "
                message = message[7:]
                
                # –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ —Ç–∏–ø—É "at crates/..."
                if message.startswith('at crates/'):
                    return None  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–∞–∫—ñ —Ä—è–¥–∫–∏
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —î —Ü–µ –ª–æ–≥ –∑ —Ä—ñ–≤–Ω–µ–º –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
                inner_level_match = re.match(r'(\w+)\s+(.+)', message)
                if inner_level_match and inner_level_match.group(1) in ['INFO', 'DEBUG', 'WARN', 'ERROR', 'TRACE']:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
                    level = inner_level_match.group(1)
                    message = inner_level_match.group(2)
            else:
                # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–µ–∑ goose: –∑–∞–ª–∏—à–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —è–∫ —î
                # –ê–ª–µ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ —Ç–∏–ø—É "atlas_frontend:"
                if ': ' in message:
                    parts = message.split(': ', 1)
                    if len(parts) == 2:
                        message = parts[1]
                    
            return f"{level} {message}"
        
        # –ß–µ—Ç–≤–µ—Ä—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Ç—ñ–ª—å–∫–∏ timestamp —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        pattern4 = r'[\d\-T:.Z]+\s+(\w+)\s+(.+)'
        match = re.search(pattern4, clean_line)
        if match:
            level = match.group(1)
            message = match.group(2)
            return f"{level} {message}"
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—á–∏—â–µ–Ω—É –ª—ñ–Ω—ñ—é
        return clean_line

    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/" or self.path == "/index.html":
            self.serve_frontend()
        elif self.path == "/DamagedHelmet.glb":
            self.serve_3d_model()
        elif self.path == "/api/health":
            self.serve_health()
        elif self.path == "/api/logs":
            self.serve_live_logs()
        elif self.path == "/logs/stream":
            self.serve_log_stream()
        elif self.path == "/api/status":
            self.serve_system_status()
        else:
            super().do_GET()

    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/api/chat":
            self.handle_chat()
        elif self.path == "/api/mode":
            # –ó–º—ñ–Ω–∞ —Ä–µ–∂–∏–º—É –æ–±—Ä–æ–±–∫–∏ —á–∞—Ç—É –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ (POST {"mode": "cli"|"api"})
            try:
                content_length = int(self.headers.get('Content-Length', 0))
                body = self.rfile.read(content_length) if content_length else b"{}"
                data = json.loads(body.decode('utf-8') or '{}')
                mode = data.get("mode")
                if mode in ("cli", "api"):
                    os.environ['CHAT_HANDLER_METHOD'] = mode
                    if self.live_streamer:
                        self.live_streamer._add_log(f"[MODE] Chat handler switched to '{mode}'")
                    self.send_json_response({"mode": mode})
                else:
                    self.send_json_response({"error": "Invalid mode. Use 'cli' or 'api'"}, 400)
            except Exception as e:
                self.send_json_response({"error": str(e)}, 500)
        elif self.path == "/api/tts/speak":
            self.handle_tts()
        else:
            self.send_error(404, "Not Found")

    def serve_frontend(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
        try:
            html_path = Path(__file__).parent / "index.html"
            with open(html_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Content-Length', str(len(content.encode('utf-8'))))
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
        except Exception as e:
            logger.error(f"Error serving frontend: {e}")
            self.send_error(500, str(e))

    def serve_3d_model(self):
        """3D –º–æ–¥–µ–ª—å —à–æ–ª–æ–º–∞"""
        try:
            model_path = Path(__file__).parent / "DamagedHelmet.glb"
            if model_path.exists():
                with open(model_path, 'rb') as f:
                    content = f.read()
                
                self.send_response(200)
                self.send_header('Content-type', 'application/octet-stream')
                self.send_header('Content-Length', str(len(content)))
                self.end_headers()
                self.wfile.write(content)
            else:
                self.send_error(404, "3D model not found")
        except Exception as e:
            logger.error(f"Error serving 3D model: {e}")
            self.send_error(500, str(e))

    def serve_health(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            services = {
                "atlas_minimal": True,
                "atlas_core": "unknown",  # –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
                "live_logs": self.live_streamer is not None,
                "timestamp": datetime.now().isoformat()
            }
            
            response = json.dumps(services).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Health check error: {e}")
            self.send_error(500, str(e))

    def serve_live_logs(self):
        """Stream live logs via Server-Sent Events (SSE)."""
        try:
            # Set SSE headers
            self.send_response(200)
            self.send_header('Content-Type', 'text/event-stream')
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Connection', 'keep-alive')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # Initial connection event
            init_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO",
                "source": "atlas_frontend",
                "message": "Live log stream connected"
            }
            self.wfile.write(f"data: {json.dumps(init_data)}\n\n".encode())
            self.wfile.flush()
            
            # Stream logs from the live streamer
            while True:
                logs = self.live_streamer.get_logs() if self.live_streamer else []
                if not logs:
                    # Send keep-alive comment every 15 seconds
                    self.wfile.write(b": keep-alive \n\n")
                    self.wfile.flush()
                    time.sleep(5)
                    continue
                for log in logs:
                    event_data = {
                        "timestamp": log.get("timestamp"),
                        "level": log.get("level"),
                        "source": "atlas_frontend",
                        "message": log.get("message")
                    }
                    self.wfile.write(f"data: {json.dumps(event_data)}\n\n".encode())
                    self.wfile.flush()
        except Exception as e:
            logger.error(f"Live log stream error: {e}")
            # No send_error after send_response
            return
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∏–≤–∏—Ö –ª–æ–≥—ñ–≤"""
        try:
            if self.live_streamer is None:
                logs = [{
                    "message": f"[{datetime.now().strftime('%H:%M:%S')}] [SYSTEM] Log streamer not initialized", 
                    "level": "warning", 
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                }]
            else:
                logs = self.live_streamer.get_logs()
                if not logs:
                    logs = [{
                        "message": f"[{datetime.now().strftime('%H:%M:%S')}] [SYSTEM] No new logs", 
                        "level": "info", 
                        "timestamp": datetime.now().strftime("%H:%M:%S")
                    }]
            
            response = json.dumps({"logs": logs}).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Live logs error: {e}")
            self.send_error(500, str(e))

    def serve_log_stream(self):
        """Server-Sent Events —Å—Ç—Ä—ñ–º –ª–æ–≥—ñ–≤"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
            self.send_response(200)
            self.send_header('Content-Type', 'text/event-stream')
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Connection', 'keep-alive')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            status_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO", 
                "source": "atlas_frontend",
                "message": "Log stream connected successfully"
            }
            self.wfile.write(f"data: {json.dumps(status_data)}\n\n".encode())
            
            # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ –∑ /tmp/goose.log (—è–∫—â–æ —î)
            try:
                if Path("/tmp/goose.log").exists():
                    with open("/tmp/goose.log", 'r') as f:
                        lines = f.readlines()
                        for line in lines[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤
                            if line.strip():
                                # –ü–∞—Ä—Å–∏–º–æ –ª–æ–≥ –ª—ñ–Ω—ñ—é (–≤–∏–¥–∞–ª—è—î –¥–∞—Ç–∏ —Ç–∞ –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ —Ä—ñ–≤–µ–Ω—å + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                                parsed_line = self._parse_log_line(line.strip())
                                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ None –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä—è–¥–∫–∏ "at crates/...")
                                if parsed_line is not None:
                                    event_data = {
                                        "timestamp": datetime.now().isoformat(),
                                        "level": "DEBUG",  # –¢—å–º—è–Ω—ñ—à–∏–π —Ä—ñ–≤–µ–Ω—å
                                        "source": "goose",
                                        "message": parsed_line
                                    }
                                    self.wfile.write(f"data: {json.dumps(event_data)}\n\n".encode())
                                    self.wfile.flush()  # –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
            except Exception as e:
                logger.error(f"Error reading goose logs: {e}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—ñ–Ω—Ü–µ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            end_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO",
                "source": "atlas_frontend", 
                "message": "Initial log data sent"
            }
            self.wfile.write(f"data: {json.dumps(end_data)}\n\n".encode())
            self.wfile.flush()
            
        except Exception as e:
            logger.error(f"Log stream error: {e}")
            # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ send_error –ø—ñ—Å–ª—è send_response
            return

    def serve_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        try:
            if self.live_streamer is None:
                status = {
                    "error": "System monitor not initialized",
                    "timestamp": datetime.now().isoformat()
                }
            else:
                status = self.live_streamer.get_system_status()
                if not status.get("timestamp"):
                    status["timestamp"] = datetime.now().isoformat()
            
            response = json.dumps(status, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except (BrokenPipeError, ConnectionResetError):
            # –ö–ª—ñ—î–Ω—Ç –∑–∞–∫—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
            pass
        except Exception as e:
            logger.error(f"System status error: {e}")
            try:
                self.send_error(500, str(e))
            except (BrokenPipeError, ConnectionResetError):
                # –ö–ª—ñ—î–Ω—Ç –∑–∞–∫—Ä–∏–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–º–∏–ª–∫–∏
                pass

    def handle_chat(self):
        """–î–∏—Å–ø–µ—Ç—á–µ—Ä —á–∞—Ç-–∑–∞–ø–∏—Ç—ñ–≤ (cli | api)"""
        mode = os.getenv('CHAT_HANDLER_METHOD', os.environ.get('CHAT_HANDLER_METHOD', 'cli')).lower()
        if mode not in ("cli", "api"):
            mode = "cli"
        if self.live_streamer:
            self.live_streamer._add_log(f"[MODE] Handling chat via '{mode}' handler")
        if mode == "api":
            self.handle_chat_api()
        else:
            self.handle_chat_cli()

    def _read_chat_payload(self):
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length)
        data = json.loads(post_data.decode('utf-8')) if post_data else {}
        prompt = data.get("prompt", "")
        return prompt, data

    def handle_chat_cli(self):
        """–û–±—Ä–æ–±–∫–∞ —á–∞—Ç –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ Goose CLI (fallback / default)"""
        try:
            prompt, _raw = self._read_chat_payload()
            if not prompt:
                self.send_json_response({"error": "Prompt is required"}, 400)
                return
            if self.live_streamer:
                self.live_streamer._add_log(f"[CHAT][CLI] User: {prompt[:80]}...")
            goose_wrapper_path = "/Users/dev/Documents/GitHub/ATLAS/frontend/run_goose_cli.sh"
            command = [goose_wrapper_path, "run", "--json", prompt]
            if self.live_streamer:
                self.live_streamer._add_log(f"[CLI] Exec: {' '.join(command)}")
            try:
                result = subprocess.run(
                    command,
                    capture_output=True,
                    text=True,
                    timeout=90,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose"
                )
            except subprocess.TimeoutExpired:
                self.send_json_response({"answer": "‚ö†Ô∏è CLI timeout (90s)"})
                return
            if result.returncode == 0:
                stdout = result.stdout.strip()
                # –ü—Ä–æ–±–∞ JSON
                answer = None
                if stdout:
                    try:
                        parsed = json.loads(stdout)
                        answer = parsed.get("response") or parsed.get("answer") or stdout
                    except json.JSONDecodeError:
                        answer = stdout
                else:
                    answer = "‚úÖ CLI –≤–∏–∫–æ–Ω–∞–Ω–æ –±–µ–∑ –≤–∏–≤–æ–¥—É"
                if self.live_streamer:
                    self.live_streamer._add_log(f"[CHAT][CLI] Goose: {str(answer)[:80]}...")
                self.send_json_response({"answer": answer})
            else:
                err = (result.stderr or "Unknown CLI error").strip()
                if self.live_streamer:
                    self.live_streamer._add_log(f"[CHAT][CLI] Error: {err[:120]}...", "error")
                self.send_json_response({"answer": f"‚ö†Ô∏è CLI error: {err}"}, 500)
        except Exception as e:
            logger.error(f"CLI chat handler error: {e}")
            self.send_json_response({"error": str(e)}, 500)

    def handle_chat_api(self):
        """–û–±—Ä–æ–±–∫–∞ —á–∞—Ç –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞–ø—Ä—è–º—É —á–µ—Ä–µ–∑ /reply (SSE) Goose Server"""
        try:
            prompt, _raw = self._read_chat_payload()
            if not prompt:
                self.send_json_response({"error": "Prompt is required"}, 400)
                return
            if self.live_streamer:
                self.live_streamer._add_log(f"[CHAT][API] User: {prompt[:80]}...")
            secret = os.getenv('GOOSED_API_KEY', 'test')
            goose_url = os.getenv('GOOSED_URL', 'http://localhost:3000')
            session_id = f"frontend_{int(time.time())}"
            payload = {
                "messages": [{
                    "role": "user",
                    "created": int(time.time()),
                    "content": [{"type": "text", "text": prompt}]
                }],
                "session_id": session_id,
                "session_working_dir": "/tmp"
            }
            headers = {
                "X-Secret-Key": secret,
                "Accept": "text/event-stream",
                "Content-Type": "application/json"
            }
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requests –∑ stream=True
            try:
                response = requests.post(f"{goose_url}/reply", headers=headers, json=payload, stream=True, timeout=120)
            except requests.exceptions.RequestException as e:
                self.send_json_response({"answer": f"‚ö†Ô∏è API request failed: {e}"}, 502)
                return
            if response.status_code == 401:
                self.send_json_response({"answer": "‚ùå Unauthorized (check GOOSED_API_KEY)"}, 401)
                return
            if response.status_code >= 400:
                self.send_json_response({"answer": f"‚ö†Ô∏è API error {response.status_code}"}, response.status_code)
                return
            collected_text = []
            finish_received = False
            start_time = time.time()
            for raw_line in response.iter_lines(decode_unicode=True):
                if raw_line is None:
                    continue
                line = raw_line.strip()
                if not line:
                    # heartbeat
                    if time.time() - start_time > 110:
                        break
                    continue
                if line.startswith('data: '):
                    line = line[6:]
                try:
                    payload_line = json.loads(line)
                except json.JSONDecodeError:
                    continue
                if payload_line.get('type') == 'Finish':
                    finish_received = True
                    break
                msg = payload_line.get('message', {})
                for content in msg.get('content', []):
                    if content.get('type') == 'text':
                        txt = content.get('text', '')
                        if txt:
                            collected_text.append(txt)
                            if self.live_streamer:
                                self.live_streamer._add_log(f"[CHAT][API][chunk] {txt[:60]}...")
            answer = ''.join(collected_text).strip() or ("‚ö†Ô∏è No text received" if not finish_received else "")
            if self.live_streamer:
                self.live_streamer._add_log(f"[CHAT][API] Final: {answer[:100]}...")
            self.send_json_response({"answer": answer, "mode": "api"})
        except Exception as e:
            logger.error(f"API chat handler error: {e}")
            self.send_json_response({"error": str(e)}, 500)
    
    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        try:
            response = json.dumps(data, ensure_ascii=False).encode('utf-8')
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Error sending JSON response: {e}")

    def _format_status_for_ai(self, status):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ AI"""
        try:
            lines = []
            
            # –ü—Ä–æ—Ü–µ—Å–∏
            if status.get("processes"):
                total_proc = sum(p.get("count", 0) for p in status["processes"].values())
                lines.append(f"Processes: {total_proc} Atlas-related running")
                
                for proc_type, proc_info in status["processes"].items():
                    if proc_info.get("count", 0) > 0:
                        lines.append(f"  - {proc_type}: {proc_info['count']} active")
            
            # –°–µ—Ä–≤—ñ—Å–∏
            if status.get("services"):
                lines.append("Services:")
                for service, service_info in status["services"].items():
                    service_status = service_info.get("status", "unknown")
                    lines.append(f"  - {service}: {service_status}")
            
            # –ú–µ—Ä–µ–∂–∞
            if status.get("network", {}).get("connections"):
                conn_count = status["network"]["connections"].get("count", 0)
                lines.append(f"Network: {conn_count} active connections")
            
            # –†–µ—Å—É—Ä—Å–∏
            if status.get("resources"):
                if status["resources"].get("cpu"):
                    cpu_info = status["resources"]["cpu"].get("usage_line", "")
                    if cpu_info:
                        lines.append(f"CPU: {cpu_info}")
                        
                if status["resources"].get("disk"):
                    disk_info = status["resources"]["disk"]
                    if disk_info.get("usage_percent"):
                        lines.append(f"Disk: {disk_info['usage_percent']} used")
            
            return "\n".join(lines) if lines else "System status unavailable"
            
        except Exception as e:
            return f"Status formatting error: {str(e)}"

    def handle_tts(self):
        """–û–±—Ä–æ–±–∫–∞ TTS –∑–∞–ø–∏—Ç—ñ–≤"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            text = data.get("text", "")
            if not text:
                self.send_json_response({"error": "Text is required"}, 400)
                return
            
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Request: {text[:30]}...")
            
            success = self.send_tts_request(text)
            if success:
                self.send_json_response({"status": "success"})
            else:
                self.send_json_response({"error": "TTS service unavailable"}, 503)
                
        except Exception as e:
            logger.error(f"TTS error: {e}")
            self.send_json_response({"error": str(e)}, 500)

    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        response = json.dumps(data).encode('utf-8')
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.send_header('Content-Length', str(len(response)))
        self.end_headers()
        self.wfile.write(response)

    def send_to_atlas_core(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Atlas Core"""
        try:
            response = requests.post(
                f"{self.atlas_core_url}/chat",
                json={"message": message},
                timeout=30
            )
            if response.status_code == 200:
                data = response.json()
                return data.get("response", data.get("message"))
        except Exception as e:
            logger.debug(f"Atlas Core request failed: {e}")
        return None

    def send_tts_request(self, text):
        """TTS –∑–∞–ø–∏—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = requests.post(
                "http://localhost:3001/tts",
                json={"text": text, "language": "uk"},
                timeout=10
            )
            return response.status_code == 200
        except Exception as e:
            logger.debug(f"TTS request failed: {e}")
        return False

    def send_tts_to_atlas(self, text):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ TTS –∑–∞–ø–∏—Ç—É –¥–æ Atlas Core"""
        try:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Speaking: {text[:20]}...")
            
            # Atlas Core –º–∞—î /tts endpoint
            response = requests.post(
                f"{self.atlas_core_url}/tts",
                json={"text": text, "rate": 200},
                timeout=10
            )
            
            if response.status_code == 200:
                if self.live_streamer:
                    self.live_streamer._add_log("[TTS] Success", "info")
                return True
            else:
                if self.live_streamer:
                    self.live_streamer._add_log(f"[TTS] Error {response.status_code}", "warning")
                return False
                
        except Exception as e:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Failed: {str(e)[:30]}", "error")
            logger.debug(f"TTS to Atlas failed: {e}")
        return False

    def check_service(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            if url.endswith(':3000'):
                # Goose —Å–µ—Ä–≤–µ—Ä –º–∞—î /status –µ–Ω–¥–ø–æ—ñ–Ω—Ç
                response = requests.get(f"{url}/status", timeout=2)
            elif url.endswith(':8000'):
                # Atlas Core –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–º—ñ—Å—Ç—å /health
                response = requests.get(url, timeout=2)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /health
                response = requests.get(f"{url}/health", timeout=2)
            return response.status_code < 500
        except Exception as e:
            logger.debug(f"Service check failed for {url}: {e}")
            return False

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    # –ü–æ—Ä—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∫–µ—Ä—É—î—Ç—å—Å—è ATLAS_WEB_PORT (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 8080)
    try:
        port = int(os.getenv('ATLAS_WEB_PORT', '8080'))
    except ValueError:
        port = 8080
    server_address = ('', port)
    
    # –ó–º—ñ–Ω–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.chdir(Path(__file__).parent)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è live streamer
    live_streamer = LiveLogStreamer()
    AtlasMinimalHandler.set_live_streamer(live_streamer)
    live_streamer.start_streaming()
    
    httpd = HTTPServer(server_address, AtlasMinimalHandler)
    
    print("üöÄ Starting Atlas Minimal Frontend Server...")
    backend_url = os.getenv('GOOSED_URL', 'http://localhost:3000')
    print(f"üì± Interface (frontend): http://localhost:{port}")
    print(f"üß† Backend (goosed): {backend_url}")
    print("üíæ 3D Viewer: Background layer")
    print("üìã MCP Logs: Left panel (LIVE GREEN)")
    print("üí¨ Chat: Right panel")
    print("üé§ Voice: Single/Double click modes")
    print(f"üéØ Server running on port {port}")
    print("üü¢ Live logs streaming enabled")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopping...")
        if live_streamer:
            live_streamer.stop_streaming()
        print("üõë Server stopped")
        httpd.shutdown()

if __name__ == "__main__":
    main()
