#!/usr/bin/env python3
"""
Atlas Minimal Frontend Server - Simplified Version
–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ö–∞–∫–µ—Ä—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Atlas
–û–ù–û–í–õ–ï–ù–û: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Atlas Core (Atlas LLM1 + Goose + –ì—Ä—ñ—à–∞ LLM3)
"""

import json
import logging
import time
import subprocess
import re
import asyncio
import aiohttp
import os
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler, ThreadingHTTPServer
import urllib.parse
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
def load_env():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É"""
    env_path = Path(__file__).parent / ".env"
    if env_path.exists():
        print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é .env –∑ {env_path}")
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_env()

# –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∫–ª—é—á—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–∞ –∞–±–æ –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ config

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Atlas Core
try:
    from atlas_core import get_atlas_core
    ATLAS_CORE_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("üöÄ Atlas Core —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π!")
except ImportError as e:
    ATLAS_CORE_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è Atlas Core –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É legacy Goose —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

import json
import logging
import time
import subprocess
import threading
import queue
import re
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler, ThreadingHTTPServer
import urllib.parse
import requests
import os
from services.goose_client import GooseClient
from services import config as cfg
from services.log_streamer import LiveLogStreamer
from services.utils.session import determine_session_type as util_determine_session_type, get_session_name as util_get_session_name
from services.handlers import assets as h_assets
from services.handlers import logs as h_logs
from services.handlers import status as h_status
from services.handlers import chat as h_chat
from services.handlers import tts as h_tts
from services.handlers import atlas as h_atlas

# –Ü–º–ø–æ—Ä—Ç TutorialChat —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
try:
    from integration.chat_integration import chat_integration, setup_tutorialchat_integration
    TUTORIALCHAT_INTEGRATION_AVAILABLE = True
    logger.info("üöÄ TutorialChat —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!")
except ImportError as e:
    TUTORIALCHAT_INTEGRATION_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è TutorialChat —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ LiveLogStreamer –∑ services.log_streamer –±–µ–∑ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è

class AtlasMinimalHandler(SimpleHTTPRequestHandler):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è Atlas Minimal Interface"""

    def __init__(self, *args, **kwargs):
        # –ù–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Goose —á–µ—Ä–µ–∑ –∫–ª—ñ—î–Ω—Ç —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —à–∞—Ä—É
        # –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL —Ç–∞ —Å–µ–∫—Ä–µ—Ç —á–µ—Ä–µ–∑ services.config
        self.goose_client = GooseClient(base_url=cfg.goose_base_url(), secret_key=cfg.goose_secret_key("test"))
        self.goose_api_url = self.goose_client.base_url
        # Atlas Core URL –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É
        self.atlas_core_url = cfg.atlas_core_url()
        # –ü—Ä–æ–∫—Å—ñ –ø—Ä–∞–ø–æ—Ä –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Atlas Core –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        try:
            self.ATLAS_CORE_AVAILABLE = ATLAS_CORE_AVAILABLE
        except NameError:
            self.ATLAS_CORE_AVAILABLE = False
        # –õ–æ–≥-—Å—Ç—Ä—ñ–º–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—ñ–∑–Ω—ñ—à–µ; –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        self.live_streamer = None
        super().__init__(*args, **kwargs)

    def end_headers(self):
        """–î–æ–¥–∞—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        """–û–±—Ä–æ–±–∫–∞ preflight CORS –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/" or self.path == "/index.html":
            h_assets.serve_frontend(self)
        elif self.path == "/DamagedHelmet.glb":
            h_assets.serve_3d_model(self)
        elif self.path == "/favicon.ico":
            h_assets.serve_favicon(self)
        elif self.path == "/tutorialchat" or self.path == "/tutorialchat/":
            # –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è TutorialChat —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            if TUTORIALCHAT_INTEGRATION_AVAILABLE:
                h_assets.serve_file(self, Path(__file__).parent / "integration" / "tutorialchat.html")
            else:
                self.send_error(503, "TutorialChat integration not available")
        elif self.path.startswith("/tutorialchat/") and TUTORIALCHAT_INTEGRATION_AVAILABLE:
            # –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ TutorialChat
            chat_integration.serve_tutorial_chat_static(self, self.path)
        elif self.path == "/api/tutorialchat/config" and TUTORIALCHAT_INTEGRATION_AVAILABLE:
            # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è TutorialChat
            config = chat_integration.get_tutorial_chat_config()
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(config, ensure_ascii=False).encode('utf-8'))
        elif self.path.startswith("/logs"):
            if self.path == "/logs/stream":
                h_logs.serve_logs_stream(self)
            else:
                h_logs.serve_live_logs(self)
        elif self.path == "/api/status":
            h_status.serve_system_status(self)
        elif self.path == "/api/atlas/status":
            h_status.serve_atlas_core_status(self)
        elif self.path == "/api/atlas/sessions":
            h_status.serve_atlas_sessions(self)
        elif self.path == "/api/goose/sessions":
            h_status.serve_goose_sessions(self)
        elif self.path == "/api/atlas/corrections":
            h_status.serve_correction_statistics(self)
        elif self.path.startswith("/api/atlas/corrections/"):
            session_name = self.path.replace("/api/atlas/corrections/", "")
            h_status.serve_session_corrections(self, session_name)
        elif self.path == "/api/atlas/diagnostics":
            h_status.serve_api_diagnostics(self)
        elif self.path == "/api/atlas/health":
            h_status.serve_health_check(self)
        elif self.path == "/api/atlas/test-mode-analysis":
            h_status.serve_test_mode_analysis(self)
        else:
            super().do_GET()

    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/api/chat":
            self.handle_chat()
        elif self.path == "/api/chat/stream":
            self.handle_chat_stream()
        elif self.path == "/api/tts/speak":
            h_tts.handle_tts(self)
        elif self.path == "/api/atlas/analyze-prompt":
            h_atlas.handle_analyze_prompt(self)
        elif TUTORIALCHAT_INTEGRATION_AVAILABLE and (
            self.path.startswith("/api/chat/reply") or 
            self.path.startswith("/api/session") or 
            self.path.startswith("/api/message")
        ):
            # TutorialChat API –º–∞—Ä—à—Ä—É—Ç–∏
            chat_integration.handle_tutorial_chat_api(self, self.path)
        else:
            self.send_error(404, "Not Found")

    def handle_chat(self):
        """–ü—Ä–æ—Å—Ç–∏–π non-stream —á–∞—Ç —á–µ—Ä–µ–∑ Goose HTTP API"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8')) if post_data else {}

            user_message = data.get("message") or data.get("prompt")
            if not user_message:
                return self.send_json_response({"error": "Message is required"}, 400)

            session_type = util_determine_session_type(user_message, data.get("session_type"))
            session_name = data.get("session_name") or util_get_session_name(user_message, session_type)

            try:
                reply_result = self.goose_client.send_reply(session_name, user_message)
                if reply_result.get("success"):
                    answer = reply_result.get("response", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞")
                    self.send_json_response({
                        "response": answer,
                        "session_name": session_name,
                        "session_type": session_type,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    })
                else:
                    error_msg = reply_result.get("error", "Goose API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                    self.send_json_response({"error": error_msg, "atlas_core": False}, 500)
            except Exception as api_error:
                # Fallback –¥–æ CLI
                self._handle_chat_cli_fallback(user_message, data, session_type, session_name)
        except Exception as e:
            logger.error(f"Fatal error in handle_chat: {e}")
            self.send_json_response({"error": str(e)}, 500)

    def handle_chat_stream(self):
        """Delegated streaming chat endpoint."""
        return h_chat.handle_chat_stream(self)

    def handle_chat_legacy(self, user_message: str, data: dict, user_context: dict, atlas_error: str = None):
        """Legacy –æ–±—Ä–æ–±–∫–∞ —á–∞—Ç—É —á–µ—Ä–µ–∑ HTTP API Goose –∑–∞–º—ñ—Å—Ç—å CLI"""
        try:
            logger.info(f"üîÑ Legacy: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose HTTP API: {user_message[:100]}...")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–µ—Å—ñ—ó (legacy –ª–æ–≥—ñ–∫–∞)
            session_type = util_determine_session_type(user_message, data.get("session_type"))
            session_name = util_get_session_name(user_message, session_type)
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è HTTP API –∑–∞–º—ñ—Å—Ç—å CLI
            try:
                # –ù–∞ goosed –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /reply –∑ session_id
                reply_result = self.goose_client.send_reply(session_name, user_message)
                
                # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if reply_result["success"]:
                    answer = reply_result.get("response", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞")
                    
                    result_data = {
                        "response": answer,
                        "session_name": session_name,
                        "session_type": session_type,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }
                    
                    # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                    if atlas_error:
                        result_data["atlas_fallback"] = True
                        result_data["atlas_error"] = atlas_error
                    
                    logger.info(f"‚úÖ Legacy API: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                    self.send_json_response(result_data)
                    
                else:
                    error_msg = reply_result.get("error", "Goose API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                    logger.error(f"‚ùå Legacy API: {error_msg}")
                    self.send_json_response({
                        "response": f"–ü–æ–º–∏–ª–∫–∞ Goose API: {error_msg}",
                        "error": error_msg,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }, 500)
                    
            except Exception as api_error:
                logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, fallback –¥–æ CLI: {api_error}")
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ CLI –º–µ—Ç–æ–¥—É
                self._handle_chat_cli_fallback(user_message, data, session_type, session_name, atlas_error)
                
        except Exception as e:
            logger.error(f"üí• Legacy Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ legacy —Ä–µ–∂–∏–º—É: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True
            }, 500)

    def _handle_chat_cli_fallback(self, user_message: str, data: dict, session_type: str, session_name: str, atlas_error: str = None):
        """Fallback –¥–æ CLI –º–µ—Ç–æ–¥—É, —è–∫—â–æ HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        try:
            logger.info(f"üîÑ CLI Fallback: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose CLI: {user_message[:100]}...")
            
            # –í–∏–∫–ª–∏–∫ Goose CLI –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é
            goose_path = "/Users/dev/Documents/GitHub/ATLAS/goose/target/release/goose"
            
            if session_type == "new_session":
                # –ù–æ–≤–∞ —ñ–º–µ–Ω–æ–≤–∞–Ω–∞ —Å–µ—Å—ñ—è
                cmd = [goose_path, "session", "--name", session_name]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
                
            elif session_type == "continue_session":
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
                cmd = [goose_path, "session", "--name", session_name, "--resume"]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
            else:
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É
                cmd = [goose_path, "run", "-t", user_message, "--quiet"]
                result = subprocess.run(
                    cmd,
                    capture_output=True, 
                    text=True, 
                    timeout=300,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout = result.stdout
                stderr = result.stderr
            
            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if stdout:
                answer = self._clean_goose_output(stdout)
                
                response_data = {
                    "response": answer,
                    "session_name": session_name,
                    "session_type": session_type,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }
                
                # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if atlas_error:
                    response_data["atlas_fallback"] = True
                    response_data["atlas_error"] = atlas_error
                
                logger.info(f"‚úÖ CLI Fallback: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                self.send_json_response(response_data)
            else:
                error_msg = stderr or "Goose –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                logger.error(f"‚ùå CLI Fallback: {error_msg}")
                self.send_json_response({
                    "response": f"–ü–æ–º–∏–ª–∫–∞ Goose CLI: {error_msg}",
                    "error": error_msg,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }, 500)
                
        except subprocess.TimeoutExpired:
            logger.error("‚è±Ô∏è CLI Fallback: Timeout –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
            self.send_json_response({
                "response": "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ (>5—Ö–≤)",
                "error": "Timeout",
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 408)
            
        except Exception as e:
            logger.error(f"üí• CLI Fallback Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ CLI fallback: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 500)

    def _get_goose_env(self):
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = "/Users/dev/Documents/GitHub/ATLAS/goose/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def _clean_goose_output(self, output: str) -> str:
        """–û—á–∏—â–∞—î –≤–∏–≤—ñ–¥ Goose –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        lines = output.strip().split('\n')
        clean_lines = []
        for line in lines:
            if not any(skip in line for skip in [
                "starting session", "logging to", "working directory", 
                "Hermit environment", "activated", "Context:", "( O)>", "Press Enter"
            ]):
                clean_lines.append(line)
        
        clean_answer = '\n'.join(clean_lines).strip()
        return clean_answer if clean_answer else "Goose –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ"

    

    

    
    
    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        try:
            response = json.dumps(data, ensure_ascii=False).encode('utf-8')
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Error sending JSON response: {e}")

    def _format_status_for_ai(self, status):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ AI"""
        try:
            lines = []
            
            # –ü—Ä–æ—Ü–µ—Å–∏
            if status.get("processes"):
                total_proc = sum(p.get("count", 0) for p in status["processes"].values())
                lines.append(f"Processes: {total_proc} Atlas-related running")
                
                for proc_type, proc_info in status["processes"].items():
                    if proc_info.get("count", 0) > 0:
                        lines.append(f"  - {proc_type}: {proc_info['count']} active")
            
            # –°–µ—Ä–≤—ñ—Å–∏
            if status.get("services"):
                lines.append("Services:")
                for service, service_info in status["services"].items():
                    service_status = service_info.get("status", "unknown")
                    lines.append(f"  - {service}: {service_status}")
            
            # –ú–µ—Ä–µ–∂–∞
            if status.get("network", {}).get("connections"):
                conn_count = status["network"]["connections"].get("count", 0)
                lines.append(f"Network: {conn_count} active connections")
            
            # –†–µ—Å—É—Ä—Å–∏
            if status.get("resources"):
                if status["resources"].get("cpu"):
                    cpu_info = status["resources"]["cpu"].get("usage_line", "")
                    if cpu_info:
                        lines.append(f"CPU: {cpu_info}")
                        
                if status["resources"].get("disk"):
                    disk_info = status["resources"]["disk"]
                    if disk_info.get("usage_percent"):
                        lines.append(f"Disk: {disk_info['usage_percent']} used")
            
            return "\n".join(lines) if lines else "System status unavailable"
            
        except Exception as e:
            return f"Status formatting error: {str(e)}"

    

    

    def send_to_atlas_core(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Atlas Core"""
        try:
            response = requests.post(
                f"{self.atlas_core_url}/chat",
                json={"message": message},
                timeout=60  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 1 —Ö–≤–∏–ª–∏–Ω–∏
            )
            if response.status_code == 200:
                data = response.json()
                return data.get("response", data.get("message"))
        except Exception as e:
            logger.debug(f"Atlas Core request failed: {e}")
        return None

    # –°—Ç–∞—Ä—ñ TTS –º–µ—Ç–æ–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ; –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ services/handlers/tts.py

    def check_service(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            if url.endswith(':3000'):
                # Goose —Å–µ—Ä–≤–µ—Ä –º–∞—î /status –µ–Ω–¥–ø–æ—ñ–Ω—Ç
                response = requests.get(f"{url}/status", timeout=2)
            elif url.endswith(':8000'):
                # Atlas Core –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–º—ñ—Å—Ç—å /health
                response = requests.get(url, timeout=2)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /health
                response = requests.get(f"{url}/health", timeout=2)
            return response.status_code < 500
        except Exception as e:
            logger.debug(f"Service check failed for {url}: {e}")
            return False

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    # –î–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ ENV –∏ –∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞, –µ—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
    port = cfg.server_port(8080)
    server_address = ('', port)
    
    # –ó–º—ñ–Ω–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.chdir(Path(__file__).parent)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –¥–æ–ª–≥–∏–µ SSE-–∑–∞–ø—Ä–æ—Å—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    # –ü—Ä–æ–±—É–µ–º –∑–∞–Ω—è—Ç—å –ø–æ—Ä—Ç, –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π
    try:
        httpd = ThreadingHTTPServer(server_address, AtlasMinimalHandler)
    except OSError:
        # –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
        import socket
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(("", 0))
            free_port = s.getsockname()[1]
        port = free_port
        server_address = ('', port)
        httpd = ThreadingHTTPServer(server_address, AtlasMinimalHandler)
    
    print("üöÄ Starting Atlas Minimal Frontend Server...")
    print(f"üì± Interface: http://localhost:{port}")
    print("üíæ 3D Viewer: Background layer")
    print("üìã MCP Logs: Left panel")
    print("üí¨ Chat: Right panel")
    print(f"üéØ Server running on port {port}")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopping...")
        httpd.shutdown()
        print("üõë Server stopped")

if __name__ == "__main__":
    main()

