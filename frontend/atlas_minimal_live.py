#!/usr/bin/env python3
"""
Atlas Minimal Frontend Server - Simplified Version
–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ö–∞–∫–µ—Ä—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Atlas
–û–ù–û–í–õ–ï–ù–û: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Atlas Core (Atlas LLM1 + Goose + –ì—Ä—ñ—à–∞ LLM3)
"""

import json
import logging
import time
import subprocess
import re
import asyncio
import aiohttp
import os
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler, ThreadingHTTPServer
import urllib.parse
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
def load_env():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É"""
    env_path = Path(__file__).parent / ".env"
    if env_path.exists():
        print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é .env –∑ {env_path}")
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_env()

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á—ñ
print(f"üîë Gemini API: {'‚úÖ' if os.getenv('GEMINI_API_KEY') else '‚ùå'}")
print(f"üîë Mistral API: {'‚úÖ' if os.getenv('MISTRAL_API_KEY') else '‚ùå'}")

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Atlas Core
try:
    from atlas_core import get_atlas_core
    ATLAS_CORE_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("üöÄ Atlas Core —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π!")
except ImportError as e:
    ATLAS_CORE_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è Atlas Core –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É legacy Goose —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

import json
import logging
import time
import subprocess
import threading
import queue
import re
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler, ThreadingHTTPServer
import urllib.parse
import requests
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LiveLogStreamer:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –∂–∏–≤–∏—Ö –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""
    
    def __init__(self):
        self.log_queue = queue.Queue()
        self.is_running = False
        # –ß–∏—Ç–∞—î–º–æ URL –∑ env –∞–±–æ fallback –Ω–∞ localhost
        self.atlas_core_url = os.getenv("ATLAS_CORE_URL", "http://localhost:3000")  # Goose —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
        
        # –°—Ç–∞–Ω –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
        self.system_status = {
            "processes": {},
            "services": {},
            "network": {},
            "resources": {},
            "timestamp": None
        }
        
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –ª–æ–≥—ñ–≤"""
        self.is_running = True
        threading.Thread(target=self._system_monitor, daemon=True).start()
        threading.Thread(target=self._atlas_monitor, daemon=True).start()
        print("üü¢ Live log streaming started")
        
    def stop_streaming(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"""
        self.is_running = False
        print("üî¥ Live log streaming stopped")
        
    def get_logs(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª–æ–≥—ñ–≤"""
        logs = []
        while not self.log_queue.empty():
            try:
                logs.append(self.log_queue.get_nowait())
            except queue.Empty:
                break
        return logs
    
    def get_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        return self.system_status.copy()
        
    def update_system_status(self, category, key, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        self.system_status[category][key] = value
        self.system_status["timestamp"] = datetime.now().isoformat()
        
    def _add_log(self, message, level="info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É –¥–æ —á–µ—Ä–≥–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        if self.log_queue.qsize() < 200:  # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —á–µ—Ä–≥–∏
            self.log_queue.put({
                "message": log_entry,
                "level": level,
                "timestamp": timestamp
            })
            
    def _system_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        while self.is_running:
            try:
                # –ü—Ä–æ—Ü–µ—Å–∏ Atlas
                result = subprocess.run(
                    ["ps", "aux"], 
                    capture_output=True, 
                    text=True
                )
                
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    
                    # –ü–æ—à—É–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤ Atlas
                    atlas_processes = []
                    goose_processes = []
                    mcp_processes = []
                    python_processes = []
                    
                    for line in lines:
                        if line.strip() and 'grep' not in line:
                            if 'atlas' in line.lower():
                                atlas_processes.append(self._parse_process_line(line))
                            elif 'goose' in line.lower():
                                goose_processes.append(self._parse_process_line(line))
                            elif 'mcp' in line.lower():
                                mcp_processes.append(self._parse_process_line(line))
                            elif 'python' in line and ('atlas' in line or 'mcp' in line):
                                python_processes.append(self._parse_process_line(line))
                    
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤
                    self.update_system_status("processes", "atlas", {
                        "count": len(atlas_processes),
                        "details": atlas_processes
                    })
                    self.update_system_status("processes", "goose", {
                        "count": len(goose_processes), 
                        "details": goose_processes
                    })
                    self.update_system_status("processes", "mcp", {
                        "count": len(mcp_processes),
                        "details": mcp_processes
                    })
                    self.update_system_status("processes", "python", {
                        "count": len(python_processes),
                        "details": python_processes
                    })
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                    total_processes = len(atlas_processes) + len(goose_processes) + len(mcp_processes)
                    if total_processes > 0:
                        self._add_log(f"[SYSTEM] {total_processes} Atlas-related processes active")
                
                # –ú–µ—Ä–µ–∂–µ–≤—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  
                try:
                    result = subprocess.run(
                        ["lsof", "-i", ":3000", "-i", ":8080"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        lines = result.stdout.split('\n')[1:]  # Skip header
                        active_connections = []
                        for line in lines:
                            if line.strip():
                                active_connections.append(self._parse_network_line(line))
                        
                        self.update_system_status("network", "connections", {
                            "count": len(active_connections),
                            "details": active_connections
                        })
                        
                        if active_connections:
                            self._add_log(f"[NET] {len(active_connections)} active connections on Atlas ports")
                except Exception as e:
                    self._add_log(f"[NET] Network check failed: {str(e)[:30]}...", "warning")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
                try:
                    # CPU —Ç–∞ Memory
                    result = subprocess.run(
                        ["top", "-l", "1", "-n", "0"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        cpu_info = self._parse_cpu_info(result.stdout)
                        self.update_system_status("resources", "cpu", cpu_info)
                        
                        # Disk space
                        result = subprocess.run(
                            ["df", "-h", "/"], 
                            capture_output=True, 
                            text=True
                        )
                        if result.returncode == 0:
                            disk_info = self._parse_disk_info(result.stdout)
                            self.update_system_status("resources", "disk", disk_info)
                            
                except Exception as e:
                    self._add_log(f"[RESOURCES] Resource check failed: {str(e)[:30]}...", "warning")
                    
                time.sleep(3)
                
            except Exception as e:
                self._add_log(f"[ERROR] System monitor: {str(e)[:30]}...", "error")
                time.sleep(5)
            
    def _atlas_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Atlas Core"""
        while self.is_running:
            try:
                response = requests.get(f"{self.atlas_core_url}/", timeout=3)
                if response.status_code == 200:
                    self._add_log("[ATLAS] Core online")
                    self.update_system_status("services", "atlas_core", {
                        "status": "online",
                        "status_code": 200,
                        "last_check": datetime.now().isoformat()
                    })
                else:
                    self._add_log(f"[ATLAS] Core status: {response.status_code}", "warning")
                    self.update_system_status("services", "atlas_core", {
                        "status": "warning", 
                        "status_code": response.status_code,
                        "last_check": datetime.now().isoformat()
                    })
                    
            except requests.exceptions.ConnectionError:
                self._add_log("[ATLAS] Core offline", "warning")
                self.update_system_status("services", "atlas_core", {
                    "status": "offline",
                    "error": "Connection refused",
                    "last_check": datetime.now().isoformat()
                })
            except Exception as e:
                self._add_log(f"[ATLAS] Error: {str(e)[:40]}...", "error")
                self.update_system_status("services", "atlas_core", {
                    "status": "error",
                    "error": str(e)[:100],
                    "last_check": datetime.now().isoformat()
                })
                
            time.sleep(6)
    
    def _parse_process_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑ ps aux"""
        try:
            parts = line.split()
            if len(parts) >= 11:
                return {
                    "user": parts[0],
                    "pid": parts[1],
                    "cpu": parts[2],
                    "mem": parts[3],
                    "command": " ".join(parts[10:])[:50] + "..." if len(" ".join(parts[10:])) > 50 else " ".join(parts[10:])
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_network_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ lsof"""
        try:
            parts = line.split()
            if len(parts) >= 9:
                return {
                    "command": parts[0],
                    "pid": parts[1],
                    "user": parts[2],
                    "type": parts[4],
                    "node": parts[7],
                    "name": parts[8] if len(parts) > 8 else ""
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_cpu_info(self, top_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ CPU –∑ top"""
        try:
            lines = top_output.split('\n')
            for line in lines:
                if 'CPU usage' in line:
                    # –ü—Ä–∏–∫–ª–∞–¥: CPU usage: 12.34% user, 5.67% sys, 82.01% idle
                    parts = line.split(':')[1] if ':' in line else line
                    return {"usage_line": parts.strip()[:100]}
            return {"usage_line": "CPU info not found"}
        except:
            return {"usage_line": "CPU parsing failed"}
    
    def _parse_disk_info(self, df_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∏—Å–∫ –∑ df"""
        try:
            lines = df_output.split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    return {
                        "filesystem": parts[0],
                        "size": parts[1],
                        "used": parts[2],
                        "available": parts[3],
                        "usage_percent": parts[4]
                    }
            return {"info": "Disk parsing failed"}
        except:
            return {"info": "Disk info unavailable"}

class AtlasMinimalHandler(SimpleHTTPRequestHandler):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è Atlas Minimal Interface"""
    
    def __init__(self, *args, **kwargs):
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Goose API: –¥–µ—Ñ–æ–ª—Ç 3000, fallback 3001 —è–∫—â–æ 3000 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–∞–±–æ GOOSE_API_URL –∑ env)
        env_url = os.getenv("GOOSE_API_URL")
        if env_url and self._check_base_url(env_url):
            self.goose_api_url = env_url
        else:
            if env_url and not self._check_base_url(env_url):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π GOOSE_API_URL: {env_url}; –≤–∏–∫–æ–Ω—É—é –∞–≤—Ç–æ–ø—ñ–¥–±—ñ—Ä")
            self.goose_api_url = self._auto_pick_goose_url()
        self.goose_secret_key = os.getenv("GOOSE_SECRET_KEY", "test")  # –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        self.session_endpoint = f"{self.goose_api_url}/session"
        self.reply_endpoint = f"{self.goose_api_url}/reply"
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Atlas Core
        self.atlas_core_url = "http://localhost:3000"
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è live streamer –±–µ–∑ –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        self.live_streamer = None
        
        super().__init__(*args, **kwargs)

    def _auto_pick_goose_url(self) -> str:
        """–í–∏–±–∏—Ä–∞—î –±–∞–∑–æ–≤–∏–π URL Goose API: —Å–ø–æ—á–∞—Ç–∫—É 3000, –ø–æ—Ç—ñ–º 3001."""
        import requests as _req
        for base in ("http://127.0.0.1:3000", "http://127.0.0.1:3001"):
            try:
                for ep in ("/status", "/api/health", "/"):
                    try:
                        r = _req.get(f"{base}{ep}", timeout=2)
                        if r.status_code in (200, 404):
                            return base
                    except Exception:
                        continue
            except Exception:
                continue
        return "http://127.0.0.1:3000"

    def _check_base_url(self, base: str) -> bool:
        try:
            import requests as _req
            for ep in ("/status", "/api/health", "/"):
                try:
                    r = _req.get(f"{base}{ep}", timeout=2)
                    if r.status_code in (200, 404):
                        return True
                except Exception:
                    continue
        except Exception:
            return False
        return False
    
    def handle_one_request(self):
        """Override to handle connection resets gracefully"""
        try:
            super().handle_one_request()
        except ConnectionResetError:
            # Client disconnected, ignore silently
            pass
        except BrokenPipeError:
            # Client disconnected while writing response
            pass
        except OSError as e:
            if e.errno == 54:  # Connection reset by peer on macOS
                pass
            else:
                raise
    
    def log_error(self, format, *args):
        """Override to suppress connection reset error logs"""
        if "Connection reset by peer" in format % args:
            return
        if "Broken pipe" in format % args:
            return
        super().log_error(format, *args)
    
    def send_goose_request(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Goose API"""
        try:
            url = f"{self.goose_api_url}{endpoint}"
            headers = {"X-Secret-Key": self.goose_secret_key}
            
            if method == "POST":
                response = requests.post(url, json=data, headers=headers, timeout=30)
            elif method == "PUT":
                response = requests.put(url, json=data, headers=headers, timeout=30)
            else:
                response = requests.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}", "response": response.text}
                
        except requests.exceptions.RequestException as e:
            return {"success": False, "error": str(e)}
    
    async def send_goose_request_async(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Goose API"""
        try:
            url = f"{self.goose_api_url}{endpoint}"
            headers = {"X-Secret-Key": self.goose_secret_key}
            
            timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
                if method == "POST":
                    async with session.post(url, json=data) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                elif method == "PUT":
                    async with session.put(url, json=data) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                else:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                            
        except Exception as e:
            return {"success": False, "error": str(e)}

    def send_goose_reply_sse(self, session_name: str, message: str, timeout: int = 90) -> dict:
        """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Goose, –∞–≤—Ç–æ-–≤–∏–±—ñ—Ä: goose web (WS) –∞–±–æ goosed (/reply SSE).

        –ü–æ–≤–µ—Ä—Ç–∞—î dict: { success, response, error? }
        """
        try:
            import time as _time
            # –í–∏–∑–Ω–∞—á–∏–º–æ, —â–æ –ø—Ä–∞—Ü—é—î: goose web —á–∏ goosed
            def _is_web():
                try:
                    r = requests.get(f"{self.goose_api_url}/api/health", timeout=3)
                    return r.status_code == 200
                except Exception:
                    return False

            def _is_goosed():
                try:
                    r = requests.get(f"{self.goose_api_url}/status", timeout=3)
                    return r.status_code == 200
                except Exception:
                    return False

            if _is_web():
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WebSocket /ws —É goose web
                try:
                    import aiohttp, asyncio

                    async def _via_ws():
                        ws_url = self.goose_api_url.replace("http://", "ws://").replace("https://", "wss://") + "/ws"
                        payload = {
                            "type": "message",
                            "content": message,
                            "session_id": session_name,
                            "timestamp": int(_time.time() * 1000),
                        }
                        timeout_total = aiohttp.ClientTimeout(total=timeout)
                        chunks = []
                        async with aiohttp.ClientSession(timeout=timeout_total) as session:
                            async with session.ws_connect(ws_url, heartbeat=30) as ws:
                                await ws.send_str(json.dumps(payload))
                                async for msg in ws:
                                    if msg.type == aiohttp.WSMsgType.TEXT:
                                        try:
                                            obj = json.loads(msg.data)
                                        except Exception:
                                            obj = None
                                        if isinstance(obj, dict):
                                            t = obj.get("type")
                                            if t == "response":
                                                content = obj.get("content")
                                                if content:
                                                    chunks.append(str(content))
                                            elif t in ("complete", "cancelled"):
                                                break
                                            elif t == "error":
                                                return {"success": False, "error": obj.get("message", "websocket error")}
                                        else:
                                            chunks.append(str(msg.data))
                                    elif msg.type in (aiohttp.WSMsgType.CLOSE, aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                                        break
                        return {"success": True, "response": "".join(chunks).strip()}

                    try:
                        return asyncio.run(_via_ws())
                    except RuntimeError:
                        loop = asyncio.new_event_loop()
                        try:
                            asyncio.set_event_loop(loop)
                            return loop.run_until_complete(_via_ws())
                        finally:
                            asyncio.set_event_loop(None)
                            loop.close()
                except Exception as e:
                    return {"success": False, "error": str(e)}

            # Fallback: goosed /reply SSE
            url = f"{self.goose_api_url}/reply"
            headers = {
                "Accept": "text/event-stream",
                "Cache-Control": "no-cache",
                "X-Secret-Key": self.goose_secret_key,
            }
            payload = {
                "messages": [
                    {
                        "role": "user",
                        "created": int(_time.time()),
                        "content": [{"type": "text", "text": message}],
                    }
                ],
                "session_id": session_name,
                "session_working_dir": os.getcwd(),
            }

            with requests.post(url, json=payload, headers=headers, stream=True, timeout=timeout) as resp:
                if resp.status_code != 200:
                    text = None
                    try:
                        text = resp.text[:500]
                    except Exception:
                        text = "<no body>"
                    return {"success": False, "error": f"HTTP {resp.status_code}", "response": text}

                chunks = []
                for raw_line in resp.iter_lines(decode_unicode=True):
                    if raw_line is None:
                        continue
                    line = raw_line.strip()
                    if not line or line.startswith(":"):
                        continue
                    if line.startswith("data:"):
                        data_part = line[5:].lstrip()
                        try:
                            obj = json.loads(data_part)
                            if isinstance(obj, dict):
                                if obj.get("type") == "Message" and isinstance(obj.get("message"), dict):
                                    msg = obj["message"]
                                    for c in msg.get("content", []) or []:
                                        if isinstance(c, dict) and c.get("type") == "text":
                                            t = c.get("text")
                                            if t:
                                                chunks.append(str(t))
                                else:
                                    token = obj.get("text") or obj.get("token") or obj.get("content")
                                    if token:
                                        chunks.append(str(token))
                                    if obj.get("final") is True or obj.get("done") is True:
                                        break
                            else:
                                chunks.append(str(obj))
                        except Exception:
                            chunks.append(data_part)
                    elif line.lower() == "event: done":
                        break

                return {"success": True, "response": "".join(chunks).strip()}
        except requests.exceptions.RequestException as e:
            return {"success": False, "error": str(e)}

    @classmethod
    def set_live_streamer(cls, streamer):
        cls.live_streamer = streamer

    def end_headers(self):
        """–î–æ–¥–∞—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        """–û–±—Ä–æ–±–∫–∞ preflight CORS –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/" or self.path == "/index.html":
            self.serve_frontend()
        elif self.path == "/DamagedHelmet.glb":
            self.serve_3d_model()
        elif self.path == "/favicon.ico":
            self.serve_favicon()
        elif self.path.startswith("/logs"):
            if self.path == "/logs/stream":
                self.serve_logs_stream()  # SSE endpoint
            else:
                self.serve_live_logs()    # Regular logs
        elif self.path == "/api/status":
            self.serve_system_status()
        elif self.path == "/api/atlas/status":
            self.serve_atlas_core_status()
        elif self.path == "/api/atlas/sessions":
            self.serve_atlas_sessions()
        elif self.path == "/api/goose/sessions":
            self.serve_goose_sessions()
        elif self.path == "/api/atlas/corrections":
            self.serve_correction_statistics()
        elif self.path.startswith("/api/atlas/corrections/"):
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó: /api/atlas/corrections/session_name
            session_name = self.path.replace("/api/atlas/corrections/", "")
            self.serve_session_corrections(session_name)
        elif self.path == "/api/atlas/diagnostics":
            self.serve_api_diagnostics()
        elif self.path == "/api/atlas/health":
            self.serve_health_check()
        elif self.path == "/api/atlas/test-mode-analysis":
            self.serve_test_mode_analysis()
        else:
            super().do_GET()

    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/api/chat":
            self.handle_chat()
        elif self.path == "/api/chat/stream":
            self.handle_chat_stream()
        elif self.path == "/api/tts/speak":
            self.handle_tts()
        elif self.path == "/api/atlas/analyze-prompt":
            self.handle_analyze_prompt()
        else:
            self.send_error(404, "Not Found")

    def serve_frontend(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
        try:
            html_path = Path(__file__).parent / "index.html"
            with open(html_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Content-Length', str(len(content.encode('utf-8'))))
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
        except Exception as e:
            logger.error(f"Error serving frontend: {e}")
            self.send_error(500, str(e))

    def serve_3d_model(self):
        """3D –º–æ–¥–µ–ª—å —à–æ–ª–æ–º–∞"""
        try:
            model_path = Path(__file__).parent / "DamagedHelmet.glb"
            if model_path.exists():
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = model_path.stat().st_size
                
                self.send_response(200)
                self.send_header('Content-type', 'application/octet-stream')
                self.send_header('Content-Length', str(file_size))
                self.send_header('Accept-Ranges', 'bytes')
                self.end_headers()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —á–∞—Å—Ç–∏–Ω–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
                with open(model_path, 'rb') as f:
                    while True:
                        chunk = f.read(8192)  # 8KB –∑–∞ —Ä–∞–∑
                        if not chunk:
                            break
                        try:
                            self.wfile.write(chunk)
                            self.wfile.flush()
                        except (BrokenPipeError, ConnectionResetError):
                            # –ö–ª—ñ—î–Ω—Ç —Ä–æ–∑—ñ—Ä–≤–∞–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è
                            break
            else:
                self.send_error(404, "3D model not found")
        except Exception as e:
            logger.error(f"Error serving 3D model: {e}")
            try:
                self.send_error(500, str(e))
            except:
                # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                pass

    def serve_favicon(self):
        """–Ü–∫–æ–Ω–∫–∞ —Å–∞–π—Ç—É"""
        try:
            favicon_path = Path(__file__).parent / "favicon.ico"
            if favicon_path.exists():
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = favicon_path.stat().st_size
                
                self.send_response(200)
                self.send_header('Content-type', 'image/x-icon')
                self.send_header('Content-Length', str(file_size))
                self.end_headers()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —á–∞—Å—Ç–∏–Ω–∞–º–∏
                with open(favicon_path, 'rb') as f:
                    while True:
                        chunk = f.read(1024)  # 1KB –∑–∞ —Ä–∞–∑
                        if not chunk:
                            break
                        try:
                            self.wfile.write(chunk)
                            self.wfile.flush()
                        except (BrokenPipeError, ConnectionResetError):
                            # –ö–ª—ñ—î–Ω—Ç —Ä–æ–∑—ñ—Ä–≤–∞–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è
                            break
            else:
                # –Ø–∫—â–æ favicon.ico –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π 1x1 –ø—ñ–∫—Å–µ–ª—å
                self.send_response(200)
                self.send_header('Content-type', 'image/x-icon')
                self.send_header('Content-Length', '0')
                self.end_headers()
        except Exception as e:
            logger.error(f"Error serving favicon: {e}")
            try:
                self.send_error(500, str(e))
            except:
                # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                pass

    def serve_health(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            services = {
                "atlas_minimal": True,
                "atlas_core": "unknown",  # –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
                "live_logs": self.live_streamer is not None,
                "timestamp": datetime.now().isoformat()
            }
            
            response = json.dumps(services).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Health check error: {e}")
            self.send_error(500, str(e))

    def serve_logs_stream(self):
        """üîÑ –í–ò–ú–ö–ù–ï–ù–û: SSE –ø–æ—Ç—ñ–∫ –¥–ª—è live –ª–æ–≥—ñ–≤ (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ)"""
        try:
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π JSON –∑–∞–º—ñ—Å—Ç—å SSE –ø–æ—Ç–æ–∫—É
            response = {
                "status": "disabled",
                "message": "Log streaming temporarily disabled",
                "timestamp": datetime.now().isoformat()
            }

            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

        except Exception as e:
            logger.error(f"Log stream error: {e}")
            self.send_error(500, str(e))

    def _get_recent_logs(self, limit: int = 10):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ª–æ–≥—ñ–≤"""
        logs = []
        
        # –î–æ–¥–∞—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏
        logs.append({
            "message": "üîç Monitoring Goose sessions in real-time...",
            "level": "info",
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "source": "atlas_monitor"
        })
        
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –∑ —Å–µ—Å—ñ–π Goose —Ç—É—Ç
        try:
            sessions_dir = Path.home() / ".local/share/goose/sessions"
            if sessions_dir.exists():
                jsonl_files = list(sessions_dir.glob("*.jsonl"))
                if jsonl_files:
                    latest_session = max(jsonl_files, key=lambda f: f.stat().st_mtime)
                    with open(latest_session, 'r', encoding='utf-8') as f:
                        lines = f.readlines()[-5:]  # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—è–¥–∫—ñ–≤
                    
                    for line in lines:
                        if line.strip():
                            try:
                                data = json.loads(line.strip())
                                if "role" in data and "content" in data:
                                    content = str(data.get("content", ""))[:100]
                                    logs.append({
                                        "message": f"ü§ñ {data['role'].upper()}: {content}...",
                                        "level": "info",
                                        "timestamp": datetime.now().strftime("%H:%M:%S"),
                                        "source": "goose_session"
                                    })
                            except:
                                continue
        except:
            pass
        
        return logs[-limit:]

    def serve_live_logs(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ Goose –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–µ—Å—ñ—ó"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            parsed_path = urllib.parse.urlparse(self.path)
            query_params = urllib.parse.parse_qs(parsed_path.query)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ limit –ø–∞—Ä–∞–º–µ—Ç—Ä (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
            limit = int(query_params.get('limit', ['50'])[0])
            
            logs = []
            
            # –ß–∏—Ç–∞—î–º–æ –ª–æ–≥–∏ –∑ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–æ—ó —Å–µ—Å—ñ—ó Goose
            try:
                sessions_dir = Path.home() / ".local/share/goose/sessions"
                if sessions_dir.exists():
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π .jsonl —Ñ–∞–π–ª
                    jsonl_files = list(sessions_dir.glob("*.jsonl"))
                    if jsonl_files:
                        latest_session = max(jsonl_files, key=lambda f: f.stat().st_mtime)
                        
                        # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ñ–∞–π–ª—É
                        with open(latest_session, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            
                        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N —Ä—è–¥–∫—ñ–≤
                        recent_lines = lines[-min(limit, len(lines)):]
                        
                        for line in recent_lines:
                            line = line.strip()
                            if line:
                                try:
                                    # –ü—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
                                    data = json.loads(line)
                                    
                                    # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                                    if "role" in data and "content" in data:
                                        role = data["role"]
                                        content = str(data.get("content", ""))
                                        
                                        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                        if role == "user":
                                            message = f"üîµ USER: {content[:200]}..."
                                        elif role == "assistant":
                                            message = f"ü§ñ GOOSE: {content[:200]}..."
                                        else:
                                            message = f"üìä {role.upper()}: {content[:200]}..."
                                            
                                        logs.append({
                                            "message": message,
                                            "level": "info",
                                            "timestamp": datetime.now().strftime("%H:%M:%S"),
                                            "source": "goose_session"
                                        })
                                        
                                    elif "description" in data:
                                        # –û–ø–∏—Å –∑–∞–¥–∞—á—ñ
                                        description = data["description"]
                                        message = f"üìã TASK: {description}"
                                        logs.append({
                                            "message": message,
                                            "level": "info", 
                                            "timestamp": datetime.now().strftime("%H:%M:%S"),
                                            "source": "goose_task"
                                        })
                                        
                                except json.JSONDecodeError:
                                    # –Ø–∫—â–æ –Ω–µ JSON, –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
                                    logs.append({
                                        "message": f"üìÑ RAW: {line[:200]}...",
                                        "level": "debug",
                                        "timestamp": datetime.now().strftime("%H:%M:%S"),
                                        "source": "goose_raw"
                                    })
                                    
            except Exception as e:
                logs.append({
                    "message": f"‚ùå Error reading Goose sessions: {e}",
                    "level": "error",
                    "timestamp": datetime.now().strftime("%H:%M:%S"),
                    "source": "atlas_frontend"
                })
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
            logs.append({
                "message": f"üîç Monitoring Goose sessions in real-time...",
                "level": "info",
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "source": "atlas_monitor"
            })
            
            response = json.dumps({"logs": logs}).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Live logs error: {e}")
            try:
                self.send_error(500, str(e))
            except:
                pass

    def serve_log_stream(self):
        """Server-Sent Events —Å—Ç—Ä—ñ–º –ª–æ–≥—ñ–≤"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
            self.send_response(200)
            self.send_header('Content-Type', 'text/event-stream')
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Connection', 'keep-alive')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            status_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO", 
                "source": "atlas_frontend",
                "message": "Log stream connected successfully"
            }
            self.wfile.write(f"data: {json.dumps(status_data)}\n\n".encode())
            
            # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ –∑ /tmp/goose.log (—è–∫—â–æ —î)
            try:
                if Path("/tmp/goose.log").exists():
                    with open("/tmp/goose.log", 'r') as f:
                        lines = f.readlines()
                        for line in lines[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤
                            if line.strip():
                                # –ü–∞—Ä—Å–∏–º–æ –ª–æ–≥ –ª—ñ–Ω—ñ—é (–≤–∏–¥–∞–ª—è—î –¥–∞—Ç–∏ —Ç–∞ –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ —Ä—ñ–≤–µ–Ω—å + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                                parsed_line = self._parse_log_line(line.strip())
                                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ None –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä—è–¥–∫–∏ "at crates/...")
                                if parsed_line is not None:
                                    event_data = {
                                        "timestamp": datetime.now().isoformat(),
                                        "level": "DEBUG",  # –¢—å–º—è–Ω—ñ—à–∏–π —Ä—ñ–≤–µ–Ω—å
                                        "source": "goose",
                                        "message": parsed_line
                                    }
                                    self.wfile.write(f"data: {json.dumps(event_data)}\n\n".encode())
                                    self.wfile.flush()  # –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
            except Exception as e:
                logger.error(f"Error reading goose logs: {e}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—ñ–Ω—Ü–µ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            end_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO",
                "source": "atlas_frontend", 
                "message": "Initial log data sent"
            }
            self.wfile.write(f"data: {json.dumps(end_data)}\n\n".encode())
            self.wfile.flush()
            
        except Exception as e:
            logger.error(f"Log stream error: {e}")
            # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ send_error –ø—ñ—Å–ª—è send_response
            return

    def serve_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        try:
            status = {
                "services": {
                    "atlas_frontend": "running",
                    "atlas_core_available": ATLAS_CORE_AVAILABLE,
                    "timestamp": datetime.now().isoformat()
                },
                "processes": {
                    "atlas": {"count": 1, "status": "active"}
                }
            }
            
            response = json.dumps(status).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"System status error: {e}")
            self.send_error(500, str(e))

    def serve_atlas_core_status(self):
        """–°—Ç–∞—Ç—É—Å Atlas Core —Å–∏—Å—Ç–µ–º–∏"""
        try:
            if ATLAS_CORE_AVAILABLE:
                core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                status = core.get_system_status()
                health = core.health_check()
                
                response_data = {
                    "atlas_core": {
                        "available": True,
                        "status": status,
                        "health": health
                    },
                    "timestamp": datetime.now().isoformat()
                }
            else:
                response_data = {
                    "atlas_core": {
                        "available": False,
                        "error": "Atlas Core –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π",
                        "legacy_mode": True
                    },
                    "timestamp": datetime.now().isoformat()
                }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Atlas Core status error: {e}")
            error_response = {
                "atlas_core": {
                    "available": False,
                    "error": str(e)
                },
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_atlas_sessions(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π Goose"""
        try:
            if ATLAS_CORE_AVAILABLE:
                core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                sessions = core.get_available_sessions()
                
                response_data = {
                    "sessions": sessions,
                    "count": len(sessions),
                    "atlas_core": True,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                response_data = {
                    "sessions": [],
                    "count": 0,
                    "atlas_core": False,
                    "error": "Atlas Core –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                    "timestamp": datetime.now().isoformat()
                }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Atlas sessions error: {e}")
            error_response = {
                "sessions": [],
                "error": str(e),
                "atlas_core": False,
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_goose_sessions(self):
        """–°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π Goose –∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        try:
            sessions_dir = Path.home() / ".local/share/goose/sessions"
            sessions = []
            
            if sessions_dir.exists():
                jsonl_files = list(sessions_dir.glob("*.jsonl"))
                
                for session_file in sorted(jsonl_files, key=lambda f: f.stat().st_mtime, reverse=True)[:10]:
                    stat = session_file.stat()
                    size_kb = round(stat.st_size / 1024, 1)
                    
                    # –ß–∏—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –æ–ø–∏—Å—É
                    description = "Unknown task"
                    try:
                        with open(session_file, 'r', encoding='utf-8') as f:
                            first_line = f.readline().strip()
                            if first_line:
                                data = json.loads(first_line)
                                description = data.get("description", "Unknown task")
                    except:
                        pass
                    
                    sessions.append({
                        "name": session_file.name,
                        "description": description,
                        "size_kb": size_kb,
                        "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        "path": str(session_file)
                    })
            
            response_data = {
                "sessions": sessions,
                "count": len(sessions),
                "sessions_dir": str(sessions_dir),
                "timestamp": datetime.now().isoformat()
            }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Goose sessions error: {e}")
            error_response = {
                "sessions": [],
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_correction_statistics(self):
        """
        üÜï –ù–û–í–ò–ô API ENDPOINT: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å Atlas
        GET /api/atlas/corrections - –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        """
        try:
            if hasattr(self.server, 'session_manager'):
                stats = self.server.session_manager.get_all_correction_statistics()
                
                response_data = {
                    "correction_statistics": stats,
                    "feature_description": "Atlas automatically creates detailed correction tasks when Grisha identifies incomplete work",
                    "timestamp": datetime.now().isoformat()
                }
                
                response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
            else:
                error_response = {
                    "error": "Session manager not available",
                    "timestamp": datetime.now().isoformat()
                }
                response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
                self.send_response(503)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
                
        except Exception as e:
            logger.error(f"Correction statistics error: {e}")
            error_response = {
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_session_corrections(self, session_name: str):
        """
        üÜï –ù–û–í–ò–ô API ENDPOINT: –Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ—Å—ñ—ó
        GET /api/atlas/corrections/{session_name} - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å –¥–ª—è —Å–µ—Å—ñ—ó
        """
        try:
            if hasattr(self.server, 'session_manager'):
                history = self.server.session_manager.get_session_correction_history(session_name)
                
                response_data = {
                    "correction_history": history,
                    "feature_description": f"Detailed correction history for session '{session_name}'",
                    "timestamp": datetime.now().isoformat()
                }
                
                response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
            else:
                error_response = {
                    "error": "Session manager not available",
                    "session_name": session_name,
                    "timestamp": datetime.now().isoformat()
                }
                response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
                self.send_response(503)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
                
        except Exception as e:
            logger.error(f"Session corrections error for '{session_name}': {e}")
            error_response = {
                "error": str(e),
                "session_name": session_name,
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_api_diagnostics(self):
        """
        üîß –ù–û–í–ò–ô API ENDPOINT: –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —Å—Ç–∞–Ω—É
        GET /api/atlas/diagnostics - –ø–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–∞–Ω HTTP API —Ç–∞ fallback
        """
        try:
            if hasattr(self.server, 'session_manager'):
                sm = self.server.session_manager
                
                # –ó–±–∏—Ä–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                diagnostics = {
                    "api_configuration": {
                        "api_url": sm.api_url,
                        "use_http_api": sm.use_http_api,
                        "secret_key_configured": bool(sm.secret_key)
                    },
                    "api_status": {
                        "failure_count": getattr(sm, 'api_failure_count', 0),
                        "fallback_active": getattr(sm, 'fallback_active', False),
                        "last_api_check": getattr(sm, 'last_api_check', None),
                        "recovery_interval": getattr(sm, 'api_recovery_interval', 30)
                    },
                    "status_history": getattr(sm, 'api_status_history', [])[-10:],  # –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤
                    "live_validation": None
                }
                
                # –ü—Ä–æ–≤–æ–¥–∏–º–æ –∂–∏–≤—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
                try:
                    if hasattr(sm, '_validate_api_availability'):
                        live_check = sm._validate_api_availability()
                        diagnostics["live_validation"] = live_check
                except Exception as val_error:
                    diagnostics["live_validation"] = {"error": str(val_error)}
                
                response_data = {
                    "diagnostics": diagnostics,
                    "recommendations": self._generate_api_recommendations(diagnostics),
                    "timestamp": datetime.now().isoformat()
                }
                
                response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
                
            else:
                self._send_error_response(503, "Session manager not available")
                
        except Exception as e:
            logger.error(f"API diagnostics error: {e}")
            self._send_error_response(500, str(e))

    def serve_health_check(self):
        """
        üíì –ù–û–í–ò–ô API ENDPOINT: –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏
        GET /api/atlas/health - –±–∞–∑–æ–≤–∏–π health check –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        """
        try:
            health_status = {
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "components": {}
            }
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Session Manager
            if hasattr(self.server, 'session_manager'):
                sm = self.server.session_manager
                fallback_active = getattr(sm, 'fallback_active', False)
                
                health_status["components"]["session_manager"] = {
                    "status": "degraded" if fallback_active else "healthy",
                    "fallback_active": fallback_active,
                    "mode": "CLI" if fallback_active else "HTTP_API"
                }
                
                if fallback_active:
                    health_status["status"] = "degraded"
            else:
                health_status["components"]["session_manager"] = {
                    "status": "unavailable",
                    "error": "Session manager not initialized"
                }
                health_status["status"] = "unhealthy"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Goose –ø—Ä–æ—Ü–µ—Å—É
            try:
                import subprocess
                result = subprocess.run(['pgrep', '-f', 'goose web'], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    health_status["components"]["goose_web"] = {
                        "status": "healthy",
                        "processes": len(result.stdout.strip().split('\n')) if result.stdout.strip() else 0
                    }
                else:
                    health_status["components"]["goose_web"] = {
                        "status": "unavailable",
                        "error": "No goose web processes found"
                    }
                    if health_status["status"] == "healthy":
                        health_status["status"] = "degraded"
                        
            except Exception as e:
                health_status["components"]["goose_web"] = {
                    "status": "unknown", 
                    "error": str(e)
                }
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º HTTP —Å—Ç–∞—Ç—É—Å–æ–º
            status_code = 200 if health_status["status"] == "healthy" else (
                503 if health_status["status"] == "unhealthy" else 200
            )
            
            response = json.dumps(health_status, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Health check error: {e}")
            self._send_error_response(500, str(e))

    def serve_test_mode_analysis(self):
        """
        üß™ –ù–û–í–ò–ô API ENDPOINT: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–∂–∏–º—É
        GET /api/atlas/test-mode-analysis - —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–º–ø—Ç—ñ–≤
        """
        try:
            if hasattr(self.server, 'session_manager'):
                sm = self.server.session_manager
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
                test_results = sm.test_intelligent_mode_analysis()
                
                # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                response_data = {
                    "test_results": test_results,
                    "summary": {
                        "total_tests": test_results["total_tests"],
                        "http_api_percentage": round((test_results["http_api_recommended"] / test_results["total_tests"]) * 100, 1),
                        "cli_percentage": round((test_results["cli_recommended"] / test_results["total_tests"]) * 100, 1)
                    },
                    "system_status": {
                        "intelligent_analysis": "active",
                        "mode_detection": "enabled",
                        "current_default": "http_api" if sm.use_http_api else "cli"
                    },
                    "timestamp": datetime.now().isoformat()
                }
                
                response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
                self.send_response(200)
                self.send_header('Content-type', 'application/json; charset=utf-8')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Content-Length', str(len(response)))
                self.end_headers()
                self.wfile.write(response)
                
            else:
                self._send_error_response(503, "Session manager not available")
                
        except Exception as e:
            logger.error(f"Mode analysis test error: {e}")
            self._send_error_response(500, str(e))

    def _generate_api_recommendations(self, diagnostics: dict) -> list:
        """üß† –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        recommendations = []
        
        api_status = diagnostics.get("api_status", {})
        config = diagnostics.get("api_configuration", {})
        
        if api_status.get("fallback_active"):
            recommendations.append({
                "priority": "high",
                "issue": "HTTP API fallback –∞–∫—Ç–∏–≤–Ω–∏–π",
                "solution": "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –ø—Ä–∞—Ü—é—î Goose web —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000",
                "command": "ps aux | grep 'goose web'"
            })
        
        if api_status.get("failure_count", 0) > 5:
            recommendations.append({
                "priority": "medium", 
                "issue": f"–ë–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫ API ({api_status.get('failure_count')})",
                "solution": "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å Goose —Å–µ—Ä–≤–µ—Ä –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è"
            })
        
        if not config.get("secret_key_configured"):
            recommendations.append({
                "priority": "low",
                "issue": "Secret key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π",
                "solution": "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å GOOSE_SECRET_KEY –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
            })
        
        live_validation = diagnostics.get("live_validation", {})
        if not live_validation.get("available"):
            reason = live_validation.get("reason", "unknown")
            if reason == "network_unreachable":
                recommendations.append({
                    "priority": "critical",
                    "issue": "–ú–µ—Ä–µ–∂–µ–≤–∏–π –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                    "solution": "–ó–∞–ø—É—Å—Ç—ñ—Ç—å Goose web —Å–µ—Ä–≤–µ—Ä: './target/release/goose web --port 3000'"
                })
            elif reason == "http_timeout":
                recommendations.append({
                    "priority": "high", 
                    "issue": "HTTP —Ç–∞–π–º–∞—É—Ç–∏",
                    "solution": "Goose —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ"
                })
        
        return recommendations

    def _send_error_response(self, status_code: int, error_message: str):
        """üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
        error_response = {
            "error": error_message,
            "status_code": status_code,
            "timestamp": datetime.now().isoformat()
        }
        response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Content-Length', str(len(response)))
        self.end_headers()
        self.wfile.write(response)

    def handle_chat(self):
        """–û–±—Ä–æ–±–∫–∞ —á–∞—Ç –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ Atlas Core (Atlas LLM1 + Goose + –ì—Ä—ñ—à–∞ LLM3)"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —è–∫ "message" —Ç–∞–∫ —ñ "prompt"
            user_message = data.get("message", data.get("prompt", ""))
            if not user_message:
                self.send_json_response({"error": "Message is required"}, 400)
                return
            
            # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_context = {
                "timestamp": datetime.now().isoformat(),
                "session_hint": data.get("session_type"),
                "client_ip": self.client_address[0],
                "user_agent": self.headers.get('User-Agent', 'unknown')
            }
            
            if ATLAS_CORE_AVAILABLE:
                # === –ù–û–í–ò–ô –®–õ–Ø–•: Atlas Core ===
                logger.info(f"üß† Atlas Core: –û–±—Ä–æ–±–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_message[:100]}...")
                
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä Atlas Core
                    core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤—Å—ñ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
                    # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ async –º–µ—Ç–æ–¥ –≤ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    try:
                        result = loop.run_until_complete(
                            core.process_user_message(user_message, user_context)
                        )
                    finally:
                        loop.close()
                    
                    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Atlas Core
                    if result.get("success"):
                        response_data = {
                            "response": result.get("response", result.get("atlas_response", "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")),
                            "response_type": result.get("response_type", "unknown"),
                            "atlas_core": True,
                            "processing_time": result.get("processing_time", 0),
                            "intent": result.get("intent_analysis", {}).get("intent", "unknown"),
                            "confidence": result.get("intent_analysis", {}).get("confidence", 0.0)
                        }
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é —è–∫—â–æ —î
                        if "session_strategy" in result:
                            response_data["session_info"] = {
                                "strategy": result["session_strategy"].get("strategy"),
                                "session_name": result["session_strategy"].get("session_name")
                            }
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–µ–∑–ø–µ–∫—É —è–∫—â–æ —î
                        if "security_analysis" in result:
                            response_data["security"] = {
                                "risk_level": result["security_analysis"].get("risk_level"),
                                "validated": True
                            }
                        
                        logger.info(f"‚úÖ Atlas Core: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ ({result.get('response_type')})")
                        self.send_json_response(response_data)
                        
                    else:
                        # –ü–æ–º–∏–ª–∫–∞ –≤ Atlas Core (–±—ñ–∑–Ω–µ—Å-—Ä—ñ–≤–µ–Ω—å): –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 200 –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º –æ–ø–∏—Å–æ–º, —â–æ–± –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø–∞–¥–∞–≤
                        error_message = result.get("error", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core")

                        base_error_payload = {
                            "success": False,
                            "atlas_core": True,
                            "error": error_message,
                            "response_type": result.get("response_type", "error"),
                        }
                        # –î–æ–¥–∞—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É, —è–∫—â–æ —î
                        if "diagnostic" in result:
                            base_error_payload["diagnostic"] = result["diagnostic"]
                        if "security_analysis" in result:
                            base_error_payload["security_analysis"] = result["security_analysis"]
                        if "session_strategy" in result:
                            base_error_payload["session_info"] = {
                                "strategy": result["session_strategy"].get("strategy"),
                                "session_name": result["session_strategy"].get("session_name")
                            }

                        if result.get("response_type") == "security_block":
                            base_error_payload["blocked"] = True
                            base_error_payload["response"] = "üõ°Ô∏è –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏ –ì—Ä—ñ—à–∞"
                            logger.warning(f"üõ°Ô∏è –ì—Ä—ñ—à–∞: –ó–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É - {error_message}")
                        else:
                            base_error_payload["fallback_available"] = True
                            base_error_payload["response"] = f"–ü–æ–º–∏–ª–∫–∞ Atlas Core: {error_message}"
                            logger.error(f"‚ùå Atlas Core: {error_message}")

                        # 200: –∫–ª—ñ—î–Ω—Ç –æ–±—Ä–æ–±–ª—è—î —è–∫ –≤–∞–ª—ñ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–æ–ª–µ–º success=false
                        self.send_json_response(base_error_payload, 200)
                        
                except Exception as atlas_error:
                    logger.error(f"üí• Atlas Core Exception: {atlas_error}")
                    # Fallback –¥–æ legacy —Ä–µ–∂–∏–º—É
                    self.handle_chat_legacy(user_message, data, user_context, str(atlas_error))
            
            else:
                # === –°–¢–ê–†–ò–ô –®–õ–Ø–•: Legacy Goose ===
                logger.info("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é legacy Goose —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")
                self.handle_chat_legacy(user_message, data, user_context)
                
        except Exception as e:
            logger.error(f"Fatal error in handle_chat: {e}")
            self.send_json_response({
                "response": f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
                "error": str(e),
                "atlas_core": False
            }, 500)

    def handle_chat_stream(self):
        """–°—Ç—Ä—ñ–º–æ–≤–∏–π —á–∞—Ç: –ø—Ä–æ–∫—Å—É–≤–∞–Ω–Ω—è —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ (goose web WS –∞–±–æ goosed /reply SSE).

        –ó–∞–ø–∏—Ç: POST /api/chat/stream
        Body: {"message": str, optional: "session_type", "session_name"}

        –í—ñ–¥–ø–æ–≤—ñ–¥—å: text/event-stream –∑ –ø–æ–¥—ñ—è–º–∏:
          - data: {"type":"status","message":"..."}
          - data: {"type":"token","token":"...","accumulated":"..."}
          - data: {"type":"done","total":"..."}
          - data: {"type":"error","error":"..."}
        """
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8')) if post_data else {}

            user_message = data.get("message") or data.get("prompt")
            if not user_message:
                self._send_error_response(400, "Message is required")
                return

            session_type = self.determine_session_type(user_message, data.get("session_type"))
            session_name = data.get("session_name") or self.get_session_name(user_message, session_type)

            # –†–æ–∑—à–∏—Ä–µ–Ω–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (–º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ no_paraphrase=true)
            use_paraphrase = self._should_paraphrase(data)
            # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç/—Å–º–∞–ª–ª—Ç–æ–∫ ‚Äî –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è –≤–∏–º–∏–∫–∞—î–º–æ, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–∞ –∑–∞–¥–∞—á—É
            if session_type == "chat":
                use_paraphrase = False
            message_to_send = self._paraphrase_user_message(user_message) if use_paraphrase else user_message

            self.send_response(200)
            self.send_header('Content-Type', 'text/event-stream; charset=utf-8')
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Connection', 'keep-alive')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

            def send_event(obj: dict):
                try:
                    payload = json.dumps(obj, ensure_ascii=False)
                    self.wfile.write(f"data: {payload}\n\n".encode('utf-8'))
                    try:
                        self.wfile.flush()
                    except Exception:
                        pass
                except (BrokenPipeError, ConnectionResetError):
                    raise
                except Exception as e:
                    logger.error(f"SSE write error: {e}")

            send_event({"type": "status", "message": "connected", "session": session_name, "paraphrase": use_paraphrase})
            if session_type == "chat":
                try:
                    send_event({
                        "type": "status",
                        "role": "atlas",
                        "event": "mode_detected",
                        "mode": "chat",
                        "say": "–ê—Ç–ª–∞—Å: –†–µ–∂–∏–º ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç (–±–µ–∑ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è)."
                    })
                except Exception:
                    pass
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–¥—ñ—ó –¥–ª—è —á–∞—Ç—É
            try:
                if use_paraphrase and (message_to_send or "") != (user_message or ""):
                    send_event({
                        "type": "status",
                        "role": "atlas",
                        "event": "paraphrase",
                        "say": "–ê—Ç–ª–∞—Å: –Ø –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É—é –¥–ª—è –±—ñ–ª—å—à–æ—ó –∑—Ä–æ–∑—É–º—ñ–ª–æ—Å—Ç—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:",
                        "content": message_to_send
                    })
                # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –±–µ–∑–ø–µ–∫–∏ (–ª–æ–≥—ñ—á–Ω–∞ –ø–æ–¥—ñ—è –¥–ª—è UX)
                send_event({
                    "type": "status",
                    "role": "atlas",
                    "event": "security_dispatch",
                    "say": "–ê—Ç–ª–∞—Å: –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–ª—É–∂–±—É –±–µ–∑–ø–µ–∫–∏ –¥–æ –ì—Ä—ñ—à—ñ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."
                })
                # –Ü–º—ñ—Ç–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏ (—è–∫—â–æ Atlas Core –Ω–µ –Ω–∞ —à–ª—è—Ö—É —Å—Ç—Ä—ñ–º—É)
                send_event({
                    "type": "status",
                    "role": "grisha",
                    "event": "security_result",
                    "decision": "allow",
                    "say": "–ì—Ä—ñ—à–∞ (LLM3): –ü–µ—Ä–µ–≤—ñ—Ä–∏–≤ –±–µ–∑–ø–µ–∫—É ‚Äî –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."
                })
            except Exception:
                pass

            accumulated: list[str] = []

            def _safe_lower(s: str) -> str:
                try:
                    return s.lower()
                except Exception:
                    return s

            def _extract_embedded_json(text: str):
                """–ü—Ä–æ–±—É—î –¥—ñ—Å—Ç–∞—Ç–∏ JSON –∑ ```json ...``` –∞–±–æ –∑ –ø–µ—Ä—à–∏—Ö/–æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥—É–∂–æ–∫.
                –ü–æ–≤–µ—Ä—Ç–∞—î dict –∞–±–æ None.
                """
                try:
                    import json as _json
                    import re as _re
                    # ```json ... ```
                    m = _re.search(r"```json\s*(\{[\s\S]*?\})\s*```", text, _re.IGNORECASE)
                    if m:
                        return _json.loads(m.group(1))
                    # –ø–µ—Ä—à–∞ –æ–±'—î–∫—Ç–Ω–∞ –¥—É–∂–∫–∞ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó
                    start = text.find('{')
                    end = text.rfind('}')
                    if start != -1 and end != -1 and end > start:
                        candidate = text[start:end+1]
                        return _json.loads(candidate)
                except Exception:
                    return None
                return None

            def _needs_auto_follow_up(full_text: str) -> bool:
                """–ì—Ä—É–±–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞: —è–∫—â–æ –∞—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤–∏–±—ñ—Ä –∞–±–æ JSON –∫–∞–∂–µ completed=false."""
                t = _safe_lower(full_text)
                cues = [
                    "–ø—ñ–¥—Ç–≤–µ—Ä–¥", "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "–º–æ–∂—É –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "–æ–±–µ—Ä–∏", "–≤–∏–±–µ—Ä–∏", "–æ–±—Ä–∞—Ç–∏", "–≤–∏–±—Ä–∞—Ç–∏",
                    "confirm", "should i proceed", "continue?", "choose", "select"
                ]
                if any(c in t for c in cues):
                    return True
                data = _extract_embedded_json(full_text) or {}
                if isinstance(data, dict):
                    if data.get("completed") is False:
                        return True
                    status = str(data.get("status", "")).lower()
                    if any(x in status for x in ["pending", "awaiting", "confirm", "incomplete"]):
                        return True
                return False

            def _compose_auto_follow_up(full_text: str, original_prompt: str) -> str:
                """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–µ —Å–µ—Ä–≤–µ—Ä–Ω–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏ —É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ."""
                return (
                    "–¢–∞–∫, –ø—Ä–æ–¥–æ–≤–∂—É–π –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –≤–∏–±—ñ—Ä ‚Äî –æ–±–∏—Ä–∞–π –ø–µ—Ä—à–∏–π –±–µ–∑–ø–µ—á–Ω–∏–π,"
                    " –±–µ–∑ —Ä–µ–∫–ª–∞–º–∏/–æ—Ä–≥–∞–Ω—ñ—á–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ó–∞–≤–µ—Ä—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫. "
                    "If you need confirmation: assume yes and proceed."
                )

            # === –†–ê–ù–ù–Ü–ô –ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–ù–Ø –¢–ê –ù–ï–ü–û–í–ù–û–¢–ò ===
            def _has_completion_cues(text: str) -> bool:
                t = _safe_lower(text)
                cues = [
                    "–≥–æ—Ç–æ–≤–æ", "–∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ", "–≤–∏–∫–æ–Ω–∞–Ω–æ", "–∑–∞–≤–µ—Ä—à–µ–Ω–æ", "done", "completed", "finished",
                    "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–∏–π", "final result", "–ø—ñ–¥—Å—É–º–æ–∫:", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç:" 
                ]
                return any(c in t for c in cues)

            def _build_incompletion_reason(full_text: str, original_prompt: str) -> str:
                reasons = []
                data = _extract_embedded_json(full_text) or {}
                t = _safe_lower(full_text)
                # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: embedded JSON
                if isinstance(data, dict):
                    if data.get("completed") is False:
                        reasons.append("embedded JSON: completed=false")
                    status = str(data.get("status", "")).lower()
                    if any(x in status for x in ["pending", "awaiting", "confirm", "incomplete", "todo"]):
                        reasons.append(f"—Å—Ç–∞—Ç—É—Å: {status or 'incomplete'}")
                    missing = data.get("missing") or data.get("todo") or data.get("next")
                    if missing:
                        try:
                            if isinstance(missing, (list, tuple)):
                                reasons.append("–≤—ñ–¥—Å—É—Ç–Ω—î: " + "; ".join([str(x) for x in missing][:3]))
                            else:
                                reasons.append("–≤—ñ–¥—Å—É—Ç–Ω—î: " + str(missing)[:200])
                        except Exception:
                            pass
                # –ï–≤—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–ø–æ–≤–Ω–æ—Ç–∏
                need_confirm_cues = ["–ø—ñ–¥—Ç–≤–µ—Ä–¥", "confirm", "should i proceed", "continue?", "choose", "select", "–æ–±–µ—Ä–∏", "–≤–∏–±–µ—Ä–∏", "–æ–±—Ä–∞—Ç–∏", "–≤–∏–±—Ä–∞—Ç–∏"]
                if any(c in t for c in need_confirm_cues):
                    reasons.append("–ø–æ—Ç—Ä—ñ–±–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤–∏–±—ñ—Ä (–º–∞—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ)")
                planning_cues = ["–ø–ª–∞–Ω", "–∫—Ä–æ–∫–∏", "steps", "outline"]
                if any(c in t for c in planning_cues) and not any(c in t for c in ["—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ø—ñ–¥—Å—É–º–æ–∫", "result", "final"]):
                    reasons.append("–Ω–∞–¥–∞–Ω–æ –ø–ª–∞–Ω –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
                promise_cues = ["i will", "i'll", "let me know", "–º–æ–∂—É", "–∑–º–æ–∂—É"]
                if any(c in t for c in promise_cues):
                    reasons.append("—î –æ–±—ñ—Ü—è–Ω–∫–∏/–Ω–∞–º—ñ—Ä –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
                # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä–Ω–µ–º–æ –∑–∞–≥–∞–ª—å–Ω–µ
                if not reasons:
                    reasons.append("–≤—ñ–¥—Å—É—Ç–Ω—ñ–π —è–≤–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫/—Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return "; ".join(reasons)[:400]

            def _analyze_completion(full_text: str, original_prompt: str) -> dict:
                """–ü–æ–≤–µ—Ä—Ç–∞—î dict –∑ –ø–æ–ª—è–º–∏: {cues, embedded_completed, embedded_incomplete, need_follow_up, reason} """
                info = {
                    "cues": _has_completion_cues(full_text),
                    "embedded_completed": False,
                    "embedded_incomplete": False,
                    "need_follow_up": False,
                    "reason": None,
                }
                data = _extract_embedded_json(full_text)
                if isinstance(data, dict):
                    if data.get("completed") is True:
                        info["embedded_completed"] = True
                        info["need_follow_up"] = False
                        return info
                    if data.get("completed") is False:
                        info["embedded_incomplete"] = True
                # –Ø–∫—â–æ —î —Å–∏–≥–Ω–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–ø–æ–≤–Ω–æ—Ç—É
                if info["embedded_incomplete"] or info["cues"]:
                    if _needs_auto_follow_up(full_text):
                        info["need_follow_up"] = True
                        info["reason"] = _build_incompletion_reason(full_text, original_prompt)
                return info

            def _compose_follow_up_with_reason(full_text: str, original_prompt: str, reason: str | None) -> str:
                base = _compose_auto_follow_up(full_text, original_prompt)
                if reason:
                    return (
                        f"–ü—Ä–æ–¥–æ–≤–∂—É–π —ñ –¥–æ–≤–∏–∫–æ–Ω–∞–π –∑–∞–≤–¥–∞–Ω–Ω—è. –£—Å—É–Ω—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ—Å—Ç—å: {reason}. "
                        + base
                    )
                return base

            def _is_web():
                try:
                    r = requests.get(f"{self.goose_api_url}/api/health", timeout=3)
                    return r.status_code == 200
                except Exception:
                    return False

            stream_timeout = self._get_stream_timeout()
            # –ü—Ä–∞–ø–æ—Ä—Ü—ñ —Ä–∞–Ω–Ω—å–æ–≥–æ –¥–æ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            early_followup_triggered = False
            early_followup_text = None
            early_analysis_enabled = True
            if _is_web():
                import aiohttp, asyncio

                async def _via_ws_and_stream():
                    nonlocal early_followup_triggered, early_followup_text
                    ws_url = self.goose_api_url.replace("http://", "ws://").replace("https://", "wss://") + "/ws"
                    payload = {
                        "type": "message",
                        "content": message_to_send,
                        "session_id": session_name,
                        "timestamp": int(time.time() * 1000),
                    }
                    timeout_total = aiohttp.ClientTimeout(total=stream_timeout) if stream_timeout is not None else None
                    async with aiohttp.ClientSession(timeout=timeout_total) as session:
                        async with session.ws_connect(ws_url, heartbeat=30) as ws:
                            await ws.send_str(json.dumps(payload))
                            async for msg in ws:
                                if msg.type == aiohttp.WSMsgType.TEXT:
                                    try:
                                        obj = json.loads(msg.data)
                                    except Exception:
                                        obj = None
                                    if isinstance(obj, dict):
                                        t = obj.get("type")
                                        if t == "response":
                                            content = obj.get("content")
                                            if content:
                                                token = str(content)
                                                accumulated.append(token)
                                                send_event({
                                                    "type": "token",
                                                    "token": token,
                                                    "accumulated": "".join(accumulated)
                                                })
                                                # –†–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: —è–∫—â–æ —î —Å–∏–≥–Ω–∞–ª–∏ ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                                                if early_analysis_enabled and not early_followup_triggered:
                                                    full_text = "".join(accumulated)
                                                    analysis = _analyze_completion(full_text, user_message)
                                                    if analysis.get("need_follow_up"):
                                                        early_followup_triggered = True
                                                        reason = analysis.get("reason")
                                                        send_event({
                                                            "type": "status",
                                                            "role": "verifier",
                                                            "event": "incomplete_detected",
                                                            "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:",
                                                            "reason": reason
                                                        })
                                                        early_followup_text = _compose_follow_up_with_reason(full_text, user_message, reason)
                                                        # –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç—Ä—ñ–º, —â–æ–± –Ω–µ–≥–∞–π–Ω–æ –¥–æ–≤–∏–∫–æ–Ω–∞—Ç–∏
                                                        break
                                            # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –≤ –ø–æ–ª—ñ, —Ç–µ–∂ –∑–∞–≤–µ—Ä—à—É—î–º–æ
                                            if obj.get("final") or obj.get("done"):
                                                break
                                        elif t in ("complete", "done", "cancelled", "final"):
                                            break
                                        elif t == "error":
                                            send_event({"type": "error", "error": obj.get("message", "websocket error")})
                                            return
                                        else:
                                            # –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫: —è–∫—â–æ —î —è–≤–Ω—ñ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
                                            if obj.get("final") or obj.get("done"):
                                                break
                                elif msg.type in (aiohttp.WSMsgType.CLOSE, aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                                    break

                try:
                    import asyncio
                    asyncio.run(_via_ws_and_stream())
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    try:
                        asyncio.set_event_loop(loop)
                        loop.run_until_complete(_via_ws_and_stream())
                    finally:
                        asyncio.set_event_loop(None)
                        loop.close()
                # Server-side auto follow-up (single chained message)
                try:
                    full_text = "".join(accumulated)
                    # –Ø–∫—â–æ —Ä–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑ –≤–∂–µ –≤–∏—Ä—ñ—à–∏–≤ ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                    if early_followup_triggered and early_followup_text:
                        follow_up = early_followup_text
                    elif _needs_auto_follow_up(full_text):
                        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ "–æ—Å–æ–±–∏, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î" –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º
                        send_event({
                            "type": "status",
                            "role": "verifier",
                            "event": "incomplete_detected",
                            "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, —Ñ–æ—Ä–º—É—é –∫–æ—Ä–∏–≥—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è."
                        })
                        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞, —â–æ–± –¥–∞—Ç–∏ —à–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—Ç—Ä—É—Ç–∏—Ç–∏—Å—è (8—Å)
                        try:
                            time.sleep(8)
                        except Exception:
                            pass
                        follow_up = _compose_auto_follow_up(full_text, user_message)
                        send_event({
                            "type": "status",
                            "role": "verifier",
                            "event": "correction_task",
                            "correction": follow_up,
                            "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ü–µ—Ä–µ–¥–∞—é –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–æ–≤–µ—Ä—à–µ–Ω–Ω—è:"
                        })
                        send_event({"type": "status", "message": "server_auto_followup", "follow_up": follow_up})

                        async def _via_ws_and_stream_followup():
                            ws_url = self.goose_api_url.replace("http://", "ws://").replace("https://", "wss://") + "/ws"
                            payload = {
                                "type": "message",
                                "content": follow_up,
                                "session_id": session_name,
                                "timestamp": int(time.time() * 1000),
                            }
                            timeout_total = aiohttp.ClientTimeout(total=stream_timeout) if stream_timeout is not None else None
                            async with aiohttp.ClientSession(timeout=timeout_total) as session:
                                async with session.ws_connect(ws_url, heartbeat=30) as ws:
                                    await ws.send_str(json.dumps(payload))
                                    async for msg in ws:
                                        if msg.type == aiohttp.WSMsgType.TEXT:
                                            try:
                                                obj = json.loads(msg.data)
                                            except Exception:
                                                obj = None
                                            if isinstance(obj, dict):
                                                t = obj.get("type")
                                                if t == "response":
                                                    content = obj.get("content")
                                                    if content:
                                                        token = str(content)
                                                        accumulated.append(token)
                                                        send_event({
                                                            "type": "token",
                                                            "token": token,
                                                            "accumulated": "".join(accumulated)
                                                        })
                                                    if obj.get("final") or obj.get("done"):
                                                        break
                                                elif t in ("complete", "done", "cancelled", "final"):
                                                    break
                                                elif t == "error":
                                                    send_event({"type": "error", "error": obj.get("message", "websocket error")})
                                                    return
                                                else:
                                                    if obj.get("final") or obj.get("done"):
                                                        break
                                        elif msg.type in (aiohttp.WSMsgType.CLOSE, aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                                            break

                        try:
                            asyncio.run(_via_ws_and_stream_followup())
                        except RuntimeError:
                            loop = asyncio.new_event_loop()
                            try:
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(_via_ws_and_stream_followup())
                            finally:
                                asyncio.set_event_loop(None)
                                loop.close()
                except Exception as _e:
                    logger.debug(f"Auto-followup WS skipped: {_e}")
            else:
                url = f"{self.goose_api_url}/reply"
                headers = {
                    "Accept": "text/event-stream",
                    "Cache-Control": "no-cache",
                    "X-Secret-Key": self.goose_secret_key,
                }
                payload = {
                    "messages": [
                        {
                            "role": "user",
                            "created": int(time.time()),
                            "content": [{"type": "text", "text": message_to_send}],
                        }
                    ],
                    "session_id": session_name,
                    "session_working_dir": os.getcwd(),
                }

                req_kwargs = {"json": payload, "headers": headers, "stream": True}
                if stream_timeout is not None:
                    req_kwargs["timeout"] = stream_timeout
                with requests.post(url, **req_kwargs) as resp:
                    if resp.status_code != 200:
                        try:
                            body = resp.text[:500]
                        except Exception:
                            body = "<no body>"
                        send_event({"type": "error", "error": f"HTTP {resp.status_code}", "response": body})
                        return

                    for raw_line in resp.iter_lines(decode_unicode=True):
                        if raw_line is None:
                            continue
                        line = raw_line.strip()
                        if not line or line.startswith(":"):
                            continue
                        if line.startswith("data:"):
                            data_part = line[5:].lstrip()
                            token = None
                            is_done = False
                            try:
                                obj = json.loads(data_part)
                                if isinstance(obj, dict):
                                    if obj.get("type") == "Message" and isinstance(obj.get("message"), dict):
                                        msg = obj["message"]
                                        for c in msg.get("content", []) or []:
                                            if isinstance(c, dict) and c.get("type") == "text":
                                                t = c.get("text")
                                                if t:
                                                    token = str(t)
                                                    accumulated.append(token)
                                                    send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                    else:
                                        token = obj.get("text") or obj.get("token") or obj.get("content")
                                        if token:
                                            token = str(token)
                                            accumulated.append(token)
                                            send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                        is_done = bool(obj.get("final") or obj.get("done"))
                                else:
                                    token = str(obj)
                                    accumulated.append(token)
                                    send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                            except Exception:
                                token = data_part
                                accumulated.append(token)
                                send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                            # –†–∞–Ω–Ω—ñ–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–ª—è SSE
                            if early_analysis_enabled and not early_followup_triggered:
                                full_text_now = "".join(accumulated)
                                analysis = _analyze_completion(full_text_now, user_message)
                                if analysis.get("need_follow_up"):
                                    early_followup_triggered = True
                                    reason = analysis.get("reason")
                                    send_event({
                                        "type": "status",
                                        "role": "verifier",
                                        "event": "incomplete_detected",
                                        "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ:",
                                        "reason": reason
                                    })
                                    early_followup_text = _compose_follow_up_with_reason(full_text_now, user_message, reason)
                                    # –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç—Ä—ñ–º, —â–æ–± –Ω–µ–≥–∞–π–Ω–æ –¥–æ–≤–∏–∫–æ–Ω–∞—Ç–∏
                                    break
                            if is_done:
                                break
                        elif line.lower() == "event: done":
                            break

                # Server-side auto follow up for goosed SSE (single chained message)
                try:
                    full_text = "".join(accumulated)
                    if early_followup_triggered and early_followup_text:
                        follow_up = early_followup_text
                    elif _needs_auto_follow_up(full_text):
                        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ "–æ—Å–æ–±–∏, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î" –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º
                        send_event({
                            "type": "status",
                            "role": "verifier",
                            "event": "incomplete_detected",
                            "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, —Ñ–æ—Ä–º—É—é –∫–æ—Ä–∏–≥—É—é—á–µ –∑–∞–≤–¥–∞–Ω–Ω—è."
                        })
                        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞, —â–æ–± –¥–∞—Ç–∏ —à–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—Ç—Ä—É—Ç–∏—Ç–∏—Å—è (8—Å)
                        try:
                            time.sleep(8)
                        except Exception:
                            pass
                        follow_up = _compose_auto_follow_up(full_text, user_message)
                        send_event({
                            "type": "status",
                            "role": "verifier",
                            "event": "correction_task",
                            "correction": follow_up,
                            "say": "–û—Å–æ–±–∞, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î: –ü–µ—Ä–µ–¥–∞—é –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –¥–æ–≤–µ—Ä—à–µ–Ω–Ω—è:"
                        })
                        send_event({"type": "status", "message": "server_auto_followup", "follow_up": follow_up})

                        payload_follow = {
                            "messages": [
                                {
                                    "role": "user",
                                    "created": int(time.time()),
                                    "content": [{"type": "text", "text": follow_up}],
                                }
                            ],
                            "session_id": session_name,
                            "session_working_dir": os.getcwd(),
                        }

                        req2_kwargs = {"json": payload_follow, "headers": headers, "stream": True}
                        if stream_timeout is not None:
                            req2_kwargs["timeout"] = stream_timeout
                        with requests.post(url, **req2_kwargs) as resp2:
                            if resp2.status_code == 200:
                                for raw_line in resp2.iter_lines(decode_unicode=True):
                                    if raw_line is None:
                                        continue
                                    line = raw_line.strip()
                                    if not line or line.startswith(":"):
                                        continue
                                    if line.startswith("data:"):
                                        data_part = line[5:].lstrip()
                                        token = None
                                        is_done = False
                                        try:
                                            obj = json.loads(data_part)
                                            if isinstance(obj, dict):
                                                if obj.get("type") == "Message" and isinstance(obj.get("message"), dict):
                                                    msg = obj["message"]
                                                    for c in msg.get("content", []) or []:
                                                        if isinstance(c, dict) and c.get("type") == "text":
                                                            t = c.get("text")
                                                            if t:
                                                                token = str(t)
                                                                accumulated.append(token)
                                                                send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                                else:
                                                    token = obj.get("text") or obj.get("token") or obj.get("content")
                                                    if token:
                                                        token = str(token)
                                                        accumulated.append(token)
                                                        send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                                    is_done = bool(obj.get("final") or obj.get("done"))
                                            else:
                                                token = str(obj)
                                                accumulated.append(token)
                                                send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                        except Exception:
                                            token = data_part
                                            accumulated.append(token)
                                            send_event({"type": "token", "token": token, "accumulated": "".join(accumulated)})
                                        if is_done:
                                            break
                                    elif line.lower() == "event: done":
                                        break
                            else:
                                try:
                                    body2 = resp2.text[:500]
                                except Exception:
                                    body2 = "<no body>"
                                send_event({"type": "error", "error": f"HTTP {resp2.status_code}", "response": body2})
                except Exception as _e:
                    logger.debug(f"Auto-followup SSE skipped: {_e}")

            send_event({"type": "done", "total": "".join(accumulated), "session": session_name})
        except (BrokenPipeError, ConnectionResetError):
            return
        except requests.exceptions.RequestException as e:
            try:
                send_event({"type": "error", "error": str(e)})
            except Exception:
                pass
        except Exception as e:
            logger.error(f"Chat stream error: {e}")
            try:
                send_event({"type": "error", "error": str(e)})
            except Exception:
                pass

    def handle_chat_legacy(self, user_message: str, data: dict, user_context: dict, atlas_error: str = None):
        """Legacy –æ–±—Ä–æ–±–∫–∞ —á–∞—Ç—É —á–µ—Ä–µ–∑ HTTP API Goose –∑–∞–º—ñ—Å—Ç—å CLI"""
        try:
            logger.info(f"üîÑ Legacy: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose HTTP API: {user_message[:100]}...")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–µ—Å—ñ—ó (legacy –ª–æ–≥—ñ–∫–∞)
            session_type = self.determine_session_type(user_message, data.get("session_type"))
            session_name = self.get_session_name(user_message, session_type)
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è HTTP API –∑–∞–º—ñ—Å—Ç—å CLI
            try:
                # –ù–∞ goosed –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /reply –∑ session_id
                reply_result = self.send_goose_reply_sse(session_name, user_message)
                
                # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if reply_result["success"]:
                    answer = reply_result.get("response", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞")
                    
                    result_data = {
                        "response": answer,
                        "session_name": session_name,
                        "session_type": session_type,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }
                    
                    # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                    if atlas_error:
                        result_data["atlas_fallback"] = True
                        result_data["atlas_error"] = atlas_error
                    
                    logger.info(f"‚úÖ Legacy API: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                    self.send_json_response(result_data)
                    
                else:
                    error_msg = reply_result.get("error", "Goose API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                    logger.error(f"‚ùå Legacy API: {error_msg}")
                    self.send_json_response({
                        "response": f"–ü–æ–º–∏–ª–∫–∞ Goose API: {error_msg}",
                        "error": error_msg,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }, 500)
                    
            except Exception as api_error:
                logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, fallback –¥–æ CLI: {api_error}")
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ CLI –º–µ—Ç–æ–¥—É
                self._handle_chat_cli_fallback(user_message, data, session_type, session_name, atlas_error)
                
        except Exception as e:
            logger.error(f"üí• Legacy Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ legacy —Ä–µ–∂–∏–º—É: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True
            }, 500)

    def _handle_chat_cli_fallback(self, user_message: str, data: dict, session_type: str, session_name: str, atlas_error: str = None):
        """Fallback –¥–æ CLI –º–µ—Ç–æ–¥—É, —è–∫—â–æ HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        try:
            logger.info(f"üîÑ CLI Fallback: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose CLI: {user_message[:100]}...")
            
            # –í–∏–∫–ª–∏–∫ Goose CLI –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é
            goose_path = "/Users/dev/Documents/GitHub/ATLAS/goose/target/release/goose"
            
            if session_type == "new_session":
                # –ù–æ–≤–∞ —ñ–º–µ–Ω–æ–≤–∞–Ω–∞ —Å–µ—Å—ñ—è
                cmd = [goose_path, "session", "--name", session_name]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
                
            elif session_type == "continue_session":
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
                cmd = [goose_path, "session", "--name", session_name, "--resume"]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
            else:
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É
                cmd = [goose_path, "run", "-t", user_message, "--quiet"]
                result = subprocess.run(
                    cmd,
                    capture_output=True, 
                    text=True, 
                    timeout=300,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout = result.stdout
                stderr = result.stderr
            
            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if stdout:
                answer = self._clean_goose_output(stdout)
                
                response_data = {
                    "response": answer,
                    "session_name": session_name,
                    "session_type": session_type,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }
                
                # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if atlas_error:
                    response_data["atlas_fallback"] = True
                    response_data["atlas_error"] = atlas_error
                
                logger.info(f"‚úÖ CLI Fallback: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                self.send_json_response(response_data)
            else:
                error_msg = stderr or "Goose –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                logger.error(f"‚ùå CLI Fallback: {error_msg}")
                self.send_json_response({
                    "response": f"–ü–æ–º–∏–ª–∫–∞ Goose CLI: {error_msg}",
                    "error": error_msg,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }, 500)
                
        except subprocess.TimeoutExpired:
            logger.error("‚è±Ô∏è CLI Fallback: Timeout –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
            self.send_json_response({
                "response": "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ (>5—Ö–≤)",
                "error": "Timeout",
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 408)
            
        except Exception as e:
            logger.error(f"üí• CLI Fallback Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ CLI fallback: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 500)

    def _get_goose_env(self):
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = "/Users/dev/Documents/GitHub/ATLAS/goose/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def _clean_goose_output(self, output: str) -> str:
        """–û—á–∏—â–∞—î –≤–∏–≤—ñ–¥ Goose –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        lines = output.strip().split('\n')
        clean_lines = []
        for line in lines:
            if not any(skip in line for skip in [
                "starting session", "logging to", "working directory", 
                "Hermit environment", "activated", "Context:", "( O)>", "Press Enter"
            ]):
                clean_lines.append(line)
        
        clean_answer = '\n'.join(clean_lines).strip()
        return clean_answer if clean_answer else "Goose –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ"

    def determine_session_type(self, message, forced_type=None):
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if forced_type:
            return forced_type
            
        message_lower = message.lower()
        
        # –õ–µ–≥–∫–∏–π —Ñ—ñ–ª—å—Ç—Ä –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π —á–∞—Ç (–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è/–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ/—Å–º–æ–ª–ª—Ç–æ–∫)
        chat_keywords = [
            "–ø—Ä–∏–≤—ñ—Ç", "–≤—ñ—Ç–∞—é", "–¥–æ–±—Ä–∏–π –¥–µ–Ω—å", "–¥–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä", "—â–æ —á—É—Ç–Ω–æ", "—è–∫ —Å–ø—Ä–∞–≤–∏",
            "hi", "hello", "hey", "how are you", "how‚Äôs it going", "who are you", "—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏",
            "—è–∫ –∑–≤–∞—Ç–∏", "—è–∫ —Ç–µ–±–µ –∫–ª–∏—á—É—Ç—å", "tell me about yourself", "–ø–æ–≥–æ–≤–æ—Ä–∏–º–æ", "–ø—Ä–æ—Å—Ç–æ —á–∞—Ç"
        ]
        if any(k in message_lower for k in chat_keywords):
            return "chat"

        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ù–û–í–û–ì–û –∑–∞–≤–¥–∞–Ω–Ω—è
        new_keywords = [
            "–≤—ñ–¥–∫—Ä–∏–π", "–∑–Ω–∞–π–¥–∏", "—Å—Ç–≤–æ—Ä–∏", "–ø–æ—á–Ω–∏", "–∑–∞–ø—É—Å—Ç–∏", "–Ω–æ–≤–µ", 
            "–∑–∞–≤–¥–∞–Ω–Ω—è", "–ø—Ä–æ–µ–∫—Ç", "—Ä–æ–±–æ—Ç–∞", "—Å—Ç–∞—Ä—Ç", "init"
        ]
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø
        continue_keywords = [
            "–ø—Ä–æ–¥–æ–≤–∂–∏", "–¥–∞–ª—ñ", "—Ç–∞–∫–æ–∂", "—Ç–µ–ø–µ—Ä", "–ø–æ—Ç—ñ–º", "—â–µ", 
            "–¥–æ–¥–∞–π", "–∑–º—ñ–Ω–∏", "–ø–æ–∫—Ä–∞—â–∏", "–∑—Ä–æ–±–∏", "–≤–∫–ª—é—á–∏", "–Ω–∞—Ç–∏—Å–Ω–∏"
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–≤–Ω–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        if any(word in message_lower for word in new_keywords):
            return "new_session"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–≤–Ω–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        if any(word in message_lower for word in continue_keywords):
            return "continue_session"
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —á–∞—Ç (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ, –Ω—ñ–∂ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–π–≤—ñ —Å–µ—Å—ñ—ó-–∑–∞–≤–¥–∞–Ω–Ω—è)
        return "chat"

    def get_session_name(self, message, session_type):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–º'—è —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        message_lower = message.lower()
        
        if session_type == "chat":
            return "general_chat"
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ —Ç–µ–º–∏
        if any(word in message_lower for word in ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube", "–±—Ä–∞—É–∑–µ—Ä"]):
            return "video_browser"
        elif any(word in message_lower for word in ["–º—É–∑–∏–∫–∞", "–ø—ñ—Å–Ω—è", "–∞—É–¥—ñ–æ"]):
            return "music_player"
        elif any(word in message_lower for word in ["–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–π–ª", "—Ç–µ–∫—Å—Ç"]):
            return "document_editor"
        elif any(word in message_lower for word in ["–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "—Ä–∞—Ö—É–Ω–æ–∫", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]):
            return "calculator"
        elif any(word in message_lower for word in ["—Å–∏—Å—Ç–µ–º–∞", "—Å—Ç–∞—Ç—É—Å", "–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]):
            return "system_monitor"
        else:
            # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–µ—Å—ñ—è
            return "general_assistant"

    def _should_paraphrase(self, data: dict) -> bool:
        """–ß–∏ –≤–º–∏–∫–∞—Ç–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è. –ú–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –ø–æ–ª–µ–º no_paraphrase=true –≤ –∑–∞–ø–∏—Ç—ñ –∞–±–æ –∑–º—ñ–Ω–Ω–æ—é –æ—Ç–æ—á–µ–Ω–Ω—è."""
        try:
            if isinstance(data, dict) and str(data.get("no_paraphrase", "")).lower() in ("1", "true", "yes"):  # —è–≤–Ω–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è
                return False
        except Exception:
            pass
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–º–∏–∫–∞—î–º–æ; –º–æ–∂–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤–∏–º–∫–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ ENV
        return os.getenv("ATLAS_PARAPHRASE", "1") not in ("0", "false", "False")

    def _paraphrase_user_message(self, user_message: str) -> str:
        """–ü–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤—É—î –∑–∞–ø–∏—Ç —É —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏, –∑ —á—ñ—Ç–∫–æ—é –º–µ—Ç–æ—é —Ç–∞ –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.

        –ë–µ–∑ LLM: –ø—Ä–æ—Å—Ç—ñ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º—É—é—Ç—å –¥–∏—Ä–µ–∫—Ç–∏–≤—É –¥–ª—è Goose. –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–æ–¥–∞—î–º–æ –≤–Ω–∏–∑—É.
        """
        msg = (user_message or "").strip()

        # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —à–∞–±–ª–æ–Ω –±–µ–∑ –¥–æ–º–µ–Ω–Ω–æ—ó –ø—Ä–∏–≤'—è–∑–∫–∏
        rules = [
            "–ü—Ä–∞—Ü—é—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, –Ω–µ –ø—Ä–æ—à—É –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—å.",
            "–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏–±—ñ—Ä ‚Äî –ø—Ä–∏–π–º–∞—é –æ–±“ë—Ä—É–Ω—Ç–æ–≤–∞–Ω–µ —ñ –±–µ–∑–ø–µ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ.",
            "–£–Ω–∏–∫–∞—é –∑–∞–π–≤–∏—Ö –ø–∞—É–∑, –¥–æ–≤–æ–¥–∂—É –∑–∞–¥–∞—á—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.",
            "–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –Ω–∞–¥–∞—é —Å—Ç–∏—Å–ª–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ.",
        ]

        steps = [
            "–£—Ç–æ—á–Ω–∏—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ –≤–∏–º–æ–≥–∏ —ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ (Definition of Done).",
            "–†–æ–∑–±–∏—Ç–∏ –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–æ–∫–∏ —ñ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ó—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ.",
            "–ó–∞ –ø–æ—Ç—Ä–µ–±–∏: —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏/—Ä–µ—Å—É—Ä—Å–∏ —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∑–∞–ø–∏—Ç–∞–Ω—å.",
            "–í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫.",
        ]

        rules_lines = "\n".join(f"- {r}" for r in rules)
        steps_lines = "\n".join(f"- {s}" for s in steps)

        directive = (
            "–Ø –±–µ—Ä—É –Ω–∞ —Å–µ–±–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            f"{rules_lines}\n"
            "–ü–ª–∞–Ω –¥—ñ–π:\n"
            f"{steps_lines}\n"
            "–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–µ –¥–ª—è —Ü–∏—Ç—É–≤–∞–Ω–Ω—è —è–∫ —î): " + msg
        )

        return directive

    def _get_stream_timeout(self) -> int | None:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–π–º–∞—É—Ç —Å—Ç—Ä—ñ–º—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∞–±–æ None –¥–ª—è –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–æ–≥–æ.

        –ö–µ—Ä—É—î—Ç—å—Å—è –∑–º—ñ–Ω–Ω–∏–º–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:
          - ATLAS_STREAM_TIMEOUT –∞–±–æ ATLAS_STREAM_TIMEOUT_SECONDS
            * "0", "none", "off", –ø–æ—Ä–æ–∂–Ω—î -> –±–µ–∑ —Ç–∞–π–º–∞—É—Ç—É (None)
            * —ñ–Ω–∞–∫—à–µ -> int —Å–µ–∫—É–Ω–¥
        –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: None (–±–µ–∑ —Ç–∞–π–º–∞—É—Ç—É).
        """
        try:
            raw = (os.getenv("ATLAS_STREAM_TIMEOUT") or os.getenv("ATLAS_STREAM_TIMEOUT_SECONDS") or "").strip()
            if not raw:
                return None
            low = raw.lower()
            if low in ("0", "none", "off", "infinite"):
                return None
            return int(raw)
        except Exception:
            return None
    
    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        try:
            response = json.dumps(data, ensure_ascii=False).encode('utf-8')
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Error sending JSON response: {e}")

    def _format_status_for_ai(self, status):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ AI"""
        try:
            lines = []
            
            # –ü—Ä–æ—Ü–µ—Å–∏
            if status.get("processes"):
                total_proc = sum(p.get("count", 0) for p in status["processes"].values())
                lines.append(f"Processes: {total_proc} Atlas-related running")
                
                for proc_type, proc_info in status["processes"].items():
                    if proc_info.get("count", 0) > 0:
                        lines.append(f"  - {proc_type}: {proc_info['count']} active")
            
            # –°–µ—Ä–≤—ñ—Å–∏
            if status.get("services"):
                lines.append("Services:")
                for service, service_info in status["services"].items():
                    service_status = service_info.get("status", "unknown")
                    lines.append(f"  - {service}: {service_status}")
            
            # –ú–µ—Ä–µ–∂–∞
            if status.get("network", {}).get("connections"):
                conn_count = status["network"]["connections"].get("count", 0)
                lines.append(f"Network: {conn_count} active connections")
            
            # –†–µ—Å—É—Ä—Å–∏
            if status.get("resources"):
                if status["resources"].get("cpu"):
                    cpu_info = status["resources"]["cpu"].get("usage_line", "")
                    if cpu_info:
                        lines.append(f"CPU: {cpu_info}")
                        
                if status["resources"].get("disk"):
                    disk_info = status["resources"]["disk"]
                    if disk_info.get("usage_percent"):
                        lines.append(f"Disk: {disk_info['usage_percent']} used")
            
            return "\n".join(lines) if lines else "System status unavailable"
            
        except Exception as e:
            return f"Status formatting error: {str(e)}"

    def handle_tts(self):
        """–û–±—Ä–æ–±–∫–∞ TTS –∑–∞–ø–∏—Ç—ñ–≤"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            text = data.get("text", "")
            if not text:
                self.send_json_response({"error": "Text is required"}, 400)
                return
            
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Request: {text[:30]}...")
            
            success = self.send_tts_request(text)
            if success:
                self.send_json_response({"status": "success"})
            else:
                self.send_json_response({"error": "TTS service unavailable"}, 503)
                
        except Exception as e:
            logger.error(f"TTS error: {e}")
            self.send_json_response({"error": str(e)}, 500)

    def handle_analyze_prompt(self):
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –æ–∫—Ä–µ–º–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É
        POST /api/atlas/analyze-prompt
        Body: {"prompt": "—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"}
        """
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            prompt = data.get("prompt", "")
            if not prompt:
                self.send_json_response({"error": "Prompt is required"}, 400)
                return
            
            if hasattr(self.server, 'session_manager'):
                sm = self.server.session_manager
                
                # –ü—Ä–æ–≤–æ–¥–∏–º–æ –∞–Ω–∞–ª—ñ–∑
                analysis = sm.analyze_user_mode_preference(prompt)
                
                response_data = {
                    "prompt": prompt,
                    "analysis": analysis,
                    "system_info": {
                        "current_default": "http_api" if sm.use_http_api else "cli",
                        "intelligent_switching": "enabled"
                    },
                    "timestamp": datetime.now().isoformat()
                }
                
                self.send_json_response(response_data)
                
            else:
                self.send_json_response({"error": "Session manager not available"}, 503)
                
        except Exception as e:
            logger.error(f"Prompt analysis error: {e}")
            self.send_json_response({"error": str(e)}, 500)

    

    def send_to_atlas_core(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Atlas Core"""
        try:
            response = requests.post(
                f"{self.atlas_core_url}/chat",
                json={"message": message},
                timeout=60  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 1 —Ö–≤–∏–ª–∏–Ω–∏
            )
            if response.status_code == 200:
                data = response.json()
                return data.get("response", data.get("message"))
        except Exception as e:
            logger.debug(f"Atlas Core request failed: {e}")
        return None

    def send_tts_request(self, text):
        """TTS –∑–∞–ø–∏—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = requests.post(
                "http://localhost:3000/tts",
                json={"text": text, "language": "uk"},
                timeout=10
            )
            return response.status_code == 200
        except Exception as e:
            logger.debug(f"TTS request failed: {e}")
        return False

    def send_tts_to_atlas(self, text):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ TTS –∑–∞–ø–∏—Ç—É –¥–æ Atlas Core"""
        try:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Speaking: {text[:20]}...")
            
            # Atlas Core –º–∞—î /tts endpoint
            response = requests.post(
                f"{self.atlas_core_url}/tts",
                json={"text": text, "rate": 200},
                timeout=10
            )
            
            if response.status_code == 200:
                if self.live_streamer:
                    self.live_streamer._add_log("[TTS] Success", "info")
                return True
            else:
                if self.live_streamer:
                    self.live_streamer._add_log(f"[TTS] Error {response.status_code}", "warning")
                return False
                
        except Exception as e:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Failed: {str(e)[:30]}", "error")
            logger.debug(f"TTS to Atlas failed: {e}")
        return False

    def check_service(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            if url.endswith(':3000'):
                # Goose —Å–µ—Ä–≤–µ—Ä –º–∞—î /status –µ–Ω–¥–ø–æ—ñ–Ω—Ç
                response = requests.get(f"{url}/status", timeout=2)
            elif url.endswith(':8000'):
                # Atlas Core –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–º—ñ—Å—Ç—å /health
                response = requests.get(url, timeout=2)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /health
                response = requests.get(f"{url}/health", timeout=2)
            return response.status_code < 500
        except Exception as e:
            logger.debug(f"Service check failed for {url}: {e}")
            return False

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    port = 8080
    server_address = ('', port)
    
    # –ó–º—ñ–Ω–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.chdir(Path(__file__).parent)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –¥–æ–ª–≥–∏–µ SSE-–∑–∞–ø—Ä–æ—Å—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥—Ä—É–≥–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    httpd = ThreadingHTTPServer(server_address, AtlasMinimalHandler)
    
    print("üöÄ Starting Atlas Minimal Frontend Server...")
    print(f"üì± Interface: http://localhost:{port}")
    print("üíæ 3D Viewer: Background layer")
    print("üìã MCP Logs: Left panel")
    print("üí¨ Chat: Right panel")
    print(f"üéØ Server running on port {port}")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopping...")
        httpd.shutdown()
        print("üõë Server stopped")

if __name__ == "__main__":
    main()
