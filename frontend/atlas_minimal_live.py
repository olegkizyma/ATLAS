#!/usr/bin/env python3
"""
Atlas Minimal Frontend Server - Simplified Version
–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ö–∞–∫–µ—Ä—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Atlas
–û–ù–û–í–õ–ï–ù–û: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Atlas Core (Atlas LLM1 + Goose + –ì—Ä—ñ—à–∞ LLM3)
"""

import json
import logging
import time
import subprocess
import re
import asyncio
import aiohttp
import os
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
import urllib.parse
import requests

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
def load_env():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É"""
    env_path = Path(__file__).parent / ".env"
    if env_path.exists():
        print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é .env –∑ {env_path}")
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_env()

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API –∫–ª—é—á—ñ
print(f"üîë Gemini API: {'‚úÖ' if os.getenv('GEMINI_API_KEY') else '‚ùå'}")
print(f"üîë Mistral API: {'‚úÖ' if os.getenv('MISTRAL_API_KEY') else '‚ùå'}")

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Atlas Core
try:
    from atlas_core import get_atlas_core
    ATLAS_CORE_AVAILABLE = True
    logger = logging.getLogger(__name__)
    logger.info("üöÄ Atlas Core —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π!")
except ImportError as e:
    ATLAS_CORE_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning(f"‚ö†Ô∏è Atlas Core –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º—É legacy Goose —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

import json
import logging
import time
import subprocess
import threading
import queue
import re
from datetime import datetime
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler
import urllib.parse
import requests
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LiveLogStreamer:
    """–ö–ª–∞—Å –¥–ª—è —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –∂–∏–≤–∏—Ö –ª–æ–≥—ñ–≤ —Å–∏—Å—Ç–µ–º–∏"""
    
    def __init__(self):
        self.log_queue = queue.Queue()
        self.is_running = False
        # –ß–∏—Ç–∞—î–º–æ URL –∑ env –∞–±–æ fallback –Ω–∞ localhost
        self.atlas_core_url = os.getenv("ATLAS_CORE_URL", "http://localhost:3000")  # Goose —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
        
        # –°—Ç–∞–Ω –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ
        self.system_status = {
            "processes": {},
            "services": {},
            "network": {},
            "resources": {},
            "timestamp": None
        }
        
    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É –ª–æ–≥—ñ–≤"""
        self.is_running = True
        threading.Thread(target=self._system_monitor, daemon=True).start()
        threading.Thread(target=self._atlas_monitor, daemon=True).start()
        print("üü¢ Live log streaming started")
        
    def stop_streaming(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Å—Ç—Ä—ñ–º—ñ–Ω–≥—É"""
        self.is_running = False
        print("üî¥ Live log streaming stopped")
        
    def get_logs(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ª–æ–≥—ñ–≤"""
        logs = []
        while not self.log_queue.empty():
            try:
                logs.append(self.log_queue.get_nowait())
            except queue.Empty:
                break
        return logs
    
    def get_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        return self.system_status.copy()
        
    def update_system_status(self, category, key, value):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        self.system_status[category][key] = value
        self.system_status["timestamp"] = datetime.now().isoformat()
        
    def _add_log(self, message, level="info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É –¥–æ —á–µ—Ä–≥–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        if self.log_queue.qsize() < 200:  # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —á–µ—Ä–≥–∏
            self.log_queue.put({
                "message": log_entry,
                "level": level,
                "timestamp": timestamp
            })
            
    def _system_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤"""
        while self.is_running:
            try:
                # –ü—Ä–æ—Ü–µ—Å–∏ Atlas
                result = subprocess.run(
                    ["ps", "aux"], 
                    capture_output=True, 
                    text=True
                )
                
                if result.returncode == 0:
                    lines = result.stdout.split('\n')
                    
                    # –ü–æ—à—É–∫ –ø—Ä–æ—Ü–µ—Å—ñ–≤ Atlas
                    atlas_processes = []
                    goose_processes = []
                    mcp_processes = []
                    python_processes = []
                    
                    for line in lines:
                        if line.strip() and 'grep' not in line:
                            if 'atlas' in line.lower():
                                atlas_processes.append(self._parse_process_line(line))
                            elif 'goose' in line.lower():
                                goose_processes.append(self._parse_process_line(line))
                            elif 'mcp' in line.lower():
                                mcp_processes.append(self._parse_process_line(line))
                            elif 'python' in line and ('atlas' in line or 'mcp' in line):
                                python_processes.append(self._parse_process_line(line))
                    
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å—ñ–≤
                    self.update_system_status("processes", "atlas", {
                        "count": len(atlas_processes),
                        "details": atlas_processes
                    })
                    self.update_system_status("processes", "goose", {
                        "count": len(goose_processes), 
                        "details": goose_processes
                    })
                    self.update_system_status("processes", "mcp", {
                        "count": len(mcp_processes),
                        "details": mcp_processes
                    })
                    self.update_system_status("processes", "python", {
                        "count": len(python_processes),
                        "details": python_processes
                    })
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                    total_processes = len(atlas_processes) + len(goose_processes) + len(mcp_processes)
                    if total_processes > 0:
                        self._add_log(f"[SYSTEM] {total_processes} Atlas-related processes active")
                
                # –ú–µ—Ä–µ–∂–µ–≤—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è  
                try:
                    result = subprocess.run(
                        ["lsof", "-i", ":3000", "-i", ":8080"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        lines = result.stdout.split('\n')[1:]  # Skip header
                        active_connections = []
                        for line in lines:
                            if line.strip():
                                active_connections.append(self._parse_network_line(line))
                        
                        self.update_system_status("network", "connections", {
                            "count": len(active_connections),
                            "details": active_connections
                        })
                        
                        if active_connections:
                            self._add_log(f"[NET] {len(active_connections)} active connections on Atlas ports")
                except Exception as e:
                    self._add_log(f"[NET] Network check failed: {str(e)[:30]}...", "warning")
                
                # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
                try:
                    # CPU —Ç–∞ Memory
                    result = subprocess.run(
                        ["top", "-l", "1", "-n", "0"], 
                        capture_output=True, 
                        text=True
                    )
                    if result.returncode == 0:
                        cpu_info = self._parse_cpu_info(result.stdout)
                        self.update_system_status("resources", "cpu", cpu_info)
                        
                        # Disk space
                        result = subprocess.run(
                            ["df", "-h", "/"], 
                            capture_output=True, 
                            text=True
                        )
                        if result.returncode == 0:
                            disk_info = self._parse_disk_info(result.stdout)
                            self.update_system_status("resources", "disk", disk_info)
                            
                except Exception as e:
                    self._add_log(f"[RESOURCES] Resource check failed: {str(e)[:30]}...", "warning")
                    
                time.sleep(3)
                
            except Exception as e:
                self._add_log(f"[ERROR] System monitor: {str(e)[:30]}...", "error")
                time.sleep(5)
            
    def _atlas_monitor(self):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Atlas Core"""
        while self.is_running:
            try:
                response = requests.get(f"{self.atlas_core_url}/", timeout=3)
                if response.status_code == 200:
                    self._add_log("[ATLAS] Core online")
                    self.update_system_status("services", "atlas_core", {
                        "status": "online",
                        "status_code": 200,
                        "last_check": datetime.now().isoformat()
                    })
                else:
                    self._add_log(f"[ATLAS] Core status: {response.status_code}", "warning")
                    self.update_system_status("services", "atlas_core", {
                        "status": "warning", 
                        "status_code": response.status_code,
                        "last_check": datetime.now().isoformat()
                    })
                    
            except requests.exceptions.ConnectionError:
                self._add_log("[ATLAS] Core offline", "warning")
                self.update_system_status("services", "atlas_core", {
                    "status": "offline",
                    "error": "Connection refused",
                    "last_check": datetime.now().isoformat()
                })
            except Exception as e:
                self._add_log(f"[ATLAS] Error: {str(e)[:40]}...", "error")
                self.update_system_status("services", "atlas_core", {
                    "status": "error",
                    "error": str(e)[:100],
                    "last_check": datetime.now().isoformat()
                })
                
            time.sleep(6)
    
    def _parse_process_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –∑ ps aux"""
        try:
            parts = line.split()
            if len(parts) >= 11:
                return {
                    "user": parts[0],
                    "pid": parts[1],
                    "cpu": parts[2],
                    "mem": parts[3],
                    "command": " ".join(parts[10:])[:50] + "..." if len(" ".join(parts[10:])) > 50 else " ".join(parts[10:])
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_network_line(self, line):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä—è–¥–∫–∞ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ lsof"""
        try:
            parts = line.split()
            if len(parts) >= 9:
                return {
                    "command": parts[0],
                    "pid": parts[1],
                    "user": parts[2],
                    "type": parts[4],
                    "node": parts[7],
                    "name": parts[8] if len(parts) > 8 else ""
                }
        except:
            return {"raw": line[:50] + "..." if len(line) > 50 else line}
        return {}
    
    def _parse_cpu_info(self, top_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ CPU –∑ top"""
        try:
            lines = top_output.split('\n')
            for line in lines:
                if 'CPU usage' in line:
                    # –ü—Ä–∏–∫–ª–∞–¥: CPU usage: 12.34% user, 5.67% sys, 82.01% idle
                    parts = line.split(':')[1] if ':' in line else line
                    return {"usage_line": parts.strip()[:100]}
            return {"usage_line": "CPU info not found"}
        except:
            return {"usage_line": "CPU parsing failed"}
    
    def _parse_disk_info(self, df_output):
        """–ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∏—Å–∫ –∑ df"""
        try:
            lines = df_output.split('\n')
            if len(lines) > 1:
                parts = lines[1].split()
                if len(parts) >= 5:
                    return {
                        "filesystem": parts[0],
                        "size": parts[1],
                        "used": parts[2],
                        "available": parts[3],
                        "usage_percent": parts[4]
                    }
            return {"info": "Disk parsing failed"}
        except:
            return {"info": "Disk info unavailable"}

class AtlasMinimalHandler(SimpleHTTPRequestHandler):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è Atlas Minimal Interface"""
    
    def __init__(self, *args, **kwargs):
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Goose API
        self.goose_api_url = os.getenv("GOOSE_API_URL", "http://localhost:3001")
        self.session_endpoint = f"{self.goose_api_url}/session"
        self.reply_endpoint = f"{self.goose_api_url}/reply"
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Atlas Core
        self.atlas_core_url = "http://localhost:3000"
        
        super().__init__(*args, **kwargs)
    
    def send_goose_request(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Goose API"""
        try:
            url = f"{self.goose_api_url}{endpoint}"
            
            if method == "POST":
                response = requests.post(url, json=data, timeout=30)
            elif method == "PUT":
                response = requests.put(url, json=data, timeout=30)
            else:
                response = requests.get(url, timeout=30)
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": f"HTTP {response.status_code}", "response": response.text}
                
        except requests.exceptions.RequestException as e:
            return {"success": False, "error": str(e)}
    
    async def send_goose_request_async(self, endpoint: str, method: str = "GET", data: dict = None) -> dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Goose API"""
        try:
            url = f"{self.goose_api_url}{endpoint}"
            
            async with aiohttp.ClientSession() as session:
                if method == "POST":
                    async with session.post(url, json=data) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                elif method == "PUT":
                    async with session.put(url, json=data) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                else:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            return {"success": True, "data": data}
                        else:
                            text = await response.text()
                            return {"success": False, "error": f"HTTP {response.status}", "response": text}
                            
        except Exception as e:
            return {"success": False, "error": str(e)}

    @classmethod
    def set_live_streamer(cls, streamer):
        cls.live_streamer = streamer

    def end_headers(self):
        """–î–æ–¥–∞—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_OPTIONS(self):
        """–û–±—Ä–æ–±–∫–∞ preflight CORS –∑–∞–ø–∏—Ç—ñ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        """–û–±—Ä–æ–±–∫–∞ GET –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/" or self.path == "/index.html":
            self.serve_frontend()
        elif self.path == "/DamagedHelmet.glb":
            self.serve_3d_model()
        elif self.path == "/favicon.ico":
            self.serve_favicon()
        elif self.path.startswith("/logs"):
            self.serve_live_logs()
        elif self.path == "/api/status":
            self.serve_system_status()
        elif self.path == "/api/atlas/status":
            self.serve_atlas_core_status()
        elif self.path == "/api/atlas/sessions":
            self.serve_atlas_sessions()
        elif self.path == "/api/goose/sessions":
            self.serve_goose_sessions()
        else:
            super().do_GET()

    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/api/chat":
            self.handle_chat()
        else:
            self.send_error(404, "Not Found")

    def do_POST(self):
        """–û–±—Ä–æ–±–∫–∞ POST –∑–∞–ø–∏—Ç—ñ–≤"""
        if self.path == "/api/chat":
            self.handle_chat()
        elif self.path == "/api/tts/speak":
            self.handle_tts()
        else:
            self.send_error(404, "Not Found")

    def serve_frontend(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
        try:
            html_path = Path(__file__).parent / "index.html"
            with open(html_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Content-Length', str(len(content.encode('utf-8'))))
            self.end_headers()
            self.wfile.write(content.encode('utf-8'))
        except Exception as e:
            logger.error(f"Error serving frontend: {e}")
            self.send_error(500, str(e))

    def serve_3d_model(self):
        """3D –º–æ–¥–µ–ª—å —à–æ–ª–æ–º–∞"""
        try:
            model_path = Path(__file__).parent / "DamagedHelmet.glb"
            if model_path.exists():
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = model_path.stat().st_size
                
                self.send_response(200)
                self.send_header('Content-type', 'application/octet-stream')
                self.send_header('Content-Length', str(file_size))
                self.send_header('Accept-Ranges', 'bytes')
                self.end_headers()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —á–∞—Å—Ç–∏–Ω–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
                with open(model_path, 'rb') as f:
                    while True:
                        chunk = f.read(8192)  # 8KB –∑–∞ —Ä–∞–∑
                        if not chunk:
                            break
                        try:
                            self.wfile.write(chunk)
                            self.wfile.flush()
                        except (BrokenPipeError, ConnectionResetError):
                            # –ö–ª—ñ—î–Ω—Ç —Ä–æ–∑—ñ—Ä–≤–∞–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è
                            break
            else:
                self.send_error(404, "3D model not found")
        except Exception as e:
            logger.error(f"Error serving 3D model: {e}")
            try:
                self.send_error(500, str(e))
            except:
                # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                pass

    def serve_favicon(self):
        """–Ü–∫–æ–Ω–∫–∞ —Å–∞–π—Ç—É"""
        try:
            favicon_path = Path(__file__).parent / "favicon.ico"
            if favicon_path.exists():
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
                file_size = favicon_path.stat().st_size
                
                self.send_response(200)
                self.send_header('Content-type', 'image/x-icon')
                self.send_header('Content-Length', str(file_size))
                self.end_headers()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª —á–∞—Å—Ç–∏–Ω–∞–º–∏
                with open(favicon_path, 'rb') as f:
                    while True:
                        chunk = f.read(1024)  # 1KB –∑–∞ —Ä–∞–∑
                        if not chunk:
                            break
                        try:
                            self.wfile.write(chunk)
                            self.wfile.flush()
                        except (BrokenPipeError, ConnectionResetError):
                            # –ö–ª—ñ—î–Ω—Ç —Ä–æ–∑—ñ—Ä–≤–∞–≤ –∑'—î–¥–Ω–∞–Ω–Ω—è
                            break
            else:
                # –Ø–∫—â–æ favicon.ico –Ω–µ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π 1x1 –ø—ñ–∫—Å–µ–ª—å
                self.send_response(200)
                self.send_header('Content-type', 'image/x-icon')
                self.send_header('Content-Length', '0')
                self.end_headers()
        except Exception as e:
            logger.error(f"Error serving favicon: {e}")
            try:
                self.send_error(500, str(e))
            except:
                # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                pass

    def serve_health(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        try:
            services = {
                "atlas_minimal": True,
                "atlas_core": "unknown",  # –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
                "live_logs": self.live_streamer is not None,
                "timestamp": datetime.now().isoformat()
            }
            
            response = json.dumps(services).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Health check error: {e}")
            self.send_error(500, str(e))

    def serve_live_logs(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ Goose –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–µ—Å—ñ—ó"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            parsed_path = urllib.parse.urlparse(self.path)
            query_params = urllib.parse.parse_qs(parsed_path.query)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ limit –ø–∞—Ä–∞–º–µ—Ç—Ä (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
            limit = int(query_params.get('limit', ['50'])[0])
            
            logs = []
            
            # –ß–∏—Ç–∞—î–º–æ –ª–æ–≥–∏ –∑ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–æ—ó —Å–µ—Å—ñ—ó Goose
            try:
                sessions_dir = Path.home() / ".local/share/goose/sessions"
                if sessions_dir.exists():
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π .jsonl —Ñ–∞–π–ª
                    jsonl_files = list(sessions_dir.glob("*.jsonl"))
                    if jsonl_files:
                        latest_session = max(jsonl_files, key=lambda f: f.stat().st_mtime)
                        
                        # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ñ–∞–π–ª—É
                        with open(latest_session, 'r', encoding='utf-8') as f:
                            lines = f.readlines()
                            
                        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ N —Ä—è–¥–∫—ñ–≤
                        recent_lines = lines[-min(limit, len(lines)):]
                        
                        for line in recent_lines:
                            line = line.strip()
                            if line:
                                try:
                                    # –ü—Ä–æ–±—É—î–º–æ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
                                    data = json.loads(line)
                                    
                                    # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                                    if "role" in data and "content" in data:
                                        role = data["role"]
                                        content = str(data.get("content", ""))
                                        
                                        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                        if role == "user":
                                            message = f"üîµ USER: {content[:200]}..."
                                        elif role == "assistant":
                                            message = f"ü§ñ GOOSE: {content[:200]}..."
                                        else:
                                            message = f"üìä {role.upper()}: {content[:200]}..."
                                            
                                        logs.append({
                                            "message": message,
                                            "level": "info",
                                            "timestamp": datetime.now().strftime("%H:%M:%S"),
                                            "source": "goose_session"
                                        })
                                        
                                    elif "description" in data:
                                        # –û–ø–∏—Å –∑–∞–¥–∞—á—ñ
                                        description = data["description"]
                                        message = f"üìã TASK: {description}"
                                        logs.append({
                                            "message": message,
                                            "level": "info", 
                                            "timestamp": datetime.now().strftime("%H:%M:%S"),
                                            "source": "goose_task"
                                        })
                                        
                                except json.JSONDecodeError:
                                    # –Ø–∫—â–æ –Ω–µ JSON, –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
                                    logs.append({
                                        "message": f"üìÑ RAW: {line[:200]}...",
                                        "level": "debug",
                                        "timestamp": datetime.now().strftime("%H:%M:%S"),
                                        "source": "goose_raw"
                                    })
                                    
            except Exception as e:
                logs.append({
                    "message": f"‚ùå Error reading Goose sessions: {e}",
                    "level": "error",
                    "timestamp": datetime.now().strftime("%H:%M:%S"),
                    "source": "atlas_frontend"
                })
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
            logs.append({
                "message": f"üîç Monitoring Goose sessions in real-time...",
                "level": "info",
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "source": "atlas_monitor"
            })
            
            response = json.dumps({"logs": logs}).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Live logs error: {e}")
            try:
                self.send_error(500, str(e))
            except:
                pass

    def serve_log_stream(self):
        """Server-Sent Events —Å—Ç—Ä—ñ–º –ª–æ–≥—ñ–≤"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
            self.send_response(200)
            self.send_header('Content-Type', 'text/event-stream')
            self.send_header('Cache-Control', 'no-cache')
            self.send_header('Connection', 'keep-alive')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            status_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO", 
                "source": "atlas_frontend",
                "message": "Log stream connected successfully"
            }
            self.wfile.write(f"data: {json.dumps(status_data)}\n\n".encode())
            
            # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ –∑ /tmp/goose.log (—è–∫—â–æ —î)
            try:
                if Path("/tmp/goose.log").exists():
                    with open("/tmp/goose.log", 'r') as f:
                        lines = f.readlines()
                        for line in lines[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤
                            if line.strip():
                                # –ü–∞—Ä—Å–∏–º–æ –ª–æ–≥ –ª—ñ–Ω—ñ—é (–≤–∏–¥–∞–ª—è—î –¥–∞—Ç–∏ —Ç–∞ –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ —Ä—ñ–≤–µ–Ω—å + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
                                parsed_line = self._parse_log_line(line.strip())
                                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ None –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä—è–¥–∫–∏ "at crates/...")
                                if parsed_line is not None:
                                    event_data = {
                                        "timestamp": datetime.now().isoformat(),
                                        "level": "DEBUG",  # –¢—å–º—è–Ω—ñ—à–∏–π —Ä—ñ–≤–µ–Ω—å
                                        "source": "goose",
                                        "message": parsed_line
                                    }
                                    self.wfile.write(f"data: {json.dumps(event_data)}\n\n".encode())
                                    self.wfile.flush()  # –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
            except Exception as e:
                logger.error(f"Error reading goose logs: {e}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫—ñ–Ω—Ü–µ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            end_data = {
                "timestamp": datetime.now().isoformat(),
                "level": "INFO",
                "source": "atlas_frontend", 
                "message": "Initial log data sent"
            }
            self.wfile.write(f"data: {json.dumps(end_data)}\n\n".encode())
            self.wfile.flush()
            
        except Exception as e:
            logger.error(f"Log stream error: {e}")
            # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ send_error –ø—ñ—Å–ª—è send_response
            return

    def serve_system_status(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        try:
            status = {
                "services": {
                    "atlas_frontend": "running",
                    "atlas_core_available": ATLAS_CORE_AVAILABLE,
                    "timestamp": datetime.now().isoformat()
                },
                "processes": {
                    "atlas": {"count": 1, "status": "active"}
                }
            }
            
            response = json.dumps(status).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"System status error: {e}")
            self.send_error(500, str(e))

    def serve_atlas_core_status(self):
        """–°—Ç–∞—Ç—É—Å Atlas Core —Å–∏—Å—Ç–µ–º–∏"""
        try:
            if ATLAS_CORE_AVAILABLE:
                core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                status = core.get_system_status()
                health = core.health_check()
                
                response_data = {
                    "atlas_core": {
                        "available": True,
                        "status": status,
                        "health": health
                    },
                    "timestamp": datetime.now().isoformat()
                }
            else:
                response_data = {
                    "atlas_core": {
                        "available": False,
                        "error": "Atlas Core –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π",
                        "legacy_mode": True
                    },
                    "timestamp": datetime.now().isoformat()
                }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Atlas Core status error: {e}")
            error_response = {
                "atlas_core": {
                    "available": False,
                    "error": str(e)
                },
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_atlas_sessions(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Å—ñ–π Goose"""
        try:
            if ATLAS_CORE_AVAILABLE:
                core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                sessions = core.get_available_sessions()
                
                response_data = {
                    "sessions": sessions,
                    "count": len(sessions),
                    "atlas_core": True,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                response_data = {
                    "sessions": [],
                    "count": 0,
                    "atlas_core": False,
                    "error": "Atlas Core –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                    "timestamp": datetime.now().isoformat()
                }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Atlas sessions error: {e}")
            error_response = {
                "sessions": [],
                "error": str(e),
                "atlas_core": False,
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def serve_goose_sessions(self):
        """–°–ø–∏—Å–æ–∫ —Å–µ—Å—ñ–π Goose –∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"""
        try:
            sessions_dir = Path.home() / ".local/share/goose/sessions"
            sessions = []
            
            if sessions_dir.exists():
                jsonl_files = list(sessions_dir.glob("*.jsonl"))
                
                for session_file in sorted(jsonl_files, key=lambda f: f.stat().st_mtime, reverse=True)[:10]:
                    stat = session_file.stat()
                    size_kb = round(stat.st_size / 1024, 1)
                    
                    # –ß–∏—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –æ–ø–∏—Å—É
                    description = "Unknown task"
                    try:
                        with open(session_file, 'r', encoding='utf-8') as f:
                            first_line = f.readline().strip()
                            if first_line:
                                data = json.loads(first_line)
                                description = data.get("description", "Unknown task")
                    except:
                        pass
                    
                    sessions.append({
                        "name": session_file.name,
                        "description": description,
                        "size_kb": size_kb,
                        "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        "path": str(session_file)
                    })
            
            response_data = {
                "sessions": sessions,
                "count": len(sessions),
                "sessions_dir": str(sessions_dir),
                "timestamp": datetime.now().isoformat()
            }
            
            response = json.dumps(response_data, ensure_ascii=False, indent=2).encode('utf-8')
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            
        except Exception as e:
            logger.error(f"Goose sessions error: {e}")
            error_response = {
                "sessions": [],
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            response = json.dumps(error_response, ensure_ascii=False).encode('utf-8')
            self.send_response(500)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)

    def handle_chat(self):
        """–û–±—Ä–æ–±–∫–∞ —á–∞—Ç –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ Atlas Core (Atlas LLM1 + Goose + –ì—Ä—ñ—à–∞ LLM3)"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —è–∫ "message" —Ç–∞–∫ —ñ "prompt"
            user_message = data.get("message", data.get("prompt", ""))
            if not user_message:
                self.send_json_response({"error": "Message is required"}, 400)
                return
            
            # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_context = {
                "timestamp": datetime.now().isoformat(),
                "session_hint": data.get("session_type"),
                "client_ip": self.client_address[0],
                "user_agent": self.headers.get('User-Agent', 'unknown')
            }
            
            if ATLAS_CORE_AVAILABLE:
                # === –ù–û–í–ò–ô –®–õ–Ø–•: Atlas Core ===
                logger.info(f"üß† Atlas Core: –û–±—Ä–æ–±–ª—è—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_message[:100]}...")
                
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä Atlas Core
                    core = get_atlas_core("/Users/dev/Documents/GitHub/ATLAS/goose")
                    
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤—Å—ñ —Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
                    # –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ async –º–µ—Ç–æ–¥ –≤ sync –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    try:
                        result = loop.run_until_complete(
                            core.process_user_message(user_message, user_context)
                        )
                    finally:
                        loop.close()
                    
                    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Atlas Core
                    if result.get("success"):
                        response_data = {
                            "response": result.get("response", result.get("atlas_response", "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")),
                            "response_type": result.get("response_type", "unknown"),
                            "atlas_core": True,
                            "processing_time": result.get("processing_time", 0),
                            "intent": result.get("intent_analysis", {}).get("intent", "unknown"),
                            "confidence": result.get("intent_analysis", {}).get("confidence", 0.0)
                        }
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é —è–∫—â–æ —î
                        if "session_strategy" in result:
                            response_data["session_info"] = {
                                "strategy": result["session_strategy"].get("strategy"),
                                "session_name": result["session_strategy"].get("session_name")
                            }
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–µ–∑–ø–µ–∫—É —è–∫—â–æ —î
                        if "security_analysis" in result:
                            response_data["security"] = {
                                "risk_level": result["security_analysis"].get("risk_level"),
                                "validated": True
                            }
                        
                        logger.info(f"‚úÖ Atlas Core: –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ ({result.get('response_type')})")
                        self.send_json_response(response_data)
                        
                    else:
                        # –ü–æ–º–∏–ª–∫–∞ –≤ Atlas Core
                        error_message = result.get("error", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core")
                        
                        if result.get("response_type") == "security_block":
                            # –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏
                            response_data = {
                                "response": "üõ°Ô∏è –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏ –ì—Ä—ñ—à–∞",
                                "error": error_message,
                                "blocked": True,
                                "atlas_core": True,
                                "security_analysis": result.get("security_analysis", {})
                            }
                            logger.warning(f"üõ°Ô∏è –ì—Ä—ñ—à–∞: –ó–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É - {error_message}")
                        else:
                            # –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                            response_data = {
                                "response": f"–ü–æ–º–∏–ª–∫–∞ Atlas Core: {error_message}",
                                "error": error_message,
                                "atlas_core": True,
                                "fallback_available": True
                            }
                            logger.error(f"‚ùå Atlas Core: {error_message}")
                        
                        self.send_json_response(response_data, 500)
                        
                except Exception as atlas_error:
                    logger.error(f"üí• Atlas Core Exception: {atlas_error}")
                    # Fallback –¥–æ legacy —Ä–µ–∂–∏–º—É
                    self.handle_chat_legacy(user_message, data, user_context, str(atlas_error))
            
            else:
                # === –°–¢–ê–†–ò–ô –®–õ–Ø–•: Legacy Goose ===
                logger.info("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é legacy Goose —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é")
                self.handle_chat_legacy(user_message, data, user_context)
                
        except Exception as e:
            logger.error(f"Fatal error in handle_chat: {e}")
            self.send_json_response({
                "response": f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
                "error": str(e),
                "atlas_core": False
            }, 500)

    def handle_chat_legacy(self, user_message: str, data: dict, user_context: dict, atlas_error: str = None):
        """Legacy –æ–±—Ä–æ–±–∫–∞ —á–∞—Ç—É —á–µ—Ä–µ–∑ HTTP API Goose –∑–∞–º—ñ—Å—Ç—å CLI"""
        try:
            logger.info(f"üîÑ Legacy: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose HTTP API: {user_message[:100]}...")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–µ—Å—ñ—ó (legacy –ª–æ–≥—ñ–∫–∞)
            session_type = self.determine_session_type(user_message, data.get("session_type"))
            session_name = self.get_session_name(user_message, session_type)
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è HTTP API –∑–∞–º—ñ—Å—Ç—å CLI
            try:
                if session_type == "new_session":
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ API
                    session_result = self.send_goose_request("/session", "POST", {"name": session_name})
                    if not session_result["success"]:
                        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é: {session_result['error']}")
                    
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    reply_result = self.send_goose_request("/reply", "POST", {
                        "message": user_message,
                        "session_id": session_name
                    })
                    
                elif session_type == "continue_session":
                    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é —á–µ—Ä–µ–∑ API
                    session_result = self.send_goose_request("/session", "PUT", {"name": session_name})
                    if not session_result["success"]:
                        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é: {session_result['error']}")
                    
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    reply_result = self.send_goose_request("/reply", "POST", {
                        "message": user_message,
                        "session_id": session_name
                    })
                    
                else:
                    # –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —Å–µ—Å—ñ—ó
                    reply_result = self.send_goose_request("/reply", "POST", {
                        "message": user_message
                    })
                
                # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if reply_result["success"]:
                    response_data = reply_result["data"]
                    answer = response_data.get("response", response_data.get("message", "–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞"))
                    
                    result_data = {
                        "response": answer,
                        "session_name": session_name,
                        "session_type": session_type,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }
                    
                    # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                    if atlas_error:
                        result_data["atlas_fallback"] = True
                        result_data["atlas_error"] = atlas_error
                    
                    logger.info(f"‚úÖ Legacy API: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                    self.send_json_response(result_data)
                    
                else:
                    error_msg = reply_result.get("error", "Goose API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                    logger.error(f"‚ùå Legacy API: {error_msg}")
                    self.send_json_response({
                        "response": f"–ü–æ–º–∏–ª–∫–∞ Goose API: {error_msg}",
                        "error": error_msg,
                        "atlas_core": False,
                        "legacy_mode": True,
                        "api_mode": True
                    }, 500)
                    
            except Exception as api_error:
                logger.warning(f"‚ö†Ô∏è HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, fallback –¥–æ CLI: {api_error}")
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ CLI –º–µ—Ç–æ–¥—É
                self._handle_chat_cli_fallback(user_message, data, session_type, session_name, atlas_error)
                
        except Exception as e:
            logger.error(f"üí• Legacy Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ legacy —Ä–µ–∂–∏–º—É: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True
            }, 500)

    def _handle_chat_cli_fallback(self, user_message: str, data: dict, session_type: str, session_name: str, atlas_error: str = None):
        """Fallback –¥–æ CLI –º–µ—Ç–æ–¥—É, —è–∫—â–æ HTTP API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        try:
            logger.info(f"üîÑ CLI Fallback: –û–±—Ä–æ–±–ª—è—é —á–µ—Ä–µ–∑ Goose CLI: {user_message[:100]}...")
            
            # –í–∏–∫–ª–∏–∫ Goose CLI –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é
            goose_path = "/Users/dev/Documents/GitHub/ATLAS/goose/target/release/goose"
            
            if session_type == "new_session":
                # –ù–æ–≤–∞ —ñ–º–µ–Ω–æ–≤–∞–Ω–∞ —Å–µ—Å—ñ—è
                cmd = [goose_path, "session", "--name", session_name]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
                
            elif session_type == "continue_session":
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é
                cmd = [goose_path, "session", "--name", session_name, "--resume"]
                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout, stderr = process.communicate(input=f"{user_message}\nexit\n", timeout=300)
            else:
                # Fallback –¥–æ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥—É
                cmd = [goose_path, "run", "-t", user_message, "--quiet"]
                result = subprocess.run(
                    cmd,
                    capture_output=True, 
                    text=True, 
                    timeout=300,
                    cwd="/Users/dev/Documents/GitHub/ATLAS/goose",
                    env=self._get_goose_env()
                )
                stdout = result.stdout
                stderr = result.stderr
            
            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if stdout:
                answer = self._clean_goose_output(stdout)
                
                response_data = {
                    "response": answer,
                    "session_name": session_name,
                    "session_type": session_type,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }
                
                # –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ Atlas Core, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                if atlas_error:
                    response_data["atlas_fallback"] = True
                    response_data["atlas_error"] = atlas_error
                
                logger.info(f"‚úÖ CLI Fallback: –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ ({session_type})")
                self.send_json_response(response_data)
            else:
                error_msg = stderr or "Goose –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                logger.error(f"‚ùå CLI Fallback: {error_msg}")
                self.send_json_response({
                    "response": f"–ü–æ–º–∏–ª–∫–∞ Goose CLI: {error_msg}",
                    "error": error_msg,
                    "atlas_core": False,
                    "legacy_mode": True,
                    "cli_fallback": True
                }, 500)
                
        except subprocess.TimeoutExpired:
            logger.error("‚è±Ô∏è CLI Fallback: Timeout –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
            self.send_json_response({
                "response": "–ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É–≤–∞–ª–∞—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ (>5—Ö–≤)",
                "error": "Timeout",
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 408)
            
        except Exception as e:
            logger.error(f"üí• CLI Fallback Exception: {e}")
            self.send_json_response({
                "response": f"–ü–æ–º–∏–ª–∫–∞ CLI fallback: {str(e)}",
                "error": str(e),
                "atlas_core": False,
                "legacy_mode": True,
                "cli_fallback": True
            }, 500)

    def _get_goose_env(self):
        """–û—Ç—Ä–∏–º—É—î —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –∑–∞–ø—É—Å–∫—É Goose"""
        env = os.environ.copy()
        env["PATH"] = "/Users/dev/Documents/GitHub/ATLAS/goose/bin:" + env.get("PATH", "")
        env["RUST_LOG"] = "info"
        return env

    def _clean_goose_output(self, output: str) -> str:
        """–û—á–∏—â–∞—î –≤–∏–≤—ñ–¥ Goose –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        lines = output.strip().split('\n')
        clean_lines = []
        for line in lines:
            if not any(skip in line for skip in [
                "starting session", "logging to", "working directory", 
                "Hermit environment", "activated", "Context:", "( O)>", "Press Enter"
            ]):
                clean_lines.append(line)
        
        clean_answer = '\n'.join(clean_lines).strip()
        return clean_answer if clean_answer else "Goose –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ"

    def determine_session_type(self, message, forced_type=None):
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if forced_type:
            return forced_type
            
        message_lower = message.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ù–û–í–û–ì–û –∑–∞–≤–¥–∞–Ω–Ω—è
        new_keywords = [
            "–≤—ñ–¥–∫—Ä–∏–π", "–∑–Ω–∞–π–¥–∏", "—Å—Ç–≤–æ—Ä–∏", "–ø–æ—á–Ω–∏", "–∑–∞–ø—É—Å—Ç–∏", "–Ω–æ–≤–µ", 
            "–∑–∞–≤–¥–∞–Ω–Ω—è", "–ø—Ä–æ–µ–∫—Ç", "—Ä–æ–±–æ—Ç–∞", "—Å—Ç–∞—Ä—Ç", "init"
        ]
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø
        continue_keywords = [
            "–ø—Ä–æ–¥–æ–≤–∂–∏", "–¥–∞–ª—ñ", "—Ç–∞–∫–æ–∂", "—Ç–µ–ø–µ—Ä", "–ø–æ—Ç—ñ–º", "—â–µ", 
            "–¥–æ–¥–∞–π", "–∑–º—ñ–Ω–∏", "–ø–æ–∫—Ä–∞—â–∏", "–∑—Ä–æ–±–∏", "–≤–∫–ª—é—á–∏", "–Ω–∞—Ç–∏—Å–Ω–∏"
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–≤–Ω–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        if any(word in message_lower for word in new_keywords):
            return "new_session"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–≤–Ω–∏—Ö –≤–∫–∞–∑—ñ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        if any(word in message_lower for word in continue_keywords):
            return "continue_session"
        
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –Ω–æ–≤–∞ —Å–µ—Å—ñ—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        return "new_session"

    def get_session_name(self, message, session_type):
        """–ì–µ–Ω–µ—Ä—É—î —ñ–º'—è —Å–µ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        message_lower = message.lower()
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ —Ç–µ–º–∏
        if any(word in message_lower for word in ["–≤—ñ–¥–µ–æ", "—Ñ—ñ–ª—å–º", "youtube", "–±—Ä–∞—É–∑–µ—Ä"]):
            return "video_browser"
        elif any(word in message_lower for word in ["–º—É–∑–∏–∫–∞", "–ø—ñ—Å–Ω—è", "–∞—É–¥—ñ–æ"]):
            return "music_player"
        elif any(word in message_lower for word in ["–¥–æ–∫—É–º–µ–Ω—Ç", "—Ñ–∞–π–ª", "—Ç–µ–∫—Å—Ç"]):
            return "document_editor"
        elif any(word in message_lower for word in ["–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "—Ä–∞—Ö—É–Ω–æ–∫", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]):
            return "calculator"
        elif any(word in message_lower for word in ["—Å–∏—Å—Ç–µ–º–∞", "—Å—Ç–∞—Ç—É—Å", "–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"]):
            return "system_monitor"
        else:
            # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–µ—Å—ñ—è
            return "general_assistant"
    
    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        try:
            response = json.dumps(data, ensure_ascii=False).encode('utf-8')
            self.send_response(status_code)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Content-Length', str(len(response)))
            self.end_headers()
            self.wfile.write(response)
        except Exception as e:
            logger.error(f"Error sending JSON response: {e}")

    def _format_status_for_ai(self, status):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ AI"""
        try:
            lines = []
            
            # –ü—Ä–æ—Ü–µ—Å–∏
            if status.get("processes"):
                total_proc = sum(p.get("count", 0) for p in status["processes"].values())
                lines.append(f"Processes: {total_proc} Atlas-related running")
                
                for proc_type, proc_info in status["processes"].items():
                    if proc_info.get("count", 0) > 0:
                        lines.append(f"  - {proc_type}: {proc_info['count']} active")
            
            # –°–µ—Ä–≤—ñ—Å–∏
            if status.get("services"):
                lines.append("Services:")
                for service, service_info in status["services"].items():
                    service_status = service_info.get("status", "unknown")
                    lines.append(f"  - {service}: {service_status}")
            
            # –ú–µ—Ä–µ–∂–∞
            if status.get("network", {}).get("connections"):
                conn_count = status["network"]["connections"].get("count", 0)
                lines.append(f"Network: {conn_count} active connections")
            
            # –†–µ—Å—É—Ä—Å–∏
            if status.get("resources"):
                if status["resources"].get("cpu"):
                    cpu_info = status["resources"]["cpu"].get("usage_line", "")
                    if cpu_info:
                        lines.append(f"CPU: {cpu_info}")
                        
                if status["resources"].get("disk"):
                    disk_info = status["resources"]["disk"]
                    if disk_info.get("usage_percent"):
                        lines.append(f"Disk: {disk_info['usage_percent']} used")
            
            return "\n".join(lines) if lines else "System status unavailable"
            
        except Exception as e:
            return f"Status formatting error: {str(e)}"

    def handle_tts(self):
        """–û–±—Ä–æ–±–∫–∞ TTS –∑–∞–ø–∏—Ç—ñ–≤"""
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            text = data.get("text", "")
            if not text:
                self.send_json_response({"error": "Text is required"}, 400)
                return
            
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Request: {text[:30]}...")
            
            success = self.send_tts_request(text)
            if success:
                self.send_json_response({"status": "success"})
            else:
                self.send_json_response({"error": "TTS service unavailable"}, 503)
                
        except Exception as e:
            logger.error(f"TTS error: {e}")
            self.send_json_response({"error": str(e)}, 500)

    def send_json_response(self, data, status_code=200):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        response = json.dumps(data).encode('utf-8')
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.send_header('Content-Length', str(len(response)))
        self.end_headers()
        self.wfile.write(response)

    def send_to_atlas_core(self, message):
        """–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Atlas Core"""
        try:
            response = requests.post(
                f"{self.atlas_core_url}/chat",
                json={"message": message},
                timeout=60  # –ó–±—ñ–ª—å—à—É—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 1 —Ö–≤–∏–ª–∏–Ω–∏
            )
            if response.status_code == 200:
                data = response.json()
                return data.get("response", data.get("message"))
        except Exception as e:
            logger.debug(f"Atlas Core request failed: {e}")
        return None

    def send_tts_request(self, text):
        """TTS –∑–∞–ø–∏—Ç –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            response = requests.post(
                "http://localhost:3001/tts",
                json={"text": text, "language": "uk"},
                timeout=10
            )
            return response.status_code == 200
        except Exception as e:
            logger.debug(f"TTS request failed: {e}")
        return False

    def send_tts_to_atlas(self, text):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ TTS –∑–∞–ø–∏—Ç—É –¥–æ Atlas Core"""
        try:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Speaking: {text[:20]}...")
            
            # Atlas Core –º–∞—î /tts endpoint
            response = requests.post(
                f"{self.atlas_core_url}/tts",
                json={"text": text, "rate": 200},
                timeout=10
            )
            
            if response.status_code == 200:
                if self.live_streamer:
                    self.live_streamer._add_log("[TTS] Success", "info")
                return True
            else:
                if self.live_streamer:
                    self.live_streamer._add_log(f"[TTS] Error {response.status_code}", "warning")
                return False
                
        except Exception as e:
            if self.live_streamer:
                self.live_streamer._add_log(f"[TTS] Failed: {str(e)[:30]}", "error")
            logger.debug(f"TTS to Atlas failed: {e}")
        return False

    def check_service(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            if url.endswith(':3000'):
                # Goose —Å–µ—Ä–≤–µ—Ä –º–∞—î /status –µ–Ω–¥–ø–æ—ñ–Ω—Ç
                response = requests.get(f"{url}/status", timeout=2)
            elif url.endswith(':8000'):
                # Atlas Core –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–º—ñ—Å—Ç—å /health
                response = requests.get(url, timeout=2)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ /health
                response = requests.get(f"{url}/health", timeout=2)
            return response.status_code < 500
        except Exception as e:
            logger.debug(f"Service check failed for {url}: {e}")
            return False

def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    port = 8080
    server_address = ('', port)
    
    # –ó–º—ñ–Ω–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    os.chdir(Path(__file__).parent)
    
    httpd = HTTPServer(server_address, AtlasMinimalHandler)
    
    print("üöÄ Starting Atlas Minimal Frontend Server...")
    print(f"üì± Interface: http://localhost:{port}")
    print("üíæ 3D Viewer: Background layer")
    print("üìã MCP Logs: Left panel")
    print("üí¨ Chat: Right panel")
    print(f"üéØ Server running on port {port}")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopping...")
        httpd.shutdown()
        print("üõë Server stopped")

if __name__ == "__main__":
    main()
