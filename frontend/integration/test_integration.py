#!/usr/bin/env python3
"""
Test script for Atlas TutorialChat Integration
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó TutorialChat –∑ Atlas
"""

import json
import time
import requests
import threading
from pathlib import Path
import sys

def test_integration():
    """–¢–µ—Å—Ç—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é TutorialChat"""
    base_url = "http://localhost:8080"
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Atlas TutorialChat Integration...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("\n1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    try:
        response = requests.get(f"{base_url}/api/tutorialchat/config", timeout=5)
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            print(f"   API Base: {config.get('api_base_url')}")
            print(f"   Streaming: {config.get('streaming_enabled')}")
            print(f"   Version: {config.get('integration_metadata', {}).get('version')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø –¥–æ TutorialChat —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    print("\n2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...")
    try:
        response = requests.get(f"{base_url}/tutorialchat", timeout=5)
        if response.status_code == 200:
            print("‚úÖ TutorialChat —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É: {e}")
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —á–∞—Ç—É
    print("\n3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è chat API...")
    try:
        chat_data = {
            "message": "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó",
            "session_name": f"test_session_{int(time.time())}",
            "session_type": "chat"
        }
        
        print(f"   –ù–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è: {chat_data['message']}")
        response = requests.post(f"{base_url}/api/chat/reply", 
                               json=chat_data, 
                               timeout=10,
                               stream=True)
        
        if response.status_code == 200:
            print("‚úÖ API —á–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
            
            # –ß–∏—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –ø–æ–¥—ñ–π –∑ SSE –ø–æ—Ç–æ–∫—É
            event_count = 0
            max_events = 3
            
            for line in response.iter_lines():
                if line:
                    line = line.decode('utf-8')
                    if line.startswith('data: '):
                        event_data = line[6:]  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ "data: "
                        if event_data == '[DONE]':
                            print("‚úÖ –ü–æ—Ç—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                            break
                        
                        try:
                            event = json.loads(event_data)
                            print(f"   üì® –ü–æ–¥—ñ—è {event_count + 1}: {event.get('type', 'unknown')}")
                            event_count += 1
                            
                            if event_count >= max_events:
                                print(f"   üìä –û—Ç—Ä–∏–º–∞–Ω–æ {event_count} –ø–æ–¥—ñ–π, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ç–µ—Å—Ç")
                                break
                                
                        except json.JSONDecodeError:
                            print(f"   ‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ø–æ–¥—ñ—é: {event_data[:100]}")
                            
                        except Exception as e:
                            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–¥—ñ—ó: {e}")
                            
            print(f"‚úÖ –¢–µ—Å—Ç API —É—Å–ø—ñ—à–Ω–∏–π ({event_count} –ø–æ–¥—ñ–π)")
            
        else:
            print(f"‚ùå API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            print(f"   Response: {response.text[:200]}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {e}")
    
    # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    print("\n4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Å–µ—Å—ñ–π...")
    try:
        session_data = {
            "metadata": {
                "test": True,
                "timestamp": time.time()
            }
        }
        
        response = requests.post(f"{base_url}/api/session", 
                               json=session_data, 
                               timeout=5)
        
        if response.status_code == 201:
            session = response.json()
            print("‚úÖ –°–µ—Å—ñ—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            print(f"   Session ID: {session.get('session_id')}")
            print(f"   Status: {session.get('status')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–π—Ç–µ:")
    print(f"   üåê Web Interface: {base_url}/tutorialchat")
    print(f"   üìä Atlas Status: {base_url}/api/status")
    print(f"   ‚öôÔ∏è Config: {base_url}/api/tutorialchat/config")
    
    return True


def monitor_logs():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        response = requests.get("http://localhost:8080/logs/stream", 
                               timeout=30, stream=True)
        
        print("\nüìã –õ–æ–≥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–∏–π...")
        for line in response.iter_lines():
            if line:
                print(f"üìù {line.decode('utf-8')}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è –õ–æ–≥ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")


if __name__ == "__main__":
    print("üöÄ Atlas TutorialChat Integration Tester")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ localhost:8080")
    
    # –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤ —Ñ–æ–Ω—ñ
    if len(sys.argv) > 1 and sys.argv[1] == "--monitor":
        log_thread = threading.Thread(target=monitor_logs, daemon=True)
        log_thread.start()
        time.sleep(1)  # –î–∞—Ç–∏ —á–∞—Å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    
    test_integration()
