#!/usr/bin/env python3
"""
ATLAS Python Environment Manager
–ú–µ–Ω–µ–¥–∂–µ—Ä Python —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è ATLAS
"""

import os
import sys
import subprocess
import venv
from pathlib import Path

class AtlasEnvironmentManager:
    def __init__(self, base_dir: str = None):
        if base_dir is None:
            base_dir = Path(__file__).parent
        else:
            base_dir = Path(base_dir)
        
        self.base_dir = base_dir
        self.venv_dir = base_dir / "venv"
        self.requirements_file = base_dir / "requirements.txt"
        self.activate_script = self.venv_dir / "bin" / "activate"
        
        # –î–ª—è Windows
        if os.name == 'nt':
            self.activate_script = self.venv_dir / "Scripts" / "activate"
    
    def check_python(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Python 3"""
        try:
            result = subprocess.run([sys.executable, "--version"], 
                                 capture_output=True, text=True, check=True)
            print(f"‚úÖ Python –∑–Ω–∞–π–¥–µ–Ω–æ: {result.stdout.strip()}")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå Python –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
    
    def create_venv(self):
        """–°—Ç–≤–æ—Ä—é—î –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"""
        if self.venv_dir.exists():
            print(f"‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∂–µ —ñ—Å–Ω—É—î: {self.venv_dir}")
            return True
        
        try:
            print(f"üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: {self.venv_dir}")
            venv.create(self.venv_dir, with_pip=True)
            print("‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {e}")
            return False
    
    def get_venv_python(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ Python —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ"""
        if os.name == 'nt':
            return self.venv_dir / "Scripts" / "python.exe"
        else:
            return self.venv_dir / "bin" / "python"
    
    def get_venv_pip(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ pip —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ"""
        if os.name == 'nt':
            return self.venv_dir / "Scripts" / "pip.exe"
        else:
            return self.venv_dir / "bin" / "pip"
    
    def upgrade_pip(self):
        """–û–Ω–æ–≤–ª—é—î pip —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ"""
        pip_path = self.get_venv_pip()
        if not pip_path.exists():
            print("‚ùå pip –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            return False
        
        try:
            print("‚¨ÜÔ∏è  –û–Ω–æ–≤–ª—é—î–º–æ pip...")
            subprocess.run([str(pip_path), "install", "--upgrade", "pip"], 
                         check=True, capture_output=True)
            print("‚úÖ pip –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è pip: {e}")
            return False
    
    def install_requirements(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt"""
        if not self.requirements_file.exists():
            print(f"‚ö†Ô∏è  –§–∞–π–ª requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {self.requirements_file}")
            return False
        
        pip_path = self.get_venv_pip()
        if not pip_path.exists():
            print("‚ùå pip –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            return False
        
        try:
            print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt...")
            subprocess.run([str(pip_path), "install", "-r", str(self.requirements_file)], 
                         check=True, capture_output=False)
            print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: {e}")
            return False
    
    def list_packages(self):
        """–ü–æ–∫–∞–∑—É—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏"""
        pip_path = self.get_venv_pip()
        if not pip_path.exists():
            print("‚ùå pip –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            return False
        
        try:
            print("\nüìã –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏:")
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ format=columns, —è–∫—â–æ –Ω–µ –ø—Ä–∞—Ü—é—î - –∑–≤–∏—á–∞–π–Ω–∏–π list
            try:
                subprocess.run([str(pip_path), "list", "--format=columns"], 
                             check=True, capture_output=False)
            except subprocess.CalledProcessError:
                # Fallback –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
                subprocess.run([str(pip_path), "list"], 
                             check=True, capture_output=False)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞–∫–µ—Ç—ñ–≤: {e}")
            return False
    
    def is_venv_active(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ"""
        return hasattr(sys, 'real_prefix') or (
            hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix
        )
    
    def get_activation_command(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        if os.name == 'nt':
            return f"{self.venv_dir}\\Scripts\\activate"
        else:
            return f"source {self.venv_dir}/bin/activate"
    
    def setup_environment(self):
        """–ü–æ–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        print("üîß ATLAS Python Environment Setup")
        print("==================================")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Python
        if not self.check_python():
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
        if not self.create_venv():
            return False
        
        # –û–Ω–æ–≤–ª—é—î–º–æ pip
        if not self.upgrade_pip():
            return False
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
        if not self.install_requirements():
            return False
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏
        self.list_packages()
        
        print("\nüéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:")
        print(f"{self.get_activation_command()}")
        print(f"\n–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:")
        print("deactivate")
        
        return True
    
    def run_in_venv(self, script_path: str, *args):
        """–ó–∞–ø—É—Å–∫–∞—î —Å–∫—Ä–∏–ø—Ç —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ"""
        python_path = self.get_venv_python()
        if not python_path.exists():
            print("‚ùå Python –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            return False
        
        try:
            cmd = [str(python_path), script_path] + list(args)
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ: {' '.join(cmd)}")
            subprocess.run(cmd, check=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {script_path}")
            return False

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='ATLAS Python Environment Manager')
    parser.add_argument('--setup', action='store_true', help='–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ')
    parser.add_argument('--run', type=str, help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ')
    parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞')
    parser.add_argument('--dir', type=str, help='–ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: –ø–æ—Ç–æ—á–Ω–∞)')
    
    args = parser.parse_args()
    
    manager = AtlasEnvironmentManager(args.dir)
    
    if args.setup:
        success = manager.setup_environment()
        sys.exit(0 if success else 1)
    
    elif args.run:
        success = manager.run_in_venv(args.run)
        sys.exit(0 if success else 1)
    
    elif args.list:
        success = manager.list_packages()
        sys.exit(0 if success else 1)
    
    elif args.status:
        print("üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ATLAS")
        print("=" * 25)
        print(f"–ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {manager.base_dir}")
        print(f"–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ: {manager.venv_dir}")
        print(f"–Ü—Å–Ω—É—î: {'‚úÖ' if manager.venv_dir.exists() else '‚ùå'}")
        print(f"Requirements —Ñ–∞–π–ª: {'‚úÖ' if manager.requirements_file.exists() else '‚ùå'}")
        print(f"–ü–æ—Ç–æ—á–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ: {'‚úÖ' if manager.is_venv_active() else '‚ùå'}")
        print(f"–ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: {manager.get_activation_command()}")
        
        if manager.venv_dir.exists():
            python_path = manager.get_venv_python()
            print(f"Python –≤ venv: {python_path}")
            if python_path.exists():
                try:
                    result = subprocess.run([str(python_path), "--version"], 
                                         capture_output=True, text=True, check=True)
                    print(f"–í–µ—Ä—Å—ñ—è: {result.stdout.strip()}")
                except:
                    print("–í–µ—Ä—Å—ñ—è: –ù–µ–≤—ñ–¥–æ–º–∞")
    
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –¥—ñ—ó
        print("üîç ATLAS Python Environment Manager")
        print("=" * 35)
        
        if not manager.venv_dir.exists():
            print("‚ùå –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ")
            print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å: python3 env_manager.py --setup")
        else:
            print("‚úÖ –í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ")
            print("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:")
            print("  --setup    - –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ—ó—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ")
            print("  --run FILE - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
            print("  --list     - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏")
            print("  --status   - –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å")

if __name__ == "__main__":
    main()
