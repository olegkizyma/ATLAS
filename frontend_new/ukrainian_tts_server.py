#!/usr/bin/env python3
"""
Simple Ukrainian TTS Server Mock for ATLAS Voice System Testing
–ü—Ä–æ—Å—Ç–∏–π –º–æ–∫-—Å–µ—Ä–≤–µ—Ä —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ ATLAS
"""

import os
import io
import logging
import wave
import struct
import math
from flask import Flask, request, jsonify, Response
from flask_cors import CORS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

def generate_tone_wav(frequency=440, duration=2.0, sample_rate=44100, amplitude=0.5):
    """
    –ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ—Å—Ç–∏–π —Ç–æ–Ω–æ–≤–∏–π WAV-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    """
    frames = int(duration * sample_rate)
    audio_data = []
    
    for i in range(frames):
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–Ω—É—Å–æ—ó–¥—É
        value = amplitude * math.sin(frequency * 2 * math.pi * i / sample_rate)
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ 16-bit signed integer
        sample = int(value * 32767)
        audio_data.append(struct.pack('<h', sample))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ WAV –≤ –ø–∞–º'—è—Ç—ñ
    wav_buffer = io.BytesIO()
    with wave.open(wav_buffer, 'wb') as wav_file:
        wav_file.setnchannels(1)  # Mono
        wav_file.setsampwidth(2)  # 16-bit
        wav_file.setframerate(sample_rate)
        wav_file.writeframes(b''.join(audio_data))
    
    wav_buffer.seek(0)
    return wav_buffer.getvalue()

@app.route('/tts', methods=['POST'])
def synthesize_tts():
    """
    TTS –µ–Ω–¥–ø–æ–π–Ω—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –º–æ–≤–ª–µ–Ω–Ω—è
    """
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}), 400
        
        text = data.get('text', '').strip()
        if not text:
            return jsonify({"error": "–ü—É—Å—Ç–∏–π —Ç–µ–∫—Å—Ç"}), 400
        
        voice = data.get('voice', 'dmytro')
        speed = float(data.get('speed', 1.0))
        pitch = float(data.get('pitch', 1.0))
        emotion = data.get('emotion', 'neutral')
        
        logger.info(f"TTS request: text='{text[:50]}...', voice={voice}, speed={speed}, pitch={pitch}, emotion={emotion}")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–æ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
        voice_frequencies = {
            'dmytro': 220,    # Atlas - –Ω–∏–∑—å–∫–∏–π –≥–æ–ª–æ—Å
            'oleksa': 330,    # –¢–µ—Ç—è–Ω–∞ - —Å–µ—Ä–µ–¥–Ω—ñ–π –≥–æ–ª–æ—Å
            'robot': 180      # –ì—Ä—ñ—à–∞ - –Ω–∏–∑—å–∫–∏–π —Ä–æ–±–æ—Ç–∏–∑–æ–≤–∞–Ω–∏–π
        }
        
        base_freq = voice_frequencies.get(voice, 260)
        # –ö–æ—Ä–∏–≥—É—î–º–æ —á–∞—Å—Ç–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ pitch
        frequency = base_freq * pitch
        
        # –ö–æ—Ä–∏–≥—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ç–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
        base_duration = len(text) * 0.1  # 0.1 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ —Å–∏–º–≤–æ–ª
        duration = base_duration / speed
        duration = max(0.5, min(duration, 10.0))  # –û–±–º–µ–∂—É—î–º–æ –≤—ñ–¥ 0.5 –¥–æ 10 —Å–µ–∫—É–Ω–¥
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—É–∫
        wav_data = generate_tone_wav(
            frequency=frequency,
            duration=duration,
            amplitude=0.3
        )
        
        return Response(
            wav_data,
            mimetype='audio/wav',
            headers={
                'Content-Type': 'audio/wav',
                'Content-Length': str(len(wav_data)),
                'X-TTS-Voice': voice,
                'X-TTS-Text-Length': str(len(text)),
                'X-TTS-Duration': str(duration),
                'X-TTS-Frequency': str(frequency)
            }
        )
        
    except Exception as e:
        logger.error(f"TTS error: {e}")
        return jsonify({
            "error": f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ç–µ–∑—É: {str(e)}"
        }), 500

@app.route('/tts/voices', methods=['GET'])
def get_voices():
    """
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
    """
    return jsonify({
        "voices": [
            {
                "name": "dmytro",
                "description": "–î–º–∏—Ç—Ä–æ - —á–æ–ª–æ–≤—ñ—á–∏–π –≥–æ–ª–æ—Å (Atlas)",
                "gender": "male",
                "language": "uk",
                "frequency": 220
            },
            {
                "name": "oleksa",
                "description": "–û–ª–µ–∫—Å–∞ - –∂—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å (–¢–µ—Ç—è–Ω–∞)",
                "gender": "female", 
                "language": "uk",
                "frequency": 330
            },
            {
                "name": "robot",
                "description": "–†–æ–±–æ—Ç - —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π –≥–æ–ª–æ—Å (–ì—Ä—ñ—à–∞)",
                "gender": "neutral",
                "language": "uk",
                "frequency": 180
            }
        ]
    })

@app.route('/tts/health', methods=['GET'])
def health_check():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è TTS —Å–µ—Ä–≤–µ—Ä–∞
    """
    return jsonify({
        "status": "ok",
        "service": "Ukrainian TTS Mock Server",
        "version": "1.0.0",
        "voices_available": 3,
        "supported_formats": ["wav"],
        "features": [
            "multi_voice_synthesis",
            "pitch_control",
            "speed_control",
            "emotion_support"
        ]
    })

@app.route('/', methods=['GET'])
def index():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä
    """
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Ukrainian TTS Mock Server</title>
        <style>
            body { font-family: monospace; background: #000; color: #0f0; padding: 20px; }
            h1 { color: #0ff; }
            .endpoint { background: #111; padding: 10px; margin: 10px 0; border: 1px solid #333; }
            .method { color: #ff0; font-weight: bold; }
        </style>
    </head>
    <body>
        <h1>üé§ Ukrainian TTS Mock Server</h1>
        <p>–¢–µ—Å—Ç–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –≥–æ–ª–æ—Å—ñ–≤ ATLAS</p>
        
        <div class="endpoint">
            <div><span class="method">POST</span> /tts</div>
            <div>–°–∏–Ω—Ç–µ–∑ –º–æ–≤–ª–µ–Ω–Ω—è. Body: {"text": "—Ç–µ–∫—Å—Ç", "voice": "dmytro|oleksa|robot"}</div>
        </div>
        
        <div class="endpoint">
            <div><span class="method">GET</span> /tts/voices</div>
            <div>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤</div>
        </div>
        
        <div class="endpoint">
            <div><span class="method">GET</span> /tts/health</div>
            <div>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</div>
        </div>
        
        <p>–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—ñ 3000</p>
    </body>
    </html>
    """

if __name__ == '__main__':
    port = int(os.environ.get('TTS_PORT', 3000))
    logger.info(f"Starting Ukrainian TTS Mock Server on port {port}")
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False,
        threaded=True
    )