/**
 * Atlas Application Controller
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–æ–¥–∞—Ç–∫—É –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
 */
class AtlasApp {
    constructor() {
        this.managers = {};
        this.isInitialized = false;
        this.pageLoadId = Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
        this.setupReloadProtection();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–ª–∏ DOM –≥–æ—Ç–æ–≤–∏–π
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    init() {
        if (this.isInitialized) return;
        
        console.log('üöÄ ATLAS APP INIT:', this.pageLoadId, 'at', new Date().toTimeString());
        
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            this.managers.logger = new AtlasLogger();
            this.managers.status = new AtlasStatusManager();
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑ –≥–æ–ª–æ—Å–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é
            this.managers.chat = new AtlasIntelligentChatManager();
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤—É —Å–∏—Å—Ç–µ–º—É
            this.managers.chat.initVoiceSystem().catch(e => 
                console.warn('Voice system init failed:', e.message)
            );
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —á–∞—Ç
            this.initMinimalChat();
            
            // –†–æ–±–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏
            window.atlasLogger = this.managers.logger;
            window.atlasChat = this.managers.chat;
            window.atlasStatus = this.managers.status;
            
            this.isInitialized = true;
            this.log('Atlas Intelligent Application initialized successfully');
            
            // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ —â–æ input —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
            setTimeout(() => {
                if (this.managers.chat) {
                    this.managers.chat.setInputState(true);
                }
            }, 1000);
            
        } catch (error) {
            console.error('Atlas initialization error:', error);
            this.showErrorMessage(`Initialization failed: ${error.message}`);
        }
    }
    
    initMinimalChat() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —á–∞—Ç
        const chatToggle = document.getElementById('chat-toggle');
        const chatContent = document.getElementById('chat-content');
        
        if (chatToggle && chatContent) {
            chatToggle.addEventListener('click', () => {
                const isVisible = chatContent.style.display !== 'none';
                chatContent.style.display = isVisible ? 'none' : 'block';
                chatToggle.textContent = isVisible ? 'üí¨ Chat' : '‚ùå Close';
            });
            
            this.log('Minimal chat initialized');
        }
    }
    
    setupReloadProtection() {
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–∏—Ö –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
        const lastReload = sessionStorage.getItem('atlasLastReload');
        const currentTime = Date.now();
        
        if (lastReload && (currentTime - parseInt(lastReload)) < 3000) {
            console.warn('üõë SUSPECTED RELOAD LOOP - Adding protection');
            // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–≤–∏ –º–æ–∂–ª–∏–≤–æ–≥–æ —Ü–∏–∫–ª—É –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
            setTimeout(() => {
                console.log('üîì Reload protection finished');
            }, 2000);
        }
        
        sessionStorage.setItem('atlasLastReload', currentTime.toString());
        
        // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
        window.addEventListener('beforeunload', (e) => {
            console.log('‚ö†Ô∏è ATLAS BEFOREUNLOAD:', this.pageLoadId, 'at', new Date().toTimeString());
            
            const isStreaming = this.managers.chat && 
                (this.managers.chat.isStreaming || this.managers.chat.isStreamPending);
            
            // –ó–∞—Ö–∏—â–∞—î–º–æ –≤—ñ–¥ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å –ø—Ä–æ—Ç—è–≥–æ–º –ø–µ—Ä—à–∏—Ö 10 —Å–µ–∫—É–Ω–¥
            const pageAge = Date.now() - parseInt(this.pageLoadId.split('_')[0]);
            const isRecentLoad = pageAge < 10000;
            
            if (isStreaming || isRecentLoad) {
                console.log(`‚ùå PREVENTING RELOAD: streaming=${isStreaming}, recentLoad=${isRecentLoad}, pageAge=${pageAge}ms`);
                
                let message = '–ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...';
                if (isStreaming) {
                    message = '–°—Ç—Ä—ñ–º —â–µ —Ç—Ä–∏–≤–∞—î. –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É?';
                }
                
                e.preventDefault();
                e.returnValue = message;
                return message;
            } else {
                console.log('‚úÖ RELOAD ALLOWED (no active stream, page age: ' + pageAge + 'ms)');
            }
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        window.addEventListener('error', (e) => {
            console.error('Global error:', e.error);
            this.log(`Global error: ${e.error?.message || 'Unknown error'}`, 'error');
        });
        
        window.addEventListener('unhandledrejection', (e) => {
            console.error('Unhandled promise rejection:', e.reason);
            this.log(`Promise rejection: ${e.reason?.message || 'Unknown'}`, 'error');
        });
    }
    
    showErrorMessage(message) {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ —á–∞—Ç—ñ –∞–±–æ –ª–æ–≥–∞—Ö
        if (this.managers.logger) {
            this.managers.logger.addLog(message, 'error', 'app');
        } else {
            console.error(message);
        }
    }
    
    log(message, level = 'info') {
        const timestamp = new Date().toTimeString().split(' ')[0];
        console.log(`[${timestamp}] [APP] ${message}`);
        
        if (this.managers.logger) {
            this.managers.logger.addLog(message, level, 'app');
        }
    }
    
    // –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
    sendMessage(message) {
        if (this.managers.chat) {
            this.managers.chat.chatInput.value = message;
            this.managers.chat.sendMessage();
        }
    }
    
    getStatus() {
        return {
            initialized: this.isInitialized,
            pageLoadId: this.pageLoadId,
            managers: Object.keys(this.managers),
            chatReady: !!this.managers.chat,
            isStreaming: this.managers.chat ? this.managers.chat.isStreaming : false
        };
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
const atlasApp = new AtlasApp();

// –†–æ–±–∏–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º
window.atlasApp = atlasApp;
