#!/usr/bin/env python3
"""
ATLAS Intelligent Systems Test Suite
–¢–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É
"""

import sys
import json
from pathlib import Path

def test_intelligent_imports():
    """–¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤ —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏—Ö —Å–∏—Å—Ç–µ–º"""
    print("üß™ Testing intelligent system imports...")
    
    # –î–æ–¥–∞—î–º–æ config –¥–æ sys.path
    config_path = Path(__file__).parent / 'config'
    sys.path.insert(0, str(config_path))
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏
        from intelligent_config import IntelligentConfigManager
        from intelligent_orchestrator import IntelligentOrchestrator
        from intelligent_recovery import IntelligentRecoverySystem
        from configuration_migrator import ConfigurationMigrator
        
        print("   ‚úÖ All intelligent modules imported successfully")
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Import error: {e}")
        return False

def test_intelligent_config_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
    print("üß™ Testing intelligent configuration generation...")
    
    try:
        config_path = Path(__file__).parent / 'config'
        sys.path.insert(0, str(config_path))
        
        from intelligent_config import IntelligentConfigManager
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä
        config_manager = IntelligentConfigManager()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        test_config = config_manager.generate_complete_config({
            'service_type': 'test',
            'environment': 'development'
        })
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        required_keys = ['server', 'limits', 'performance', 'security']
        for key in required_keys:
            if key not in test_config:
                print(f"   ‚ùå Missing required key: {key}")
                return False
        
        print("   ‚úÖ Configuration generated with all required sections")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Configuration generation error: {e}")
        return False

def test_intelligent_files_exist():
    """–¢–µ—Å—Ç –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("üß™ Testing intelligent files existence...")
    
    files_to_check = [
        'orchestrator/.env.intelligent',
        'orchestrator/.intelligent_metadata.json',
        'orchestrator/intelligent_server_wrapper.js',
        'config/intelligent_config.py',
        'config/intelligent_orchestrator.py',
        'config/intelligent_recovery.py',
        'config/configuration_migrator.py',
        'config/recovery_bridge.py'
    ]
    
    missing_files = []
    for file_path in files_to_check:
        full_path = Path(__file__).parent / file_path
        if not full_path.exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"   ‚ùå Missing files: {missing_files}")
        return False
    else:
        print(f"   ‚úÖ All {len(files_to_check)} intelligent files present")
        return True

def test_intelligent_metadata():
    """–¢–µ—Å—Ç –º–µ—Ç–∞–¥–∞–Ω–∏—Ö —ñ–Ω—Ç–µ–ª—ñ–≥–µ–Ω—Ç–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    print("üß™ Testing intelligent metadata...")
    
    try:
        metadata_path = Path(__file__).parent / 'orchestrator' / '.intelligent_metadata.json'
        
        if not metadata_path.exists():
            print("   ‚ùå Metadata file not found")
            return False
        
        with open(metadata_path, 'r') as f:
            metadata = json.load(f)
        
        required_fields = ['generated_at', 'config_version', 'intelligent_features', 'migration_status']
        for field in required_fields:
            if field not in metadata:
                print(f"   ‚ùå Missing metadata field: {field}")
                return False
        
        if metadata['migration_status'] != 'complete':
            print(f"   ‚ùå Migration not complete: {metadata['migration_status']}")
            return False
        
        print(f"   ‚úÖ Metadata valid with {len(metadata['intelligent_features'])} features")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Metadata test error: {e}")
        return False

def test_recovery_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    print("üß™ Testing intelligent recovery system...")
    
    try:
        config_path = Path(__file__).parent / 'config'
        sys.path.insert(0, str(config_path))
        
        from intelligent_recovery import IntelligentRecoverySystem, FailureContext, FailureType
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
        recovery_system = IntelligentRecoverySystem()
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ–º–∏–ª–∫–∏
        test_failure = FailureContext(
            failure_type=FailureType.TIMEOUT,
            error_message="Test timeout error",
            timestamp=1234567890,
            agent_name="test_agent",
            task_spec={"test": "task"},
            execution_context={"test": "context"}
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if test_failure.failure_type != FailureType.TIMEOUT:
            print("   ‚ùå Failure context creation failed")
            return False
        
        print("   ‚úÖ Recovery system components working")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Recovery system test error: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ ATLAS Intelligent Systems Test Suite")
    print("=" * 50)
    print("")
    
    tests = [
        test_intelligent_imports,
        test_intelligent_files_exist,
        test_intelligent_metadata,
        test_intelligent_config_generation,
        test_recovery_system
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print("")
    
    print("üìä Test Results:")
    print(f"   ‚úÖ Passed: {passed}/{total}")
    print(f"   ‚ùå Failed: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ All tests passed! Intelligent refactoring successful!")
        print("\nüí° Next steps:")
        print("   1. Start intelligent stack: ./start_stack_intelligent.sh")
        print("   2. Monitor status: ./status_stack_intelligent.sh")
        print("   3. Test intelligent features through web interface")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) failed. Review intelligent system setup.")
        return 1

if __name__ == "__main__":
    exit(main())
