#!/bin/bash

# ATLAS Intelligent Stack Startup Script
# –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–µ–∫—É ATLAS

# macOS users: Use ./start_stack_macos.sh for better compatibility
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üçé macOS detected. For optimal experience, use:"
    echo "   ./start_stack_macos.sh"
    echo ""
    echo "Continuing with full stack (may require Rust/Cargo)..."
    sleep 2
fi

# 1. –ó–∞–ø—É—Å–∫ Python Environment Setup
echo "üêç Setting up Python environment..."
cd frontend_new
if [ -f "setup_env.sh" ]; then
    source setup_env.sh
    echo "‚úÖ Python environment configured"
elif [ -f "venv/bin/activate" ]; then
    echo "üêç Activating virtual environment..."
    source venv/bin/activate
    echo "‚úÖ Virtual environment activated"
else
    echo "‚ö†Ô∏è  setup_env.sh not found, using system Python"
fi
cd ..

# –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
echo "üêç Activating Python virtual environment..."
if [ -f "frontend_new/venv/bin/activate" ]; then
    source frontend_new/venv/bin/activate
    echo "‚úÖ Virtual environment activated"
else
    echo "‚ö†Ô∏è  Virtual environment not found, using system Python"
fi

set -e

echo "üöÄ Starting ATLAS Intelligent Multi-Agent System..."

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
mkdir -p logs

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é (–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose XDG_CONFIG_HOME)
REPO_ROOT="$(pwd)"

# –£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—ñ–≤ Goose: —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–º–ª—ñ–Ω–∫ ~/.config/goose -> <repo>/goose/goose
# —Ç–∞ —Ä–æ–±–∏–º–æ –±–µ–∑–ø–µ—á–Ω—É –∫–æ–ø—ñ—é config.yaml —É ~/.config/ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
ensure_goose_config_link() {
    local repo_conf_dir="$REPO_ROOT/goose/goose"
    local user_config_base="$HOME/.config"
    local user_conf_link="$user_config_base/goose"

    mkdir -p "$user_config_base"

    # 1) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É –∑ —Ä–µ–ø–æ
    #    a) —É ~/.config (–ø–ª–æ—Å–∫–∏–π –±–µ–∫–∞–ø)
    #    b) —è–∫—â–æ ~/.config/goose —î —Ä–µ–∞–ª—å–Ω–æ—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é (–Ω–µ –ª—ñ–Ω–∫–æ–º) ‚Äî –ø–æ–∫–ª–∞–¥–µ–º–æ –∫–æ–ø—ñ—é –≤—Å–µ—Ä–µ–¥–∏–Ω—É –Ω–µ—ó, —è–∫ –ø—Ä–æ—Å–∏–ª–∏
    if [ -f "$repo_conf_dir/config.yaml" ]; then
        local ts
        ts=$(date +%Y%m%d_%H%M%S)
        cp -f "$repo_conf_dir/config.yaml" "$user_config_base/goose.config.yaml.copy.$ts" 2>/dev/null || true
        if [ -d "$user_conf_link" ] && [ ! -L "$user_conf_link" ]; then
            mkdir -p "$user_conf_link"
            cp -f "$repo_conf_dir/config.yaml" "$user_conf_link/config.yaml.copy.$ts" 2>/dev/null || true
        fi
    fi

    # 2) –Ø–∫—â–æ –≤–∂–µ —î —Å–∏–º–ª—ñ–Ω–∫, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–µ–∫—É ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if [ -L "$user_conf_link" ]; then
        local link_target
        link_target=$(readlink "$user_conf_link")
        if [ "$link_target" = "$repo_conf_dir" ]; then
            return 0
        fi
    fi

    # 3) –í—ñ–¥—Å—É–≤–∞—î–º–æ —ñ—Å–Ω—É—é—á—É —Ç–µ–∫—É/–ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –±–µ–∫–∞–ø, —è–∫—â–æ —Ç–∞–∫–µ —î
    if [ -e "$user_conf_link" ] || [ -L "$user_conf_link" ]; then
        local ts
        ts=$(date +%Y%m%d_%H%M%S)
        mv -f "$user_conf_link" "$user_config_base/goose.backup.$ts" 2>/dev/null || true
    fi

    # 4) –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–º–ª—ñ–Ω–∫ –Ω–∞ —Ç–µ–∫—É –∫–æ–Ω—Ñ—ñ–≥—ñ–≤ —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
    ln -s "$repo_conf_dir" "$user_conf_link" 2>/dev/null || true
}

# –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ goose
resolve_goose_bin() {
    if [ -x "$REPO_ROOT/goose/target/release/goose" ]; then
        echo "$REPO_ROOT/goose/target/release/goose"
        return 0
    fi
    if [ -x "$HOME/.local/bin/goose" ]; then
        echo "$HOME/.local/bin/goose"
        return 0
    fi
    if command -v goose >/dev/null 2>&1; then
        command -v goose
        return 0
    fi
    echo ""
    return 1
}

# –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–æ—á–µ–Ω–Ω—è Goose: —Å–∏–º–ª—ñ–Ω–∫ —ñ —à–ª—è—Ö–∏ info
goose_env_report() {
    local logf="logs/goose_env.log"
    [ -w "logs" ] || return 0
    local goose_bin
    goose_bin=$(resolve_goose_bin)
    [ -n "$goose_bin" ] || return 0

    {
        echo "==== Goose environment check: $(date -u +%Y-%m-%dT%H:%M:%SZ) ===="
        echo "GOOSE_BIN: $goose_bin"
        echo "~/.config/goose link status:"
        ls -l "$HOME/.config/goose" 2>&1 || true
        if [ -L "$HOME/.config/goose" ]; then
            echo "readlink ~/.config/goose -> $(readlink "$HOME/.config/goose")"
        fi
        echo "-- goose info (default env) --"
        "$goose_bin" info 2>&1 || true
        echo "-- goose info (XDG_CONFIG_HOME=$REPO_ROOT/goose) --"
        XDG_CONFIG_HOME="$REPO_ROOT/goose" "$goose_bin" info 2>&1 || true
        echo ""
    } >> "$logf"

    echo "üìù Goose env diagnostics written to $logf"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—É (macOS compatible)
check_port() {
    local port=$1
    if command -v lsof >/dev/null 2>&1; then
        # Use lsof if available (macOS and Linux)
        if lsof -ti:$port > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  Port $port is already in use"
            return 1
        fi
    elif command -v netstat >/dev/null 2>&1; then
        # Fallback to netstat (Linux)
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            echo "‚ö†Ô∏è  Port $port is already in use"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Cannot check port $port availability (no lsof or netstat)"
    fi
    return 0
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—É –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
start_service() {
    local name=$1
    local command=$2
    local logfile=$3
    local pidfile=$4
    
    echo "Starting $name..."
    nohup $command > $logfile 2>&1 &
    local pid=$!
    echo $pid > $pidfile
    echo "‚úÖ $name started (PID: $pid)"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
echo "üîç Checking ports availability..."
if lsof -ti:3000 > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  Goose web interface port 3000 busy (Goose will be skipped)"
else
    echo "‚úÖ Port 3000 available for Goose"
fi
check_port 5001 || { echo "‚ùå Frontend port 5001 busy"; exit 1; }
check_port 5101 || { echo "‚ùå Orchestrator port 5101 busy"; exit 1; }
check_port 5102 || { echo "‚ö†Ô∏è  Recovery bridge port 5102 busy (will attempt restart)"; }

echo "‚úÖ Port check completed"

# 1.5. –ó–∞–ø—É—Å–∫ Ukrainian TTS Mock (Port 3001) ‚Äî Optional but recommended for Voice API
echo "üé§ Starting Ukrainian TTS Mock (port 3001)..."
if lsof -ti:3001 > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  Port 3001 is busy. Skipping TTS mock startup. Set ATLAS_TTS_URL to your TTS endpoint."
else
    if [ -f "frontend_new/venv/bin/activate" ]; then
        source frontend_new/venv/bin/activate
    fi
    nohup TTS_PORT=3001 python frontend_new/ukrainian_tts_server.py > logs/tts_mock.log 2>&1 &
    echo $! > logs/tts_mock.pid
    echo "‚úÖ TTS mock started (PID: $(cat logs/tts_mock.pid)) on http://127.0.0.1:3001"
fi

# 2. –ó–∞–ø—É—Å–∫ Goose Web Interface (Port 3000) - Optional
echo "ü¶Ü Starting Goose Web Interface..."
# –£–∑–≥–æ–¥–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Goose Web
ensure_goose_config_link
goose_env_report
cd goose
if [ -f "target/release/goose" ]; then
    XDG_CONFIG_HOME=$(pwd) ./target/release/goose web > ../logs/goose.log 2>&1 &
    echo $! > ../logs/goose.pid
    echo "‚úÖ Goose web interface started (PID: $(cat ../logs/goose.pid))"
elif command -v cargo >/dev/null 2>&1; then
    echo "üì¶ Goose binary not found. Building with Cargo (this may take several minutes)..."
    if cargo build --release --quiet; then
        XDG_CONFIG_HOME=$(pwd) ./target/release/goose web > ../logs/goose.log 2>&1 &
        echo $! > ../logs/goose.pid
        echo "‚úÖ Goose web interface started (PID: $(cat ../logs/goose.pid))"
    else
        echo "‚ö†Ô∏è  Goose build failed. Continuing without Goose web interface."
        echo "   Frontend will still work on http://localhost:5001"
    fi
else
    echo "‚ö†Ô∏è  Cargo not found. Skipping Goose web interface."
    echo "   Frontend will still work on http://localhost:5001"
fi
cd ..

# 3. –ó–∞–ø—É—Å–∫ Node.js Orchestrator (Port 5101)
echo "üé≠ Starting Node.js Orchestrator..."
cd frontend_new/orchestrator
node server.js > ../../logs/orchestrator.log 2>&1 &
echo $! > ../../logs/orchestrator.pid
echo "‚úÖ Node.js orchestrator started (PID: $(cat ../../logs/orchestrator.pid))"
cd ../..

# 4. –ó–∞–ø—É—Å–∫ Python Frontend (Port 5001)
echo "üß† Starting Python Frontend..."
# Python frontend –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ start_server.sh –≤ frontend_new
if ps aux | grep -q "atlas_server.py" && ! ps aux | grep -q "grep atlas_server.py"; then
    echo "‚úÖ Python frontend already running on port 5001"
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ PID –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
    python_pid=$(ps aux | grep "atlas_server.py" | grep -v grep | awk '{print $2}')
    echo $python_pid > logs/frontend.pid
else
    echo "üß† Starting new Python frontend instance..."
    cd frontend_new
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    fi
    # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º URL TTS –¥–ª—è Voice API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 3001)
    export ATLAS_TTS_URL=${ATLAS_TTS_URL:-http://127.0.0.1:3001/tts}
    python app/atlas_server.py > ../logs/frontend.log 2>&1 &
    echo $! > ../logs/frontend.pid
    echo "‚úÖ Python frontend started (PID: $(cat ../logs/frontend.pid))"
    cd ..
fi

# 5. –ó–∞–ø—É—Å–∫ Recovery Bridge (Port 5102)
echo "üîß Starting Recovery Bridge..."
cd frontend_new
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
fi
python config/recovery_bridge.py > ../logs/recovery_bridge.log 2>&1 &
echo $! > ../logs/recovery_bridge.pid
echo "‚úÖ Recovery Bridge started (PID: $(cat ../logs/recovery_bridge.pid))"
cd ..

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
echo "‚è≥ Waiting for services to initialize..."
sleep 5

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤
echo "üîç Checking service health..."

check_service() {
    local name=$1
    local url=$2
    local pidfile=$3
    
    if [ -f "$pidfile" ] && ps -p $(cat $pidfile) > /dev/null 2>&1; then
        if curl -s --max-time 3 "$url" > /dev/null 2>&1; then
            echo "‚úÖ $name is running and responsive"
        else
            echo "‚ö†Ô∏è  $name is running but not responding"
        fi
    else
        echo "‚ùå $name is not running"
    fi
}

check_service "Python Frontend" "http://localhost:5001" "logs/frontend.pid"
check_service "Node.js Orchestrator" "http://localhost:5101/health" "logs/orchestrator.pid"

# Check Goose only if it was started
if [ -f "logs/goose.pid" ] && ps -p $(cat logs/goose.pid) > /dev/null 2>&1; then
    check_service "Goose Web" "http://localhost:3000" "logs/goose.pid"
else
    echo "‚ö†Ô∏è  Goose Web Interface not running (optional)"
fi

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Recovery Bridge (WebSocket –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ curl)
echo "üîß Checking Recovery Bridge..."
if [ -f "logs/recovery_bridge.pid" ] && ps -p $(cat logs/recovery_bridge.pid) > /dev/null 2>&1; then
    echo "‚úÖ Recovery Bridge is running"
else
    echo "‚ùå Recovery Bridge is not running"
fi

echo ""
echo "üéâ ATLAS System Startup Complete!"
echo ""
echo "üìä Service Dashboard:"
if [ -f "logs/goose.pid" ] && ps -p $(cat logs/goose.pid) > /dev/null 2>&1; then
    echo "   üåê Web Interface:    http://localhost:3000"
else
    echo "   üåê Web Interface:    (not available - Goose not running)"
fi
echo "   üêç Python Frontend:  http://localhost:5001"
echo "   üé≠ Orchestrator API: http://localhost:5101"
echo "   üîß Recovery Bridge:  ws://localhost:5102"
echo ""
echo "üìù Logs:"
if [ -f "logs/goose.log" ]; then
    echo "   Goose:        logs/goose.log"
fi
echo "   Frontend:     logs/frontend.log"
echo "   Orchestrator: logs/orchestrator.log"
echo ""
echo "üõ†Ô∏è  Management:"
echo "   Stop system:  ./stop_stack.sh"
echo "   View logs:    tail -f logs/*.log"
echo "   Check status: ./status_stack.sh"
echo ""
echo "üöÄ ATLAS is now ready for intelligent multi-agent operations!"
