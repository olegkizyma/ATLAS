#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É Atlas –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é JavaScript —Å—Ç–∞–Ω—É
"""

import asyncio
import aiohttp
import json
import time

async def test_stream_completion():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è stream –∑–∞–ø–∏—Ç—ñ–≤"""
    print("üß™ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–ù–Ø STREAM –ó–ê–ü–ò–¢–Ü–í")
    print("=" * 50)
    
    session = aiohttp.ClientSession()
    
    try:
        messages = ["–¢–µ—Å—Ç 1", "–¢–µ—Å—Ç 2", "–¢–µ—Å—Ç 3", "–¢–µ—Å—Ç 4", "–¢–µ—Å—Ç 5"]
        
        for i, message in enumerate(messages, 1):
            print(f"\nüì§ Stream —Ç–µ—Å—Ç {i}: '{message}'")
            
            start_time = time.time()
            tokens = 0
            done_received = False
            
            try:
                async with session.post(
                    "http://localhost:8080/api/chat/stream",
                    json={"message": message},
                    headers={"Content-Type": "application/json"}
                ) as response:
                    
                    if response.status == 200:
                        async for chunk in response.content.iter_chunked(1024):
                            chunk_text = chunk.decode('utf-8', errors='ignore')
                            lines = chunk_text.strip().split('\n')
                            
                            for line in lines:
                                if line.startswith('data: '):
                                    try:
                                        data = json.loads(line[6:])
                                        
                                        if data.get('type') == 'token':
                                            tokens += 1
                                            print(f"  üî§ Token {tokens}: {data.get('content', '')[:50]}...")
                                        
                                        elif data.get('type') == 'done':
                                            done_received = True
                                            elapsed = time.time() - start_time
                                            print(f"  ‚úÖ DONE –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–∞ {elapsed:.2f}—Å. –¢–æ–∫–µ–Ω—ñ–≤: {tokens}")
                                            break
                                            
                                        elif data.get('type') == 'error':
                                            print(f"  ‚ùå ERROR: {data.get('content')}")
                                            break
                                            
                                    except json.JSONDecodeError:
                                        continue
                            
                            if done_received:
                                break
                        
                        if not done_received:
                            print(f"  üö® –ü–†–û–ë–õ–ï–ú–ê: DONE event –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É {i}")
                            print(f"     –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∏—á–∏–Ω–æ—é –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É!")
                            break
                    else:
                        print(f"  ‚ùå HTTP {response.status}")
                        break
                        
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                break
            
            # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(1)
    
    finally:
        await session.close()

async def test_concurrent_requests():
    """–¢–µ—Å—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (race condition)"""
    print(f"\nüß™ –¢–ï–°–¢ –û–î–ù–û–ß–ê–°–ù–ò–• –ó–ê–ü–ò–¢–Ü–í")
    print("=" * 50)
    
    session = aiohttp.ClientSession()
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 3 –∑–∞–ø–∏—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        tasks = []
        for i in range(3):
            task = session.post(
                "http://localhost:8080/api/chat/stream", 
                json={"message": f"Concurrent test {i+1}"},
                headers={"Content-Type": "application/json"}
            )
            tasks.append(task)
        
        print("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é 3 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö stream –∑–∞–ø–∏—Ç–∏...")
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        
        for i, response in enumerate(responses):
            if isinstance(response, Exception):
                print(f"  ‚ùå –ó–∞–ø–∏—Ç {i+1}: {response}")
            else:
                print(f"  üìä –ó–∞–ø–∏—Ç {i+1}: HTTP {response.status}")
                response.close()
    
    finally:
        await session.close()

if __name__ == "__main__":
    asyncio.run(test_stream_completion())
    asyncio.run(test_concurrent_requests())
    
    print(f"\nüìã –í–ò–°–ù–û–í–ö–ò:")
    print("1. –Ø–∫—â–æ DONE events –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç—å - —Ü–µ –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
    print("2. –Ø–∫—â–æ concurrent –∑–∞–ø–∏—Ç–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ - —Ü–µ race condition")
    print("3. –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—ñ–∫—Å–∏ –º–∞—é—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏:")
    print("   ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤ finally")
    print("   ‚úÖ –ê–≤—Ç–æ–∫–æ—Ä–µ–∫—Ü—ñ—è –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏")
    print("   ‚úÖ –ê–≤–∞—Ä—ñ–π–Ω–∏–π hotkey Ctrl+Shift+U")
    print(f"\nüîß –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –§–Ü–ö–°–£:")
    print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:8080")
    print("2. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Å–ø—ñ–ª—å")
    print("3. –Ø–∫—â–æ –ø–æ–ª–µ –±–ª–æ–∫—É—î—Ç—å—Å—è - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+Shift+U")
    print("4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ debug_input.html –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
