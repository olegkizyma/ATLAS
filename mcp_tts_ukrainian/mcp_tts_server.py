#!/usr/bin/env python3
"""
Ukrainian TTS MCP Server
=========================

–ù–∞–¥–∞—î TTS (Text-to-Speech) –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏:
- –û—Å–Ω–æ–≤–Ω–∏–π –¥–≤–∏–∂–æ–∫: robinhad/ukrainian-tts
- Fallback: Google TTS (gTTS)
- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª—É

–ê–≤—Ç–æ—Ä: Atlas AI Team
"""

import asyncio
import io
import json
import logging
import os
import sys
import tempfile
import traceback
from pathlib import Path
from typing import Dict, Any, Optional

import pygame
import requests
from gtts import gTTS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UkrainianTTSEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó TTS –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é fallback –Ω–∞ Google TTS"""
    
    def __init__(self):
        self.ukrainian_tts = None
        self.pygame_initialized = False
        self._init_ukrainian_tts()
        self._init_pygame()
    
    def _init_ukrainian_tts(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            logger.info("Trying Ukrainian TTS initialization...")
            
            # –í–∞—Ä—ñ–∞–Ω—Ç 1: –°—É—á–∞—Å–Ω–∏–π API –∑ TTS –∫–ª–∞—Å–æ–º
            try:
                from ukrainian_tts.tts import TTS
                self.ukrainian_tts = TTS(device='cpu')
                self.voices = None  # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Voices enum —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫–∏
                logger.info("‚úÖ Ukrainian TTS (modern API) initialized successfully")
                return
            except Exception as e1:
                logger.debug(f"Modern API failed: {e1}")
            
            # –í–∞—Ä—ñ–∞–Ω—Ç 2: –ü—Ä—è–º–∏–π —ñ–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
            try:
                from ukrainian_tts import tts as ukrainian_tts_func
                self.ukrainian_tts_func = ukrainian_tts_func
                self.ukrainian_tts = True  # –§–ª–∞–≥ —â–æ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
                self.voices = None
                logger.info("‚úÖ Ukrainian TTS (function API) initialized successfully")
                return
            except Exception as e2:
                logger.debug(f"Function API failed: {e2}")
                
            # –í–∞—Ä—ñ–∞–Ω—Ç 3: –ú–æ–¥—É–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
            try:
                import ukrainian_tts
                self.ukrainian_tts_module = ukrainian_tts
                self.ukrainian_tts = True
                self.voices = None
                logger.info("‚úÖ Ukrainian TTS (module API) initialized successfully")
                return
            except Exception as e3:
                logger.debug(f"Module API failed: {e3}")
            
            # –Ø–∫—â–æ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏
            raise Exception("All Ukrainian TTS initialization methods failed")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ukrainian TTS initialization failed: {e}")
            self.ukrainian_tts = None
            self.ukrainian_tts_func = None
            self.ukrainian_tts_module = None
            self.voices = None
    
    def _init_pygame(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è pygame –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É"""
        try:
            pygame.mixer.init()
            self.pygame_initialized = True
            logger.info("‚úÖ Pygame audio initialized")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Pygame initialization failed: {e}")
            self.pygame_initialized = False
    
    async def speak_ukrainian(self, text: str, voice: str = "mykyta") -> bool:
        """
        –û–∑–≤—É—á—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é TTS
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
            voice: –ì–æ–ª–æ—Å (mykyta, oleksa, tetiana, lada)
        
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        if not self.ukrainian_tts:
            logger.warning("Ukrainian TTS not available, falling back to Google TTS")
            return await self.speak_google(text, lang='uk')
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ ukrainian-tts –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info(f"üéôÔ∏è Generating speech with voice: {voice}")
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫–∏–π —Ç–∏–ø API –¥–æ—Å—Ç—É–ø–Ω–∏–π
                if hasattr(self, 'ukrainian_tts_func'):
                    # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π API
                    logger.debug("Using functional API")
                    with open(temp_path, 'wb') as output_file:
                        self.ukrainian_tts_func(text, voice, output_file)
                        
                elif hasattr(self, 'ukrainian_tts_module'):
                    # –ú–æ–¥—É–ª—å–Ω–∏–π API  
                    logger.debug("Using module API")
                    with open(temp_path, 'wb') as output_file:
                        self.ukrainian_tts_module.tts(text, voice, output_file)
                        
                elif hasattr(self.ukrainian_tts, 'tts'):
                    # –°—É—á–∞—Å–Ω–∏–π API (–∑ TTS –∫–ª–∞—Å–æ–º)
                    logger.debug("Using class API")
                    with open(temp_path, 'wb') as output_file:
                        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                        try:
                            # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑ stress="dictionary"
                            self.ukrainian_tts.tts(text, voice, "dictionary", output_file)
                        except Exception as e:
                            logger.debug(f"Dictionary stress failed: {e}")
                            try:
                                # –°–ø—Ä–æ–±—É—î–º–æ –∑ stress="model"
                                self.ukrainian_tts.tts(text, voice, "model", output_file)
                            except Exception as e2:
                                logger.debug(f"Model stress failed: {e2}")
                                # –°–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ stress –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                self.ukrainian_tts.tts(text, voice, output_file)
                            
                elif hasattr(self.ukrainian_tts, 'inference'):
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è inference –º–µ—Ç–æ–¥—É
                    logger.debug("Using inference API")
                    audio = self.ukrainian_tts.inference(text, voice=voice)
                    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —É —Ñ–∞–π–ª
                    import torchaudio
                    torchaudio.save(temp_path, audio, 22050)
                else:
                    # Fallback –¥–æ Google TTS
                    logger.warning("Ukrainian TTS API incompatible, using Google TTS")
                    return await self.speak_google(text, lang='uk')
            
            except Exception as api_error:
                logger.warning(f"Ukrainian TTS API error: {api_error}, trying fallback")
                return await self.speak_google(text, lang='uk')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ
            if not Path(temp_path).exists() or Path(temp_path).stat().st_size == 0:
                logger.warning("Ukrainian TTS produced empty file, using Google TTS")
                return await self.speak_google(text, lang='uk')
            
            # –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            if self.pygame_initialized:
                pygame.mixer.music.load(temp_path)
                pygame.mixer.music.play()
                
                # –ß–µ–∫–∞—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
                while pygame.mixer.music.get_busy():
                    await asyncio.sleep(0.1)
            
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
            Path(temp_path).unlink(missing_ok=True)
            
            logger.info("‚úÖ Ukrainian TTS playback completed")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Ukrainian TTS failed: {e}")
            # –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª—É —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            try:
                Path(temp_path).unlink(missing_ok=True)
            except:
                pass
            return await self.speak_google(text, lang='uk')
    
    async def speak_google(self, text: str, lang: str = 'uk') -> bool:
        """
        Fallback –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Google TTS
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
            lang: –ú–æ–≤–∞ (uk, en, ru)
        
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            logger.info(f"üåê Using Google TTS fallback for: {text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ gTTS
            tts = gTTS(text=text, lang=lang, slow=False)
            
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as temp_file:
                temp_path = temp_file.name
            
            tts.save(temp_path)
            
            # –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
            if self.pygame_initialized:
                pygame.mixer.music.load(temp_path)
                pygame.mixer.music.play()
                
                # –ß–µ–∫–∞—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
                while pygame.mixer.music.get_busy():
                    await asyncio.sleep(0.1)
            
            # –û—á–∏—â–µ–Ω–Ω—è
            Path(temp_path).unlink(missing_ok=True)
            
            logger.info("‚úÖ Google TTS playback completed")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Google TTS failed: {e}")
            return False
    
    async def speak(self, text: str, voice: str = "mykyta", lang: str = "uk") -> Dict[str, Any]:
        """
        –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
            voice: –ì–æ–ª–æ—Å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS
            lang: –ú–æ–≤–∞ (uk, en, ru)
        
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü—ñ—ó
        """
        if not text.strip():
            return {"status": "error", "message": "Empty text provided"}
        
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É TTS –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
            if lang == 'uk':
                success = await self.speak_ukrainian(text, voice)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö –º–æ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Google TTS
                success = await self.speak_google(text, lang)
            
            if success:
                return {
                    "status": "success", 
                    "message": f"Successfully spoke: {text[:50]}{'...' if len(text) > 50 else ''}",
                    "engine": "ukrainian-tts" if lang == 'uk' and self.ukrainian_tts else "google-tts",
                    "voice": voice if lang == 'uk' else "default",
                    "language": lang
                }
            else:
                return {
                    "status": "error", 
                    "message": "All TTS engines failed",
                    "text": text[:100]
                }
                
        except Exception as e:
            logger.error(f"TTS speak error: {e}")
            return {
                "status": "error", 
                "message": str(e),
                "text": text[:100]
            }


class MCPTTSServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS"""
    
    def __init__(self):
        self.tts_engine = UkrainianTTSEngine()
        logger.info("üéôÔ∏è Ukrainian TTS MCP Server initialized")
    
    def get_available_tools(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
        return {
            "tools": {
                "say_tts": {
                    "description": "Text-to-speech using Ukrainian TTS with Google TTS fallback",
                    "parameters": {
                        "text": {"type": "string", "description": "Text to speak"},
                        "voice": {
                            "type": "string", 
                            "description": "Voice for Ukrainian TTS", 
                            "enum": ["mykyta", "oleksa", "tetiana", "lada"],
                            "default": "mykyta"
                        },
                        "lang": {
                            "type": "string",
                            "description": "Language code",
                            "enum": ["uk", "en", "ru"],
                            "default": "uk"
                        },
                        "rate": {"type": "number", "description": "Speech rate (ignored, for compatibility)", "default": 200}
                    },
                    "required": ["text"]
                },
                "list_voices": {
                    "description": "List available voices",
                    "parameters": {},
                    "required": []
                },
                "tts_status": {
                    "description": "Get TTS engine status",
                    "parameters": {},
                    "required": []
                }
            }
        }
    
    def call_tool_sync(self, tool_name: str, args: Dict[str, Any]) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è call_tool –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∑ Rust"""
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ async –º–µ—Ç–æ–¥ –≤ –Ω–æ–≤–æ–º—É event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(self.call_tool(tool_name, args))
                return json.dumps(result, ensure_ascii=False)
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"Error in call_tool_sync: {e}")
            return json.dumps({"status": "error", "message": f"Sync call error: {str(e)}"}, ensure_ascii=False)

    async def call_tool(self, tool_name: str, args: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∏–∫–ª–∏–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É"""
        try:
            if tool_name == "say_tts":
                text = args.get("text", "")
                voice = args.get("voice", "mykyta")
                lang = args.get("lang", "uk")
                
                return await self.tts_engine.speak(text, voice, lang)
            
            elif tool_name == "list_voices":
                return {
                    "status": "success",
                    "voices": {
                        "ukrainian": ["mykyta", "oleksa", "tetiana", "lada"],
                        "google": ["default (per language)"]
                    },
                    "languages": ["uk", "en", "ru"]
                }
            
            elif tool_name == "tts_status":
                return {
                    "status": "success",
                    "engines": {
                        "ukrainian_tts": self.tts_engine.ukrainian_tts is not None,
                        "google_tts": True,
                        "pygame_audio": self.tts_engine.pygame_initialized
                    },
                    "primary_engine": "ukrainian-tts" if self.tts_engine.ukrainian_tts else "google-tts"
                }
            
            else:
                return {
                    "status": "error",
                    "message": f"Unknown tool: {tool_name}"
                }
                
        except Exception as e:
            logger.error(f"Tool call error: {e}")
            return {
                "status": "error",
                "message": str(e),
                "traceback": traceback.format_exc()
            }


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    server = MCPTTSServer()
    
    logger.info("üöÄ Starting Ukrainian TTS MCP Server...")
    
    # MCP –ø—Ä–æ—Ç–æ–∫–æ–ª —á–µ—Ä–µ–∑ stdin/stdout
    while True:
        try:
            # –ß–∏—Ç–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∑ stdin
            line = sys.stdin.readline()
            if not line:
                break
            
            request = json.loads(line.strip())
            
            # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É
            if request.get("method") == "tools/list":
                response = {
                    "jsonrpc": "2.0",
                    "id": request.get("id"),
                    "result": server.get_available_tools()
                }
            
            elif request.get("method") == "tools/call":
                params = request.get("params", {})
                tool_name = params.get("name")
                args = params.get("arguments", {})
                
                result = await server.call_tool(tool_name, args)
                
                response = {
                    "jsonrpc": "2.0",
                    "id": request.get("id"),
                    "result": {
                        "content": [
                            {
                                "type": "text",
                                "text": json.dumps(result, ensure_ascii=False)
                            }
                        ]
                    }
                }
            
            else:
                response = {
                    "jsonrpc": "2.0",
                    "id": request.get("id"),
                    "error": {
                        "code": -32601,
                        "message": f"Method not found: {request.get('method')}"
                    }
                }
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            print(json.dumps(response, ensure_ascii=False))
            sys.stdout.flush()
            
        except EOFError:
            break
        except Exception as e:
            logger.error(f"Main loop error: {e}")
            error_response = {
                "jsonrpc": "2.0",
                "id": request.get("id") if 'request' in locals() else None,
                "error": {
                    "code": -32603,
                    "message": str(e)
                }
            }
            print(json.dumps(error_response))
            sys.stdout.flush()

if __name__ == "__main__":
    asyncio.run(main())
