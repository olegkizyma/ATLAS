#!/usr/bin/env python3
"""
Goose AI Integration –¥–ª—è Ukrainian TTS
====================================

–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è Ukrainian TTS MCP Server –∑ Goose AI
"""

import asyncio
import json
import logging
from mcp_tts_server import MCPTTSServer

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GooseUkrainianTTS:
    """–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è Ukrainian TTS –¥–ª—è Goose AI"""
    
    def __init__(self):
        self.server = MCPTTSServer()
        logger.info("üéôÔ∏è Goose Ukrainian TTS Integration initialized")
    
    async def speak(self, text: str, voice: str = "mykyta", lang: str = "uk") -> bool:
        """
        –û–∑–≤—É—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è Goose AI
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è
            voice: –ì–æ–ª–æ—Å (mykyta, oleksa, tetiana, lada)
            lang: –ú–æ–≤–∞ (uk, en, ru)
            
        Returns:
            bool: True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
        """
        try:
            result = await self.server.call_tool("say_tts", {
                "text": text,
                "voice": voice,
                "lang": lang
            })
            
            if result["status"] == "success":
                logger.info(f"üéµ Spoke: {text[:50]}... ({result['engine']})")
                return True
            else:
                logger.error(f"‚ùå TTS failed: {result['message']}")
                return False
                
        except Exception as e:
            logger.error(f"üí• TTS error: {e}")
            return False
    
    async def get_status(self) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É TTS —Å–∏—Å—Ç–µ–º–∏"""
        return await self.server.call_tool("tts_status", {})
    
    async def list_voices(self) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–æ–ª–æ—Å—ñ–≤"""
        return await self.server.call_tool("list_voices", {})

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è Goose
_goose_tts = None

def get_tts_instance():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è singleton –µ–∫–∑–µ–º–ø–ª—è—Ä—É TTS"""
    global _goose_tts
    if _goose_tts is None:
        _goose_tts = GooseUkrainianTTS()
    return _goose_tts

async def goose_speak(text: str, voice: str = "mykyta", lang: str = "uk") -> bool:
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è –≤ Goose
    
    Usage:
        from goose_integration import goose_speak
        await goose_speak("–ü—Ä–∏–≤—ñ—Ç! –Ø Goose AI!")
    """
    tts = get_tts_instance()
    return await tts.speak(text, voice, lang)

async def goose_speak_ukrainian(text: str, voice: str = "mykyta") -> bool:
    """–û–∑–≤—É—á–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é"""
    return await goose_speak(text, voice, "uk")

async def goose_speak_english(text: str) -> bool:
    """–û–∑–≤—É—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é"""
    return await goose_speak(text, "default", "en")

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    print("üéôÔ∏è Goose Ukrainian TTS Demo")
    
    # –¢–µ—Å—Ç–æ–≤—ñ —Ñ—Ä–∞–∑–∏
    test_phrases = [
        ("–ü—Ä–∏–≤—ñ—Ç! –Ø Goose AI, —ñ —è –º–æ–∂—É –≥–æ–≤–æ—Ä–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é!", "mykyta", "uk"),
        ("–¶–µ –¥—É–∂–µ –∫—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä —è –º–æ–∂—É –æ–∑–≤—É—á—É–≤–∞—Ç–∏ —Å–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!", "tetiana", "uk"),
        ("Hello! I can also speak English using Google TTS.", "default", "en"),
    ]
    
    for text, voice, lang in test_phrases:
        print(f"\nüó£Ô∏è Speaking: {text}")
        success = await goose_speak(text, voice, lang)
        print(f"   {'‚úÖ Success' if success else '‚ùå Failed'}")
        await asyncio.sleep(1)
    
    print("\nüìä TTS Status:")
    tts = get_tts_instance()
    status = await tts.get_status()
    if status["status"] == "success":
        engines = status["engines"]
        print(f"   Ukrainian TTS: {'‚úÖ' if engines['ukrainian_tts'] else '‚ùå'}")
        print(f"   Google TTS: {'‚úÖ' if engines['google_tts'] else '‚ùå'}")
        print(f"   Audio System: {'‚úÖ' if engines['pygame_audio'] else '‚ùå'}")
        print(f"   Primary Engine: {status['primary_engine']}")

if __name__ == "__main__":
    asyncio.run(demo())
