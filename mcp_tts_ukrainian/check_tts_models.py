#!/usr/bin/env python3
"""
TTS Model Checker
=================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π TTS –º–æ–¥–µ–ª–∏.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–µ–π.
"""

import os
import sys
import logging
import traceback
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_pytorch():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PyTorch"""
    try:
        import torch
        logger.info(f"‚úÖ PyTorch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        logger.info(f"   CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            logger.info(f"   CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
            logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ GPU: {torch.cuda.device_count()}")
        return True
    except ImportError:
        logger.error("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PyTorch: {e}")
        return False

def check_ukrainian_tts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Ukrainian TTS"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ ukrainian-tts...")
        import ukrainian_tts
        logger.info(f"‚úÖ Ukrainian TTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –º–æ–¥–µ–ª–µ–π
        model_path = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
            module_path = Path(ukrainian_tts.__file__).parent
            logger.info(f"   –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é: {module_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π
            model_dirs = ['models', 'data', 'tts', 'model', 'resources']
            for dir_name in model_dirs:
                test_path = module_path / dir_name
                if test_path.exists():
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_path}")
                    model_path = test_path
        except Exception as e:
            logger.warning(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –º–æ–¥–µ–ª–µ–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ TTS, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            from ukrainian_tts.tts import TTS
            logger.info("‚úÖ –ö–ª–∞—Å—Å TTS –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TTS (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
            tts = TTS(device='cpu')
            logger.info("‚úÖ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            if hasattr(tts, 'voices'):
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {tts.voices}")
            elif hasattr(tts, 'Voices'):
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {tts.Voices}")
            else:
                logger.info("   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
            if hasattr(tts, 'models'):
                logger.info(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {tts.models}")
            else:
                logger.info("   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
            # –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å —Å –º–∞–ª–µ–Ω—å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏...")
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
                test_file = tmp.name
            
            try:
                tts.tts("–¢–µ—Å—Ç", "mykyta", "dictionary", open(test_file, 'wb'))
                file_size = Path(test_file).stat().st_size
                logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                if file_size < 100:
                    logger.warning("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π!")
            except Exception as synth_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {synth_error}")
                
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(test_file).unlink(missing_ok=True)
            except:
                pass
                
        except ImportError:
            logger.warning("‚ö†Ô∏è –ö–ª–∞—Å—Å TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ API
            try:
                logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ API...")
                import tempfile
                with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
                    test_file = tmp.name
                
                ukrainian_tts.tts("–¢–µ—Å—Ç", "mykyta", open(test_file, 'wb'))
                file_size = Path(test_file).stat().st_size
                logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                if file_size < 100:
                    logger.warning("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π!")
                    
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    Path(test_file).unlink(missing_ok=True)
                except:
                    pass
            except Exception as func_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ API: {func_error}")
        except Exception as tts_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {tts_error}")
            traceback.print_exc()
        
        return True
    except ImportError:
        logger.error("‚ùå Ukrainian TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ukrainian TTS: {e}")
        traceback.print_exc()
        return False

def check_audio():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ pygame...")
        import pygame
        logger.info(f"‚úÖ Pygame —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {pygame.ver}")
        
        try:
            logger.info("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame.mixer...")
            pygame.mixer.init()
            logger.info("‚úÖ Pygame mixer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as mixer_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pygame.mixer: {mixer_error}")
        
        return True
    except ImportError:
        logger.error("‚ùå Pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Pygame: {e}")
        return False

def check_gtts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Google TTS"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ Google TTS (gTTS)...")
        from gtts import gTTS
        logger.info(f"‚úÖ gTTS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        try:
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.mp3', delete=False) as tmp:
                test_file = tmp.name
            
            logger.info("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞ —á–µ—Ä–µ–∑ gTTS...")
            tts = gTTS("Test", lang='en')
            tts.save(test_file)
            file_size = Path(test_file).stat().st_size
            logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ gTTS —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(test_file).unlink(missing_ok=True)
            except:
                pass
        except Exception as gtts_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —á–µ—Ä–µ–∑ gTTS: {gtts_error}")
        
        return True
    except ImportError:
        logger.error("‚ùå gTTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ gTTS: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ TTS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pytorch_ok = check_pytorch()
    ukrainian_tts_ok = check_ukrainian_tts()
    audio_ok = check_audio()
    gtts_ok = check_gtts()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info("\n===== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò =====")
    logger.info(f"PyTorch:      {'‚úÖ' if pytorch_ok else '‚ùå'}")
    logger.info(f"Ukrainian TTS: {'‚úÖ' if ukrainian_tts_ok else '‚ùå'}")
    logger.info(f"Pygame Audio: {'‚úÖ' if audio_ok else '‚ùå'}")
    logger.info(f"Google TTS:   {'‚úÖ' if gtts_ok else '‚ùå'}")
    
    if all([pytorch_ok, ukrainian_tts_ok, audio_ok, gtts_ok]):
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã TTS –≤ –ø–æ—Ä—è–¥–∫–µ!")
        return 0
    else:
        logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ TTS")
        return 1

if __name__ == "__main__":
    sys.exit(main())
