#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç Ukrainian TTS —á–µ—Ä–µ–∑ MCP
"""

import json
import asyncio
from mcp_tts_server import MCPTTSServer

async def simple_test():
    """–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üß™ Simple MCP Server Test...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
    server = MCPTTSServer()
    
    # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
    print("\n1Ô∏è‚É£ Available tools:")
    tools = server.get_available_tools()
    for tool_name, tool_info in tools["tools"].items():
        print(f"   üîß {tool_name}: {tool_info['description']}")
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å TTS
    print("\n2Ô∏è‚É£ TTS Status:")
    result = await server.call_tool("tts_status", {})
    print(f"   Status: {result['status']}")
    if result['status'] == 'success':
        engines = result['engines']
        print(f"   Ukrainian TTS: {'‚úÖ' if engines['ukrainian_tts'] else '‚ùå'}")
        print(f"   Google TTS: {'‚úÖ' if engines['google_tts'] else '‚ùå'}")
        print(f"   Pygame Audio: {'‚úÖ' if engines['pygame_audio'] else '‚ùå'}")
        print(f"   Primary Engine: {result['primary_engine']}")
    
    # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤
    print("\n3Ô∏è‚É£ Available voices:")
    result = await server.call_tool("list_voices", {})
    if result['status'] == 'success':
        for lang, voices in result['voices'].items():
            print(f"   üéµ {lang}: {', '.join(voices)}")
        print(f"   üåê Languages: {', '.join(result['languages'])}")
    
    # –¢–µ—Å—Ç 4: –£–∫—Ä–∞—ó–Ω—Å—å–∫–µ –æ–∑–≤—É—á–µ–Ω–Ω—è
    print("\n4Ô∏è‚É£ Testing Ukrainian TTS:")
    result = await server.call_tool("say_tts", {
        "text": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –æ–∑–≤—É—á–µ–Ω–Ω—è!",
        "voice": "mykyta",
        "lang": "uk"
    })
    print(f"   Result: {result['status']}")
    if result['status'] == 'success':
        print(f"   Engine: {result['engine']}")
        print(f"   Voice: {result['voice']}")
        print(f"   Message: {result['message']}")
    else:
        print(f"   Error: {result['message']}")
    
    # –¢–µ—Å—Ç 5: –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ –æ–∑–≤—É—á–µ–Ω–Ω—è
    print("\n5Ô∏è‚É£ Testing English TTS:")
    result = await server.call_tool("say_tts", {
        "text": "Hello! This is an English test!",
        "lang": "en"
    })
    print(f"   Result: {result['status']}")
    if result['status'] == 'success':
        print(f"   Engine: {result['engine']}")
        print(f"   Message: {result['message']}")
    else:
        print(f"   Error: {result['message']}")
    
    print("\n‚úÖ Simple test completed!")

if __name__ == "__main__":
    asyncio.run(simple_test())
