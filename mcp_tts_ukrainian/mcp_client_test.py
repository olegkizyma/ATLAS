#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π MCP –∫–ª—ñ—î–Ω—Ç –¥–ª—è Ukrainian TTS
===================================

–ü—Ä–æ—Å—Ç–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS
"""

import asyncio
import json
import subprocess
import sys
import time

async def test_mcp_server():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üß™ Starting MCP Client Test...")
    
    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
    server_process = subprocess.Popen(
        [sys.executable, "mcp_tts_server.py"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        cwd="/Users/dev/Documents/Atlas-mcp/mcp_tts_ukrainian"
    )
    
    def send_request(method, params=None):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ MCP –∑–∞–ø–∏—Ç—É"""
        request = {
            "jsonrpc": "2.0",
            "id": int(time.time() * 1000),
            "method": method
        }
        if params:
            request["params"] = params
        
        request_json = json.dumps(request, ensure_ascii=False)
        print(f"üì§ Sending: {request_json}")
        
        server_process.stdin.write(request_json + "\n")
        server_process.stdin.flush()
        
        response_line = server_process.stdout.readline()
        if response_line:
            response = json.loads(response_line)
            print(f"üì• Response: {json.dumps(response, ensure_ascii=False, indent=2)}")
            return response
        return None
    
    try:
        # –î–æ—á–µ–∫–∞—î–º–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞
        await asyncio.sleep(3)
        
        # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        print("\n1Ô∏è‚É£ Testing tools/list...")
        response = send_request("tools/list")
        
        # –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å TTS
        print("\n2Ô∏è‚É£ Testing tts_status...")
        response = send_request("tools/call", {
            "name": "tts_status",
            "arguments": {}
        })
        
        # –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å—ñ–≤
        print("\n3Ô∏è‚É£ Testing list_voices...")
        response = send_request("tools/call", {
            "name": "list_voices", 
            "arguments": {}
        })
        
        # –¢–µ—Å—Ç 4: –£–∫—Ä–∞—ó–Ω—Å—å–∫–µ –æ–∑–≤—É—á–µ–Ω–Ω—è
        print("\n4Ô∏è‚É£ Testing Ukrainian TTS...")
        response = send_request("tools/call", {
            "name": "say_tts",
            "arguments": {
                "text": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞!",
                "voice": "mykyta",
                "lang": "uk"
            }
        })
        
        # –¢–µ—Å—Ç 5: –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ –æ–∑–≤—É—á–µ–Ω–Ω—è (fallback)
        print("\n5Ô∏è‚É£ Testing English fallback...")
        response = send_request("tools/call", {
            "name": "say_tts",
            "arguments": {
                "text": "Hello! This is MCP server test!",
                "lang": "en"
            }
        })
        
        print("\n‚úÖ All tests completed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
    
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
        server_process.terminate()
        await asyncio.sleep(1)
        if server_process.poll() is None:
            server_process.kill()

if __name__ == "__main__":
    asyncio.run(test_mcp_server())
