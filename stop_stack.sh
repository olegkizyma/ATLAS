#!/bin/bash

# ATLAS Intelligent Stack Shutdown Script
# –ó—É–ø–∏–Ω–∫–∞ –ø–æ–≤–Ω–æ–≥–æ —Å—Ç–µ–∫—É ATLAS –∑ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è

set -e

echo "üõë Stopping ATLAS Intelligent Multi-Agent System..."

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å–µ—Ä–≤—ñ—Å—É –∑–∞ PID —Ñ–∞–π–ª–æ–º
stop_service() {
    local name=$1
    local pidfile=$2
    local signal=${3:-TERM}
    
    if [ -f "$pidfile" ]; then
        local pid=$(cat "$pidfile")
        if ps -p $pid > /dev/null 2>&1; then
            echo "Stopping $name (PID: $pid)..."
            kill -$signal $pid
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
            local count=0
            while ps -p $pid > /dev/null 2>&1 && [ $count -lt 10 ]; do
                sleep 1
                count=$((count + 1))
            done
            
            if ps -p $pid > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Force killing $name..."
                kill -KILL $pid
                sleep 1
            fi
            
            echo "‚úÖ $name stopped"
        else
            echo "‚ö†Ô∏è  $name was not running (stale PID file)"
        fi
        rm -f "$pidfile"
    else
        echo "‚ö†Ô∏è  $name PID file not found"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é
stop_by_name() {
    local name=$1
    local pattern=$2
    
    local pids=$(pgrep -f "$pattern" 2>/dev/null || true)
    if [ -n "$pids" ]; then
        echo "Stopping $name processes..."
        echo "$pids" | xargs kill 2>/dev/null || true
        sleep 2
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å–∏
        local remaining=$(pgrep -f "$pattern" 2>/dev/null || true)
        if [ -n "$remaining" ]; then
            echo "Force killing remaining $name processes..."
            echo "$remaining" | xargs kill -KILL 2>/dev/null || true
        fi
        echo "‚úÖ $name processes stopped"
    fi
}

# 1. –ó—É–ø–∏–Ω–∫–∞ Recovery Bridge (Port 5102)
echo "üîß Stopping Recovery Bridge..."
stop_service "Recovery Bridge" "logs/recovery_bridge.pid"

# 2. –ó—É–ø–∏–Ω–∫–∞ Node.js Orchestrator (Port 5101)
echo "üé≠ Stopping Node.js Orchestrator..."
stop_service "Node.js Orchestrator" "logs/orchestrator.pid"

# 3. –ó—É–ø–∏–Ω–∫–∞ Python Frontend (Port 5001)
echo "üß† Stopping Python Frontend..."
stop_service "Python Frontend" "logs/frontend.pid"

# 4. –ó—É–ø–∏–Ω–∫–∞ Goose Web Interface (Port 3000)
echo "ü¶Ü Stopping Goose Web Interface..."
stop_service "Goose Web Interface" "logs/goose.pid"

# 4.5. –ó—É–ø–∏–Ω–∫–∞ Ukrainian TTS Mock (Port 3001)
echo "üé§ Stopping Ukrainian TTS Mock..."
stop_service "Ukrainian TTS Mock" "logs/tts_mock.pid"

# 5. –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—ñ–≤ –∑–∞ —ñ–º–µ–Ω–µ–º
echo "üßπ Cleaning up remaining processes..."
stop_by_name "Goose daemon" "goosed"
stop_by_name "Python frontend" "atlas_minimal_live.py"
stop_by_name "Recovery bridge" "recovery_bridge.py"
stop_by_name "Node orchestrator" "start_server.sh"

# 5. –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç—ñ–≤ (—è–∫—â–æ —â–æ—Å—å –∑–∞–ª–∏—à–∏–ª–æ—Å—å)
echo "üîç Checking for remaining port usage..."
check_and_kill_port() {
    local port=$1
    local service_name=$2
    
    local pid=$(lsof -ti:$port 2>/dev/null || true)
    if [ -n "$pid" ]; then
        echo "‚ö†Ô∏è  Port $port still in use by $service_name (PID: $pid)"
        kill $pid 2>/dev/null || true
        sleep 1
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–æ—Ü–µ—Å –≤—Å–µ —â–µ –∂–∏–≤–∏–π
        if ps -p $pid > /dev/null 2>&1; then
            echo "Force killing process on port $port..."
            kill -KILL $pid 2>/dev/null || true
        fi
        echo "‚úÖ Port $port freed"
    fi
}

check_and_kill_port 3000 "Goose Web"
check_and_kill_port 3001 "Ukrainian TTS Mock"
check_and_kill_port 5001 "Python Frontend"  
check_and_kill_port 5101 "Node.js Orchestrator"
check_and_kill_port 5102 "Recovery Bridge"

# 6. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª—ñ–≤ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
echo "üóëÔ∏è  Cleaning up lock files..."
find logs/ -name "*.pid" -delete 2>/dev/null || true

# 7. –ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ–π–Ω–æ)
if [ "$1" = "--archive-logs" ]; then
    echo "üì¶ Archiving logs..."
    timestamp=$(date +%Y%m%d_%H%M%S)
    mkdir -p logs/archive
    tar -czf logs/archive/atlas_logs_$timestamp.tar.gz logs/*.log 2>/dev/null || true
    echo "‚úÖ Logs archived to logs/archive/atlas_logs_$timestamp.tar.gz"
fi

# 8. –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
echo "üîç Final health check..."
sleep 2

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤—Å—ñ –ø–æ—Ä—Ç–∏ –≤—ñ–ª—å–Ω—ñ
ports_free=true
for port in 3000 5001 5101 5102; do
    if lsof -ti:$port > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  Port $port is still in use"
        ports_free=false
    fi
done

if [ "$ports_free" = true ]; then
    echo "‚úÖ All ports are free"
else
    echo "‚ö†Ô∏è  Some ports are still in use - manual cleanup may be required"
fi

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥—ñ–≤
if [ -d "logs" ]; then
    log_count=$(find logs/ -name "*.log" | wc -l)
    if [ $log_count -gt 0 ]; then
        echo "üìä $log_count log files remain in logs/ directory"
    fi
fi

echo ""
echo "üéâ ATLAS System Shutdown Complete!"
echo ""
echo "üõ†Ô∏è  Available commands:"
echo "   Start system:    ./start_stack.sh"
echo "   Archive logs:    ./stop_stack.sh --archive-logs"
echo "   View log files:  ls -la logs/"
echo ""
echo "‚ú® System is now safely stopped and ready for restart"
