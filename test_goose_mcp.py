#!/usr/bin/env python3
"""
–¢–µ—Å—Ç goose Ukrainian TTS MCP —Å–µ—Ä–≤–µ—Ä–∞
"""
import subprocess
import json
import time

def test_goose_mcp():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Ukrainian TTS —á–µ—Ä–µ–∑ goose MCP"""
    print("üß™ Testing Ukrainian TTS through Goose MCP...")
    
    # –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
    cmd = ['bash', '-c', 'cd goose && source bin/activate-hermit && cargo run --bin mcp-tts-ukrainian']
    
    process = subprocess.Popen(
        cmd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        init_msg = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-10-07",
                "capabilities": {},
                "clientInfo": {
                    "name": "test-client",
                    "version": "1.0.0"
                }
            }
        }
        
        print("üì§ Sending initialize...")
        process.stdin.write(json.dumps(init_msg) + '\n')
        process.stdin.flush()
        
        # –ß–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = process.stdout.readline()
        print(f"üì• Init response: {response.strip()}")
        
        # TTS —Ç–µ—Å—Ç
        tts_msg = {
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/call",
            "params": {
                "name": "say_tts",
                "arguments": {
                    "text": "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ goose MCP!",
                    "voice": "tetiana",
                    "lang": "uk"
                }
            }
        }
        
        print("üì§ Sending TTS request...")
        process.stdin.write(json.dumps(tts_msg) + '\n')
        process.stdin.flush()
        
        # –ß–∏—Ç–∞–Ω–Ω—è TTS –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = process.stdout.readline()
        print(f"üì• TTS response: {response.strip()}")
        
        print("‚úÖ Test completed!")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        
    finally:
        process.terminate()
        time.sleep(1)
        if process.poll() is None:
            process.kill()

if __name__ == "__main__":
    test_goose_mcp()
